public class Gen {

	public class Trigger {
		public static boolean isExecuting { get; set; }
		public static boolean isInsert { get; set; }
		public static boolean isUpdate { get; set; }
		public static boolean isDelete { get; set; }
		public static boolean isBefore { get; set; }
		public static boolean isAfter { get; set; }
		public static boolean isUndelete { get; set; }
		public static List<sObject> new { get; set; }
		public static Map<id, sObject> newMap { get; set; }
		public static List<sObject> old { get; set; }
		public static Map<id, sObject> oldMap { get; set; }
		public static integer size { get; set; }
	}

	public class Answers {
		public static ID[] findSimilar(Question q);
		public static Void setBestReply(String questionId, String replyId);
	}

	public class ApexPages {
		public Void addMessage(ApexPages.Message msg);
		public Void addMessages(Exception ex);
		public static System.PageReference currentPage();
		public ApexPages.Message[] getMessages();
		public Boolean hasMessages();
		public Boolean hasMessages(ApexPages.Severity sev);

		public class Action {
			public Action(String action);
			public String getExpression();
			public System.PageReference invoke();
		}

		public class Component {
			public List <ApexPages.Component> childComponents {get; set;}
			public String expressions {get; set;}
			public String facets {get; set;}
		}

		public class IdeaStandardController {
			public IdeaComment[] getCommentList();
		}

		public class IdeaStandardSetController {
			public Idea[] getIdeaList();
		}

		public class KnowledgeArticleVersionStandardController {
			public KnowledgeArticleVersionStandardController(SObject article);
			public String getSourceId();
			public Void setDataCategory(String categoryGroup, String category);
		}

		public class Message {
			public Message(ApexPages.Severity severity, String summary);
			public Message(ApexPages.Severity severity, String summary, String detail);
			public Message(ApexPages.Severity severity, String summary, String detail, String id);
			public String getDetail();
			public ApexPages.Severity getSeverity();
			public String getSummary();
		}

		public enum Severity {
			CONFIRM,
			ERROR,
			FATAL,
			INFO,
			WARNING
		}

		public class StandardController {
			public StandardController(SObject controllerSObject);
			public Void addFields(List<String> fieldNames);
			public System.PageReference cancel();
			public System.PageReference delete();
			public System.PageReference edit();
			public String getId();
			public SObject getRecord();
			public Void reset();
			public System.PageReference save();
			public System.PageReference view();
		}

		public class StandardSetController {
			public StandardSetController(Database.QueryLocator SObjectList);
			public StandardSetController(List<SObject> controllerSObjects);
			public System.PageReference cancel();
			public Void first();
			public Boolean getCompleteResult();
			public String getFilterId();
			public Boolean getHasNext();
			public Boolean getHasPrevious();
			public System.SelectOption getListViewOptions();
			public Integer getPageNumber();
			public Integer getPageSize();
			public sObject getRecord();
			public sObject[] getRecords();
			public Integer getResultSize();
			public sObject[] getSelected();
			public Void last();
			public Void next();
			public Void previous();
			public System.PageReference save();
			public Void setFilterID(String filterId);
			public Void setpageNumber(Integer pageNumber);
			public Void setPageSize(Integer pageSize);
			public Void setSelected(sObject[] selectedRecords);
		}
	}

	public class Approval {
		public static Approval.ProcessResult process(Approval.ProcessRequest processRequest);
		public static Approval.ProcessResult process(Approval.ProcessRequest processRequests, Boolean opt_allOrNone);
		public static Approval.ProcessResult [] process(Approval.ProcessRequest[] processRequests);
		public static Approval.ProcessResult [] process(Approval.ProcessRequest[] processRequests, Boolean opt_allOrNone);

		public class ProcessRequest {
			public String getComments();
			public ID[] getNextApproverIds();
			public Void setComments(String comments);
			public Void setNextApproverIds(ID[] nextApproverIds);
		}

		public class ProcessResult {
			public String getEntityId();
			public Database.Error[] getErrors();
			public String getInstanceId();
			public String getInstanceStatus();
			public ID[] getNewWorkitemIds();
			public Boolean isSuccess();
		}

		public class ProcessSubmitRequest {
			public String getObjectId();
			public Void setObjectId(String Id);
		}

		public class ProcessWorkitemRequest {
			public String getAction();
			public String getWorkitemId();
			public Void setAction(String s);
			public Void setWorkitemId(String Id);
		}
	}

	public class Auth {
		public class AuthToken {
			public String getAccessToken(String authProviderId, String providerName);
			public Map<String, String> getAccessTokenMap(String authProviderId, String providerName);
			public Map<String, String> refreshAccessToken(String authProviderId, String providerName, String oldAccessToken);
		}

		public interface RegistrationHandler {
			User createUser(ID portalId, Auth.UserData userData);
			Void updateUser(ID userId, ID portalId, Auth.UserData userData);
		} 

		public class UserData {
			public UserData(String identifier, String firstName, String lastName, String fullName, String email, String link, String userName, String locale, String provider, String siteLoginUrl, Map<String, String> attributeMap);
			public String identifier {get; set;}
			public String firstName {get; set;}
			public String lastName {get; set;}
			public String fullName {get; set;}
			public String email {get; set;}
			public String link {get; set;}
			public String username {get; set;}
			public String locale {get; set;}
			public String provider {get; set;}
			public String siteLoginUrl {get; set;}
			public Map<String, String> attributeMap {get; set;}
		}
	}

	public class Blob {
		public Integer size();
		public static Blob toPdf(String stringToConvert);
		public String toString();
		public static Blob valueOf(String toBlob);
	}

	public class Boolean {
		public static Boolean valueOf(String toBoolean);
		public static Boolean valueOf(Object fieldValue);
	}

	public class Cases {
		public static ID getCaseIdFromEmailThreadId(String emailThreadId);
	}

	public class Canvas {
		public interface ApplicationContext {
			String getCanvasUrl();
			String getDeveloperName();
			String getName();
			String getNamespace();
			String getVersion();
			void setCanvasUrlPath(String newPath);
		}

		public class CanvasLifecycleHandler {
			public Set<Canvas.ContextTypeEnum> excludeContextTypes();
			public void onRender(Canvas.RenderContext renderContext);
		}

		public enum ContextTypeEnum {
			ORGANIZATION,
			RECORD_DETAIL,
			USER
		}

		public interface EnvironmentContext {
			void addEntityField(String fieldName);
			void addEntityFields(Set<String> fieldNames);
			String getDisplayLocation();
			List<String> getEntityFields();
			String getLocationUrl();
			String getParametersAsJSON();
			String getSublocation();
			void setParametersAsJSON(String jsonString);
		}

		public interface RenderContext {
			Canvas.ApplicationContext getApplicationContext();
			Canvas.EnvironmentContext getEnvironmentContext();
		}

		public class Test {
			public static final object KEY_CANVAS_URL;
			public static final object KEY_DEVELOPER_NAME;
			public static final object KEY_DISPLAY_LOCATION;
			public static final object KEY_LOCATION_URL;
			public static final object KEY_NAME;
			public static final object KEY_NAMESPACE;
			public static final object KEY_SUB_LOCATION;
			public static final object KEY_VERSION;
			public static Canvas.RenderContext mockRenderContext(Map<String,String> appContextTestValues, Map<String,String> envContextTestValues);
			public static Void testCanvasLifecycle(Canvas.CanvasLifecycleHandler lifecycleHandler,Canvas.RenderContext mockRenderContext);
		}

		public class CanvasRenderException extends Exception {

		}
	}

	public class ChatterAnswers {
		public interface AccountCreator {
			String createAccount(String firstname, String lastname, Id siteAdminId);
		}
	}

	public class ConnectApi {
		public class Announcements {
			public static void deleteAnnouncement(String communityId, String announcementId);
			public static ConnectApi.Announcement getAnnouncement(String communityId, String announcementId);
			public static ConnectApi.Announcement udpateAnnouncement(String communityId, String announcementId, Date expirationDate);
		}

		public class Chatter {
			public static void deleteSubscription(String communityId, String subscriptionId);
			public static ConnectApi.FollowerPage getFollowers(String communityId, String recordId);
			public static ConnectApi.FollowerPage getFollowers(String communityId, String recordId, Integer pageParam, Integer pageSize);
			public static ConnectApi.Subscription getSubscription(String communityId, String subscriptionId);
		}

		public class ChatterFavorites {
			public static ConnectApi.FeedFavorite addFavorite(String communityId, String subjectId, String searchText);
			public static ConnectApi.FeedFavorite addRecordFavorite(String communityId, String subjectId, String targetId);
			public static Void deleteFavorite(String communityId, String subjectId, String favoriteId);
			public static ConnectApi.FeedFavorite getFavorite(String communityId, String subjectId, String favoriteId);
			public static ConnectApi.FeedFavorites getFavorites(String communityId, String subjectId);
			public static ConnectApi.FeedElementPage getFeedElements(String communityId, String subjectId, String favoriteId);
			public static ConnectApi.FeedElementPage getFeedElements(String communityId, String subjectId, String favoriteId, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam);
			public static ConnectApi.FeedElementPage getFeedElements(String communityId, String subjectId, String favoriteId, Integer recentCommentCount, Integer elementsPerBundle, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam);
			public static ConnectApi.FeedItemPage getFeedItems(String communityId, String subjectId, String favoriteId);
			public static ConnectApi.FeedItemPage getFeedItems(String communityId, String subjectId, String favoriteId, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam);
			public static ConnectApi.FeedItemPage getFeedItems(String communityId, String subjectId, String favoriteId, Integer recentCommentCount, String pageParam, Integer pageSize, FeedSortOrder sortParam);
			public static Void setTestGetFeedElements(String communityId, String subjectId, String favoriteId, ConnectApi.FeedElementPage result);
			public static Void setTestGetFeedElements(String communityId, String subjectId, String favoriteId, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedElementPage result);
			public static Void setTestGetFeedElements(String communityId, String subjectId, String favoriteId, Integer recentCommentCount, Integer elementsPerClump, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedElementPage result);
			public static Void setTestGetFeedItems(String communityId, String subjectId, String favoriteId, ConnectApi.FeedItemPage result);
			public static Void setTestGetFeedItems(String communityId, String subjectId, String favoriteId, String pageParam, Integer pageSize, FeedSortOrder sortParam, ConnectApi.FeedItemPage result);
			public static Void setTestGetFeedItems(String communityId, String subjectId, String favoriteId, Integer recentCommentCount, String pageParam, Integer pageSize, FeedSortOrder sortParam, ConnectApi.FeedItemPage result);
			public static ConnectApi.FeedFavorite updateFavorite(String communityId, String subjectId, String favoriteId, Boolean updateLastViewDate);
		}

		public class ChatterFeeds {
			public static Void deleteComment(String communityId, String commentId);
			public static deleteFeedElement(String communityId, String feedElementId);
			public static Void deleteFeedItem(String communityId, String feedItemId);
			public static Void deleteLike(String communityId, String likeId);
			public static ConnectApi.Comment getComment(String communityId, String commentId);
			public static ConnectApi.CommentPage getCommentsForFeedItem(String communityId, String feedItemId);
			public static ConnectApi.CommentPage getCommentsForFeedItem(String communityId, String feedItemId, String pageParam, Integer pageSize);
			public static ConnectApi.Feed getFeed(String communityId, ConnectApi.FeedType feedType);
			public static ConnectApi.Feed getFeed(String communityId, ConnectApi.FeedType feedType, ConnectApi.FeedSortOrder sortParam);
			public static ConnectApi.Feed getFeed(String communityId, ConnectApi.FeedType feedType, String subjectId);
			public static ConnectApi.Feed getFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, ConnectApi.FeedSortOrder sortParam);
			public static ConnectApi.FeedDirectory getFeedDirectory(String communityId);
			public static ConnectApi.FeedElement getFeedElement(String communityId, String feedElementId);
			public static ConnectApi.FeedElement getFeedElement(String communityId, String feedElementId, Integer recentCommentCount, Integer elementsPerBundle);
			public static ConnectApi.BatchResult[] getFeedElementBatch(String communityId, List<String> feedElementIds);
			public static ConnectApi.FeedElementPage getFeedElementsFromBundle(String communityId, String feedElementId);
			public static ConnectApi.FeedElementPage getFeedElementsFromBundle(String communityId, String feedElementId, String pageParam, Integer pageSize, Integer elementsPerBundle, Integer recentCommentCount);
			public static ConnectApi.FeedElementPage getFeedElementsFromFeed(String communityId, ConnectApi.FeedType feedType);
			public static ConnectApi.FeedElementPage getFeedElementsFromFeed(String communityId, ConnectApi.FeedType feedType, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam);
			public static ConnectApi.FeedElementPage getFeedElementsFromFeed(String communityId, ConnectApi.FeedType feedType, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam);
			public static ConnectApi.FeedElementPage getFeedElementsFromFeed(String communityId, ConnectApi.FeedType feedType, String subjectId);
			public static ConnectApi.FeedElementPage getFeedElementsFromFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam);
			public static ConnectApi.FeedElementPage getFeedElementsFromFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam);
			public static ConnectApi.FeedElementPage getFeedElementsFromFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, Boolean showInternalOnly);
			public static ConnectApi.FeedElementPage getFeedElementsFromFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, Integer recentCommentCount, Integer elementsPerBundle, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, Boolean showInternalOnly);
			public static ConnectApi.FeedElementPage getFeedElementsFromFilterFeed(String communityId, String subjectId, String keyPrefix);
			public static ConnectApi.FeedElementPage getFeedElementsFromFilterFeed(String communityId, String subjectId, String keyPrefix, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam);
			public static ConnectApi.FeedElementPage getFeedElementsFromFilterFeed(String communityId, String subjectId, String keyPrefix, Integer recentCommentCount, Integer elementsPerBundle, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam);
			public static ConnectApi.FeedElementPage getFeedElementsFromFilterFeedUpdatedSince(String communityId, String subjectId, String keyPrefix, Integer recentCommentCount, Integer elementsPerClump, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, String updatedSince);
			public static ConnectApi.FeedElementPage getFeedElementsUpdatedSince(String communityId, ConnectApi.FeedType feedType, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, String updatedSince);
			public static ConnectApi.FeedElementPage getFeedElementsUpdatedSince(String communityId, ConnectApi.FeedType feedType, String subjectId, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, String updatedSince);
			public static ConnectApi.FeedElementPage getFeedElementsUpdatedSince(String communityId, ConnectApi.FeedType feedType, String subjectId, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, String updatedSince, Boolean showInternalOnly);
			public static ConnectApi.FeedElementPage getFeedElementsUpdatedSince(String communityId, ConnectApi.FeedType feedType, String subjectId, Integer recentCommentCount, Integer elementsPerClump, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, String updatedSince, Boolean showInternalOnly);
			public static ConnectApi.FeedItem getFeedItem(String communityId, String feedItemId);
			public static ConnectApi.BatchResult[] getFeedItemBatch(String communityId, List<String> feedItemIds);
			public static ConnectApi.FeedItemPage getFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType);
			public static ConnectApi.FeedItemPage getFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam);
			public static ConnectApi.FeedItemPage getFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam);
			public static ConnectApi.FeedItemPage getFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType, String subjectId);
			public static ConnectApi.FeedItemPage getFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam);
			public static ConnectApi.FeedItemPage getFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam);
			public static ConnectApi.FeedItemPage getFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, Boolean showInternalOnly);
			public static ConnectApi.FeedItemPage getFeedItemsFromFilterFeed(String communityId, String subjectId, String keyPrefix);
			public static ConnectApi.FeedItemPage getFeedItemsFromFilterFeed(String communityId, String subjectId, String keyPrefix, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam);
			public static ConnectApi.FeedItemPage getFeedItemsFromFilterFeed(String communityId, String subjectId, String keyPrefix, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam);
			public static ConnectApi.FeedItemPage getFeedItemsFromFilterFeedUpdatedSince(String communityId, String subjectId, String keyPrefix, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, String updatedSince);
			public static ConnectApi.FeedItemPage getFeedItemsUpdatedSince(String communityId, ConnectApi.FeedType feedType, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, String updatedSince);
			public static ConnectApi.FeedItemPage getFeedItemsUpdatedSince(String communityId, ConnectApi.FeedType feedType, String subjectId, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, String updatedSince);
			public static ConnectApi.FeedItemPage getFeedItemsUpdatedSince(String communityId, ConnectApi.FeedType feedType, String subjectId, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, String updatedSince, Boolean showInternalOnly);
			public static ConnectApi.FeedPoll getFeedPoll(String communityId, String feedItemId);
			public static ConnectApi.Feed getFilterFeed(String communityId, String subjectId, String keyPrefix);
			public static ConnectApi.Feed getFilterFeed(String communityId, String subjectId, String keyPrefix, ConnectApi.FeedType sortParam);
			public static ConnectApi.FeedDirectory getFilterFeedDirectory(String communityId, String subjectId);
			public static ConnectApi.ChatterLike getLike(String communityId, String likeId);
			public static ConnectApi.ChatterLikePage getLikesForComment(String communityId, String commentId);
			public static ConnectApi.ChatterLikePage getLikesForComment(String communityId, String commentId, Integer pageParam, Integer pageSize);
			public static ConnectApi.ChatterLikePage getLikesForFeedItem(String communityId, String feedItemId);
			public static ConnectApi.ChatterLikePage getLikesForFeedItem(String communityId, String feedItemId, Integer pageParam, Integer pageSize);
			public static ConnectApi.FeedModifiedInfo isModified(String communityId, ConnectApi.FeedType feedType, String subjectId, String since);
			public static ConnectApi.ChatterLike likeComment(String communityId, String commentId);
			public static ConnectApi.ChatterLike likeFeedItem(String communityId, String feedItemId);
			public static ConnectApi.Comment postComment(String communityId, String feedItemId, String text);
			public static ConnectApi.Comment postComment(String communityId, String feedItemId, ConnectApi.CommentInput comment, ConnectApi.BinaryInput feedItemFileUpload);
			public static ConnectApi.FeedElement postFeedElement(String communityId, String subjectId, ConnectApi.FeedElementType feedElementType, String text);
			public static ConnectApi.FeedElement postFeedElement(String communityId, ConnectApi.FeedElementInput feedElement, ConnectApi.BinaryInput feedElementFileUpload);
			public static ConnectApi.FeedItem postFeedItem(String communityId, ConnectApi.FeedType feedType, String subjectId, String text);
			public static ConnectApi.FeedItem postFeedItem(String communityId, ConnectApi.FeedType feedType, String subjectId, ConnectApi.FeedItemInput feedItemInput, ConnectApi.BinaryInput feedItemFileUpload);
			public static ConnectApi.FeedElementPage searchFeedElements(String communityId, String q);
			public static ConnectApi.FeedElementPage searchFeedElements(String communityId, String q, ConnectApi.FeedSortOrder sortParam);
			public static ConnectApi.FeedElementPage searchFeedElements(String communityId, String q, String pageParam, Integer pageSize);
			public static ConnectApi.FeedElementPage searchFeedElements(String communityId, String q, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam);
			public static ConnectApi.FeedElementPage searchFeedElements(String communityId, String q, Integer recentCommentCount, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam);
			public static ConnectApi.FeedElementPage searchFeedElementsInFeed(String communityId, ConnectApi.FeedType feedType, String q);
			public static ConnectApi.FeedElementPage searchFeedElementsInFeed(String communityId, ConnectApi.FeedType feedType, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q);
			public static ConnectApi.FeedElementPage searchFeedElementsInFeed(String communityId, ConnectApi.FeedType feedType, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q);
			public static ConnectApi.FeedElementPage searchFeedElementsInFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, String q);
			public static ConnectApi.FeedElementPage searchFeedElementsInFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q);
			public static ConnectApi.FeedElementPage searchFeedElementsInFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q);
			public static ConnectApi.FeedElementPage searchFeedElementsInFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q, Boolean showInternalOnly);
			public static ConnectApi.FeedElementPage searchFeedElementsInFilterFeed(String communityId, String subjectId, String keyPrefix, String q);
			public static ConnectApi.FeedElementPage searchFeedElementsInFilterFeed(String communityId, String subjectId, String keyPrefix, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q);
			public static ConnectApi.FeedElementPage searchFeedElementsInFilterFeed(String communityId, String subjectId, String keyPrefix, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q);
			public static ConnectApi.FeedItemPage searchFeedItems(String communityId, String q);
			public static ConnectApi.FeedItemPage searchFeedItems(String communityId, String q, ConnectApi.FeedSortOrder sortParam);
			public static ConnectApi.FeedItemPage searchFeedItems(String communityId, String q, String pageParam, Integer pageSize);
			public static ConnectApi.FeedItemPage searchFeedItems(String communityId, String q, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam);
			public static ConnectApi.FeedItemPage searchFeedItems(String communityId, String q, Integer recentCommentCount, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam);
			public static ConnectApi.FeedItemPage searchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, String q);
			public static ConnectApi.FeedItemPage searchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q);
			public static ConnectApi.FeedItemPage searchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q);
			public static ConnectApi.FeedItemPage searchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, String q);
			public static ConnectApi.FeedItemPage searchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q);
			public static ConnectApi.FeedItemPage searchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q);
			public static ConnectApi.FeedItemPage searchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q, Boolean showInternalOnly);
			public static ConnectApi.FeedItemPage searchFeedItemsInFilterFeed(String communityId, String subjectId, String keyPrefix, String q);
			public static ConnectApi.FeedItemPage searchFeedItemsInFilterFeed(String communityId, String subjectId, String keyPrefix, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q);
			public static ConnectApi.FeedItemPage searchFeedItemsInFilterFeed(String communityId, String subjectId, String keyPrefix, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q);
			public static Void setTestGetFeedElementsFromFeed(String communityId, ConnectApi.FeedType feedType, ConnectApi.FeedElementPage result);
			public static Void setTestGetFeedElementsFromFeed(String communityId, ConnectApi.FeedType feedType, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedElementPage result);
			public static Void setTestGetFeedElementsFromFeed(String communityId, ConnectApi.FeedType feedType, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedElementPage result);
			public static Void setTestGetFeedElementsFromFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, ConnectApi.FeedElementPage result);
			public static Void setTestGetFeedElementsFromFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedElementPage result);
			public static Void setTestGetFeedElementsFromFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedElementPage result);
			public static Void setTestGetFeedElementsFromFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, Boolean showInternalOnly, ConnectApi.FeedElementPage result);
			public static Void setTestGetFeedElementsFromFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, Integer recentCommentCount, Integer elementsPerClump, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, Boolean showInternalOnly, ConnectApi.FeedElementPage result);
			public static Void setTestGetFeedElementsFromFilterFeed(String communityId, String subjectId, String keyPrefix, ConnectApi.FeedElementPage result);
			public static Void setTestGetFeedElementsFromFilterFeed(String communityId, String subjectId, String keyPrefix, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedElementPage result);
			public static Void setTestGetFeedElementsFromFilterFeed(String communityId, String subjectId, String keyPrefix, Integer recentCommentCount, Integer elementsPerClump, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedElementPage result);
			public static Void setTestGetFeedElementsFromFilterFeedUpdatedSince(String communityId, String subjectId, String keyPrefix, Integer recentCommentCount, Integer elementsPerClump, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, String updatedSince, ConnectApi.FeedElementPage result);
			public static Void setTestGetFeedElementsUpdatedSince(String communityId, ConnectApi.FeedType feedType, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, String updatedSince, ConnectApi.FeedElementPage result);
			public static Void setTestGetFeedElementsUpdatedSince(String communityId, ConnectApi.FeedType feedType, String subjectId, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, String updatedSince, ConnectApi.FeedElementPage result);
			public static Void setTestGetFeedElementsUpdatedSince(String communityId, ConnectApi.FeedType feedType, String subjectId, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, String updatedSince, Boolean showInternalOnly, ConnectApi.FeedElementPage result);
			public static Void setTestGetFeedElementsUpdatedSince(String communityId, ConnectApi.FeedType feedType, String subjectId, Integer recentCommentCount, Integer elementsPerClump, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, String updatedSince, Boolean showInternalOnly, ConnectApi.FeedElementPage result);
			public static Void setTestGetFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType, ConnectApi.FeedItemPage result);
			public static Void setTestGetFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedItemPage result);
			public static Void setTestGetFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedItemPage result);
			public static Void setTestGetFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, ConnectApi.FeedItemPage result);
			public static Void setTestGetFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedItemPage result);
			public static Void setTestGetFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedItemPage result);
			public static Void setTestGetFeedItemsFromFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, Boolean showInternalOnly, ConnectApi.FeedItemPage result);
			public static Void setTestGetFeedItemsFromFilterFeed(String communityId, String subjectId, String keyPrefix, ConnectApi.FeedItemPage result);
			public static Void setTestGetFeedItemsFromFilterFeed(String communityId, String subjectId, String keyPrefix, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedItemPage result);
			public static Void setTestGetFeedItemsFromFilterFeed(String communityId, String subjectId, String keyPrefix, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedItemPage result);
			public static Void setTestGetFeedItemsFromFilterFeedUpdatedSince(String communityId, String subjectId, String keyPrefix, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String updatedSince, ConnectApi.FeedItemPage result);
			public static Void setTestGetFeedItemsUpdatedSince(String communityId, ConnectApi.FeedType feedType, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, String updatedSince);
			public static Void setTestGetFeedItemsUpdatedSince(String communityId, ConnectApi.FeedType feedType, String subjectId, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, String updatedSince, ConnectApi.FeedItemPage result);
			public static Void setTestGetFeedItemsUpdatedSince(String communityId, ConnectApi.FeedType feedType, String subjectId, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, String updatedSince, Boolean showInternalOnly, ConnectApi.FeedItemPage result);
			public static Void setTestSearchFeedElements(String communityId, String q, ConnectApi.FeedElementPage result);
			public static Void setTestSearchFeedElements(String communityId, String q, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedElementPage result);
			public static Void setTestSearchFeedElements(String communityId, String q, String pageParam, Integer pageSize, ConnectApi.FeedElementPage result);
			public static Void setTestSearchFeedElements(String communityId, String q, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedElementPage result);
			public static Void setTestSearchFeedElements(String communityId, String q, Integer recentCommentCount, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedElementPage result);
			public static Void setTestSearchFeedElementsInFeed(String communityId, ConnectApi.FeedType feedType, String q, ConnectApi.FeedElementPage result);
			public static Void setTestSearchFeedElementsInFeed(String communityId, ConnectApi.FeedType feedType, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q, ConnectApi.FeedElementPage result);
			public static Void setTestSearchFeedElementsInFeed(String communityId, ConnectApi.FeedType feedType, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q, ConnectApi.FeedElementPage result);
			public static Void setTestSearchFeedElementsInFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, String q, ConnectApi.FeedElementPage result);
			public static Void setTestSearchFeedElementsInFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q, ConnectApi.FeedElementPage result);
			public static Void setTestSearchFeedElementsInFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q, ConnectApi.FeedElementPage result);
			public static Void setTestSearchFeedElementsInFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q, Boolean showInternalOnly, ConnectApi.FeedElementPage result);
			public static Void setTestSearchFeedElementsInFilterFeed(String communityId, String subjectId, String keyPrefix, String q, ConnectApi.FeedElementPage result);
			public static Void setTestSearchFeedElementsInFilterFeed(String communityId, String subjectId, String keyPrefix, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q, ConnectApi.FeedElementPage result);
			public static Void setTestSearchFeedElementsInFilterFeed(String communityId, String subjectId, String keyPrefix, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q, ConnectApi.FeedElementPage result);
			public static Void searchFeedItems(String communityId, String q, ConnectApi.FeedItemPage result);
			public static Void setTestSearchFeedItems(String communityId, String q, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedItemPage result);
			public static Void setTestSearchFeedItems(String communityId, String q, String pageParam, Integer pageSize, ConnectApi.FeedItemPage result);
			public static Void setTestSearchFeedItems(String communityId, String q, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedItemPage result);
			public static Void setTestSearchFeedItems(String communityId, String q, Integer recentCommentCount, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, ConnectApi.FeedItemPage result);
			public static Void setTestSearchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, String q, ConnectApi.FeedItemPage result);
			public static Void setTestSearchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q, ConnectApi.FeedItemPage result);
			public static Void setTestSearchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q, ConnectApi.FeedItemPage result);
			public static Void setTestSearchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, String q, ConnectApi.FeedItemPage result);
			public static Void setTestSearchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q, ConnectApi.FeedItemPage result);
			public static Void setTestSearchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q, ConnectApi.FeedItemPage result);
			public static Void setTestSearchFeedItemsInFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q, ConnectApi.FeedItemPage result);
			public static Void setTestSearchFeedItemsInFilterFeed(String communityId, String subjectId, String keyPrefix, String q, ConnectApi.FeedItemPage result);
			public static Void setTestSearchFeedItemsInFilterFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, String keyPrefix, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q, ConnectApi.FeedItemPage result);
			public static Void setTestSearchFeedItemsInFilterFeed(String communityId, ConnectApi.FeedType feedType, String subjectId, String keyPrefix, Integer recentCommentCount, ConnectApi.FeedDensity density, String pageParam, Integer pageSize, ConnectApi.FeedSortOrder sortParam, String q, ConnectApi.FeedItemPage result);
			public static ConnectApi.FeedElement shareFeedElement(String communityId, String subjectId, ConnectApi.FeedElementType feedElementType, String originalFeedElementId);
			public static ConnectApi.FeedItem shareFeedItem(String communityId, ConnectApi.FeedType feedType, String subjectId, String originalFeedItemId);
			public static ConnectApi.FeedItem updateBookmark(String communityId, String feedItemId, Boolean isBookmarkedByCurrentUser);
			public static ConnectApi.FeedPoll voteOnFeedPoll(String communityId, String feedItemId, String myChoiceId);
		}

		public class ChatterGroups {
			public static ConnectApi.GroupMember addMember(String communityId, String groupId, String userId);
			public static ConnectApi.GroupMember addMemberWithRole(String communityId, String groupId, String userId, ConnectApi.GroupMembershipType role);
			public static ConnectApi.ChatterGroupDetail createGroup(String communityId, ConnectApi.ChatterGroupInput groupInput);
			public static Void deleteMember(String communityId, String membershipId);
			public static Void deletePhoto(String communityId, String groupId);
			public static ConnectApi.AnnouncementPage getAnnouncements(String communityId, String groupId);
			public static ConnectApi.AnnouncementPage getAnnouncements(String communityId, String groupId, Integer pageParam, Integer pageSize);
			public static ConnectApi.ChatterGroupDetail getGroup(String communityId, String groupId);
			public static ConnectApi.BatchResult[] getGroupBatch(String communityId, List<String> groupIds);
			public static ConnectApi.GroupMembershipRequest getGroupMembershipRequest(String communityId, String requestId);
			public static ConnectApi.GroupMembershipRequests getGroupMembershipRequests(String communityId, String groupId);
			public static ConnectApi.GroupMembershipRequests getGroupMembershipRequests(String communityId, String groupId, ConnectApi.GroupMembershipRequestStatus status);
			public static ConnectApi.ChatterGroupPage getGroups(String communityId);
			public static ConnectApi.ChatterGroupPage getGroups(String communityId, Integer pageParam, Integer pageSize);
			public static ConnectApi.ChatterGroupPage getGroups(String communityId, Integer pageParam, Integer pageSize, ConnectApi.GroupArchiveStatus archiveStatus);
			public static ConnectApi.GroupMember getMember(String communityId, String membershipId);
			public static ConnectApi.GroupMemberPage getMembers(String communityId, String groupId);
			public static ConnectApi.GroupMemberPage getMembers(String communityId, String groupId, Integer pageParam, Integer pageSize);
			public static ConnectApi.BatchResult[] getMembershipBatch(String communityId, List<String> membershipIds);
			public static ConnectApi.GroupChatterSettings getMyChatterSettings(String communityId, String groupId);
			public static ConnectApi.Photo getPhoto(String communityId, String groupId);
			public static ConnectApi.Announcement postAnnouncement(String communityId, String groupId, ConnectApi.AnnouncementInput announcement);
			public static ConnectApi.GroupMembershipRequest requestGroupMembership(String communityId, String groupId);
			public static ConnectApi.ChatterGroupPage searchGroups(String communityId, String q);
			public static ConnectApi.ChatterGroupPage searchGroups(String communityId, String q, Integer pageParam, Integer pageSize);
			public static ConnectApi.ChatterGroupPage searchGroups(String communityId, String q, ConnectApi.GroupArchiveStatus archiveStatus, Integer pageParam, Integer pageSize);
			public static ConnectApi.Photo setPhoto(String communityId, String groupId, String fileId, Integer versionNumber);
			public static ConnectApi.Photo setPhoto(String communityId, String groupId, ConnectApi.BinaryInput fileUpload);
			public static ConnectApi.Photo setPhotoWithAttributes(String communityId, String groupId, ConnectApi.PhotoInput photo);
			public static ConnectApi.Photo setPhotoWithAttributes(String communityId, String groupId, ConnectApi.PhotoInput photo, ConnectApi.BinaryInput fileUpload);
			public static Void setTestSearchGroups(String communityId, String q, ConnectApi.ChatterGroupPage result);
			public static Void setTestSearchGroups(String communityId, String q, Integer pageParam, Integer pageSize, ConnectApi.ChatterGroupPage result);
			public static Void setTestSearchGroups(String communityId, String q, ConnectApi.GroupArchiveStatus archiveStatus, Integer pageParam, Integer pageSize, ConnectApi.ChatterGroupPage result);
			public static ConnectApi.ChatterGroup updateGroup(String communityId, String groupId, ConnectApi.ChatterGroupInput groupInput);
			public static ConnectApi.ChatterGroup updateGroupMember(String communityId, String membershipId, ConnectApi.GroupMembershipType role);
			public static ConnectApi.GroupChatterSettings updateMyChatterSettings(String communityId, String groupId, ConnectApi.GroupEmailFrequency emailFrequency);
			public static ConnectApi.GroupMembershipRequest updateRequestStatus(String communityId, String requestId, ConnectApi.GroupMembershipRequestStatus status);
		}

		public class ChatterMessages {
			public static ConnectApi.ChatterConversation getConversation(String conversationId);
			public static ConnectApi.ChatterConversation getConversation(String conversationId, String pageParam, Integer pageSize);
			public static ConnectApi.ChatterConversation getConversation(String communityId, String conversationId);
			public static ConnectApi.ChatterConversation getConversation(String communityId, String conversationId, String pageParam, String pageSize);
			public static ConnectApi.ChatterConversationPage getConversations();
			public static ConnectApi.ChatterConversationPage getConversations(String pageParam, Integer pageSize);
			public static ConnectApi.ChatterConversationPage getConversations(String communityId);
			public static ConnectApi.ChatterConversationPage getConversations(String communityId, String pageParam, Integer pageSize);
			public static ConnectApi.ChatterMessage getMessage(String messageId);
			public static ConnectApi.ChatterMessage getMessage(String communityId, String messageId);
			public static ConnectApi.ChatterMessagePage getMessages();
			public static ConnectApi.ChatterMessagePage getMessages(String pageParam, Integer pageSize);
			public static ConnectApi.ChatterMessagePage getMessages(String communityId);
			public static ConnectApi.ChatterMessagePage getMessages(String communityId, String pageParam, Integer pageSize);
			public static ConnectApi.UnreadConversationCount getUnreadCount();
			public static ConnectApi.UnreadConversationCount getUnreadCount(String communityId);
			public static ConnectApi.ChatterConversationSummary markConversationRead(String conversationId, Boolean read);
			public static ConnectApi.ChatterConversationSummary markConversationRead(String communityId, String conversationID, Boolean read);
			public static ConnectApi.ChatterMessage replyToMessage(String text, String inReplyTo);
			public static ConnectApi.ChatterMessage replyToMessage(String communityId, String text, String inReplyTo);
			public static ConnectApi.ChatterConversation searchConversation(String conversationId, String q);
			public static ConnectApi.ChatterConversation searchConversation(String conversationId, String pageParam, Integer pageSize, String q);
			public static ConnectApi.ChatterConversation searchConversation(String communityId, String conversationId, String q);
			public static ConnectApi.ChatterConversation searchConversation(String communityId, String conversationId, String pageParam, Integer pageSize, String q);
			public static ConnectApi.ChatterConversationPage searchConversations(String q);
			public static ConnectApi.ChatterConversationPage searchConversations(String pageParam, Integer pageSize, String q);
			public static ConnectApi.ChatterConversationPage searchConversations(String communityId, String q);
			public static ConnectApi.ChatterConversationPage searchConversations(String communityId, String pageParam, Integer pageSize, String q);
			public static ConnectApi.ChatterMessagePage searchMessages(String q);
			public static ConnectApi.ChatterMessagePage searchMessages(String pageParam, Integer pageSize, String q);
			public static ConnectApi.ChatterMessagePage searchMessages(String communityId, String q);
			public static ConnectApi.ChatterMessagePage searchMessages(String communityId, String pageParam, Integer pageSize, String q);
			public static ConnectApi.ChatterMessage sendMessage(String text, String recipients);
			public static ConnectApi.ChatterMessage sendMessage(String communityId, String text, String recipients);
		}

		public class ChatterUsers {
			public static Void deletePhoto(String communityId, String userId);
			public static ConnectApi.Subscription follow(String communityId, String userId, String subjectId);
			public static ConnectApi.UserChatterSettings getChatterSettings(String communityId, String userId);
			public static ConnectApi.FollowerPage getFollowers(String communityId, String userId);
			public static ConnectApi.FollowerPage getFollowers(String communityId, String userId, Integer pageParam, Integer pageSize);
			public static ConnectApi.FollowingPage getFollowings(String communityId, String userId);
			public static ConnectApi.FollowingPage getFollowings(String communityId, String userId, Integer pageParam);
			public static ConnectApi.FollowingPage getFollowings(String communityId, String userId, Integer pageParam, Integer pageSize);
			public static ConnectApi.FollowingPage getFollowings(String communityId, String userId, String filterType);
			public static ConnectApi.FollowingPage getFollowings(String communityId, String userId, String filterType, Integer pageParam);
			public static ConnectApi.FollowingPage getFollowings(String communityId, String userId, String filterType, Integer pageParam, Integer pageSize);
			public static ConnectApi.UserGroupPage getGroups(String communityId, String userId);
			public static ConnectApi.UserGroupPage getGroups(String communityId, String userId, Integer pageParam, Integer pageSize);
			public static ConnectApi.Photo getPhoto(String communityId, String userId);
			public static ConnectApi.UserSummary getUser(String communityId, String userId);
			public static ConnectApi.BatchResult[] getUserBatch(String communityId, List<String> userIds);
			public static ConnectApi.UserPage getUsers(String communityId);
			public static ConnectApi.UserPage getUsers(String communityId, Integer pageParam, Integer pageSize);
			public static ConnectApi.UserGroupPage searchUserGroups(String communityId, String userId, String q);
			public static ConnectApi.UserGroupPage searchUserGroups(String communityId, String userId, String q, Integer pageParam, Integer pageSize);
			public static ConnectApi.UserPage searchUsers(String communityId, String q);
			public static ConnectApi.UserPage searchUsers(String communityId, String q, Integer pageParam, Integer pageSize);
			public static ConnectApi.UserPage searchUsers(String communityId, String q, String searchContextId, Integer pageParam, Integer pageSize);
			public static ConnectApi.Photo setPhoto(String communityId, String userId, String fileId, Integer versionNumber);
			public static ConnectApi.Photo setPhoto(String communityId, String userId, ConnectApi.BinaryInput fileUpload);
			public static ConnectApi.Photo setPhotoWithAttributes(String communityId, String userId, ConnectApi.Photo photo);
			public static ConnectApi.Photo setPhotoWithAttributes(String communityId, String userId, ConnectApi.Photo photo, ConnectApi.BinaryInput fileUpload);
			public static Void setTestSearchUsers(String communityId, String q, ConnectApi.UserPage result);
			public static Void setTestSearchUsers(String communityId, String q, Integer pageParam, Integer pageSize, ConnectApi.UserPage result);
			public static Void setTestSearchUsers(String communityId, String q, String searchContextId, Integer pageParam, Integer pageSize, ConnectApi.UserPage result);
			public static ConnectApi.UserChatterSettings updateChatterSettings(String communityId, String userId, ConnectApi.GroupEmailFrequency defaultGroupEmailFrequency);
			public static ConnectApi.UserDetail updateUser(String communityId, String userId, ConnectApi.UserInput userInput);
		}

		public class Communities {
			public static ConnectApi.CommunityPage getCommunities();
			public static ConnectApi.CommunityPage getCommunities(ConnectApi.CommunityStatus communityStatus);
			public static ConnectApi.Community getCommunity(String communityId);
		}

		public class CommunityModeration {
			public static ConnectApi.ModerationFlags addFlagToComment(String communityId, String commentId);
			public static ConnectApi.ModerationFlags addFlagToComment(String communityId, String commentId, ConnectApi.CommunityFlagVisibility visibility);
			public static ConnectApi.ModerationCapability addFlagToFeedElement(String communityId, String feedElementId);
			public static ConnectApi.ModerationCapability addFlagToFeedElement(String communityId, String feedElementId, ConnectApi.CommunityFlagVisibility visibility);
			public static ConnectApi.ModerationFlags addFlagToFeedItem(String communityId, String feedItemId);
			public static ConnectApi.ModerationFlags addFlagToFeedItem(String communityId, String feedItemId, ConnectApi.CommunityFlagVisibility visibility);
			public static ConnectApi.ModerationFlags getFlagsOnComment(String communityId, String commentId);
			public static ConnectApi.ModerationFlags getFlagsOnComment(String communityId, String commentId, ConnectApi.CommunityFlagVisibility visibility);
			public static ConnectApi.ModerationCapability getFlagsOnFeedElement(String communityId, String feedElementId);
			public static ConnectApi.ModerationCapability getFlagsOnFeedElement(String communityId, String feedElementId, ConnectApi.CommunityFlagVisibility visibility);
			public static ConnectApi.ModerationFlags getFlagsOnFeedItem(String communityId, String feedItemId);
			public static ConnectApi.ModerationFlags getFlagsOnFeedItem(String communityId, String feedItemId, ConnectApi.CommunityFlagVisibility visibility);
			public static ConnectApi.ModerationFlags removeFlagsOnComment(String communityId, String commentId, String userId);
			public static void removeFlagFromFeedElement(String communityId, String feedElementId, String userId);
			public static ConnectApi.ModerationFlags removeFlagsOnFeedItem(String communityId, String feedItemId, String userId);
		}

		public class Organization {
			public static ConnectApi. OrganizationSettings getSettings();
		}

		public class Mentions {
			public static ConnectApi.MentionCompletionPage getMentionCompletions (String communityId, String q, String contextId);
			public static ConnectApi.Mentions getMentionCompletions (String communityId, String q, String contextId, ConnectApi.MentionCompletionType type, Integer pageParam, Integer pageSize);
			public static ConnectApi.Mentions getMentionValidations(String communityId, String parentId, List<String> recordIds, ConnectApi.FeedItemVisibilityType visibility);
			public static Void setTestGetMentionCompletions (String communityId, String q, String contextId, ConnectApi.MentionCompletionPage result);
			public static Void setTestGetMentionCompletions (String communityId, String q, String contextId, ConnectApi.MentionCompletionType type, Integer pageParam, Integer pageSize, ConnectApi.MentionCompletionPage result);
		}

		public class RecordDetails {
			public static ConnectApi.RecordSummaryList getRecentRecords(String communityId, String userId);
			public static ConnectApi.RecordSummaryList getRecentRecords(String communityId, String userId, Integer size);
			public static ConnectApi.RecordView getRecordView(String communityId, String recordId);
		}

		public class Records {
			public static ConnectApi.Motif getMotif(String communityId, String idOrPrefix);
			public static ConnectApi.BatchResult[] getMotifBatch(String communityId, List<String> idOrPrefixList);
		}

		public class Topics {
			public static ConnectApi.Topic assignTopic(String communityId, String recordId, String topicId);
			public static ConnectApi.Topic assignTopicByName(String communityId, String recordId, String topicName);
			public static Void deleteTopic(String communityId, String topicId);
			public static ConnectApi.ChatterGroupSummaryPage getGroupsRecentlyTalkingAboutTopic(String communityId, String topicId);
			public static ConnectApi.TopicPage getRecentlyTalkingAboutTopicsForGroup(String communityId, String groupId);
			public static ConnectApi.TopicPage getRecentlyTalkingAboutTopicsForUser(String communityId, String userId);
			public static ConnectApi.TopicPage getRelatedTopics(String communityId, String topicId);
			public static ConnectApi.Topic getTopic(String communityId, String topicId);
			public static ConnectApi.TopicPage getTopics(String communityId, String recordId);
			public static ConnectApi.TopicPage getTopics(String communityId);
			public static ConnectApi.TopicPage getTopics(String communityId, ConnectApi.TopicSort sortParam);
			public static ConnectApi.TopicPage getTopics(String communityId, Integer pageParam, Integer pageSize);
			public static ConnectApi.TopicPage getTopics(String communityId, Integer pageParam, Integer pageSize, ConnectApi.TopicSort sortParam);
			public static ConnectApi.TopicPage getTopics(String communityId, String q, ConnectApi.TopicSort sortParam);
			public static ConnectApi.TopicPage getTopics(String communityId, String q, Integer pageParam, Integer pageSize);
			public static ConnectApi.TopicPage getTopics(String communityId, String q, Integer pageParam, Integer pageSize, ConnectApi.TopicSort sortParam);
			public static ConnectApi.TopicSuggestionPage getTopicSuggestions(String communityId, String recordId, Integer maxResults);
			public static ConnectApi.TopicSuggestionPage getTopicSuggestions(String communityId, String recordId);
			public static ConnectApi.TopicSuggestionPage getTopicSuggestionsForText(String communityId, String text, Integer maxResults);
			public static ConnectApi.TopicSuggestionPage getTopicSuggestionsForText(String communityId, String text);
			public static ConnectApi.TopicPage getTrendingTopics(String communityId);
			public static ConnectApi.TopicPage getTrendingTopics(String communityId, Integer maxResults);
			public static Void setTestGetGroupsRecentlyTalkingAboutTopic(String communityId, String topicId, ConnectApi.ChatterGroupSummaryPage result);
			public static Void setTestGetRecentlyTalkingAboutTopicsForGroup(String communityId, String groupId, ConnectApi.TopicPage result);
			public static Void setTestGetRecentlyTalkingAboutTopicsForUser(String communityId, String userId, ConnectApi.TopicPage result);
			public static Void setTestGetRelatedTopics(String communityId, String topicId, ConnectApi.TopicPage result);
			public static Void setTestGetTopicSuggestions(String communityId, String recordId, Integer maxResults, ConnectApi.TopicSuggestionPage result);
			public static Void setTestGetTopicSuggestions(String communityId, String recordId, ConnectApi.TopicSuggestionPage result);
			public static Void setTestGetTopicSuggestionsForText(String communityId, String text, Integer maxResults, ConnectApi.TopicSuggestionPage result);
			public static Void setTestGetTopicSuggestionsForText(String communityId, String text, ConnectApi.TopicSuggestionPage result);
			public static Void setTestGetTrendingTopics(String communityId, ConnectApi.TopicPage result);
			public static Void setTestGetTrendingTopics(String communityId, Integer maxResults, ConnectApi.TopicPage result);
			public static Void unassignTopic(String communityId, String recordId, String topicId);
			public static ConnectApi.Topic updateTopic(String communityId, String topicId, ConnectApi.TopicInput topic);
		}

		public class UserProfiles {
			public static ConnectApi.UserProfile getUserProfile(String communityId, String userId);
		}

		public class Zones {
			public static ConnectApi.Zone getZone(String communityId, String zoneId);
			public static ConnectApi.ZonePage getZones(String communityId);
			public static ConnectApi.Zone getZones(String communityId, Integer pageParam, Integer pageSize);
			public static ConnectApi.ZoneSearchPage searchInZone(String communityId, String zoneId, String q, ConnectApi.ZoneSearchResultType filter);
			public static ConnectApi.ZoneSearchPage searchInZone(String communityId, String zoneId, String q, ConnectApi.ZoneSearchResultType filter, String pageParam, Integer pageSize);
			public static Void setTestSearchInZone(String communityId, String zoneId, String q, ConnectApi.ZoneSearchResultType filter, ConnectApi.ZoneSearchPage result);
			public static Void setTestSearchInZone(String communityId, String zoneId, String q, ConnectApi.ZoneSearchResultType filter, String pageParam, Integer pageSize, ConnectApi.ZoneSearchPage result);
		}

		public class AnnouncementInput {
			public ConnectApi.MessageSegmentInput body { get; set; }
			public Date expirationDate { get; set; }
		}

		public class BinaryInput {
			public BinaryInput(Blob blob, String contentType, string filename);
			public Blob blob { get; set; }
			public String contentType { get; set; }
			public String filename { get; set; }
		}

		public class CanvasAttachmentInput extends ConnectApi.FeedItemAttachmentInput {
			public String description { get; set; }
			public String developerName { get; set; }
			public string height { get; set; }
			public String namespacePrefix { get; set; }
			public String parameters { get; set; }
			public String thumbnailUrl { get; set; }
			public String title { get; set; }
		}

		public class ChatterGroupInput {
			public string announcement { get; set; }
			public boolean canHaveChatterGuests { get; set; }
			public string descriptions { get; set; }
			public ConnectApi.GroupInformationInput information { get; set; }
			public boolean isArchived { get; set; }
			public boolean isAutoArchiveDisabled { get; set; }
			public string name { get; set; }
			public string owner { get; set; }
			public ConnectApi.GroupVisibilityType visibility { get; set; }
		}

		public class CommentInput {
			public ConnectApi.FeedItemAttachmentInput attachment { get; set; }
			public ConnectApi.MessageBodyInput body { get; set; }
		}

		public class ContentAttachmentInput extends ConnectApi.FeedItemAttachmentInput {
			public string contentDocumentId { get; set; }
		}

		public class FeedElementInput extends ConnectApi.FeedItemInput {
			public ConnectApi.FeedElementType feedElementType { get; set; }
			public string subjectId { get; set; }
		}

		public abstract class FeedItemAttachmentInput {
		}

		public class FeedItemInput extends ConnectApi.FeedElementInput {
			public ConnectApi.FeedItemAttachmentInput attachment { get; set; }
			public ConnectApi.MessageBodyInput body { get; set; }
			public boolean isBookmarkedByCurrentUser { get; set; }
			public string originalFeedElementId { get; set; }
			public string originalFeedItemId { get; set; }
			public ConnectApi.FeedItemVisibilityType visibility { get; set; }
		}

		public class GroupInformationInput {
			public string text { get; set; }
			public string title { get; set; }
		}

		public class HashtagSegmentInput extends ConnectApi.MessageSegmentInput {
			public string tag { get; set; }
		}

		public class LinkAttachmentInput extends ConnectApi.FeedItemAttachmentInput {
			public string url { get; set; }
			public string urlName { get; set; }
		}

		public class LinkSegmentInput extends ConnectApi.MessageSegmentInput {
			public string url { get; set; }
		}

		public class MentionSegmentInput extends ConnectApi.MessageSegmentInput {
			public string id { get; set; }
		}

		public class MessageBodyInput {
			public List<ConnectApi.MessageSegmentInput> messageSegments { get; set; }
		}

		public abstract class MessageSegmentInput {
		}

		public class NewFileAttachmentInput extends ConnectApi.FeedItemAttachmentInput {
			public string description { get; set; }
			public string title { get; set; }
		}

		public class PhotoInput {
			public integer cropSize { get; set; }
			public integer cropX { get; set; }
			public integer cropY { get; set; }
			public string fileId { get; set; }
			public integer versionNumber { get; set; }
		}

		public class PollAttachmentInput extends ConnectApi.FeedItemAttachmentInput {
			public List<string> pollChoices { get; set; }
		}

		public class TextSegmentInput extends ConnectApi.MessageSegmentInput {
			public string text { get; set; }
		}

		public class TopicInput {
			public string description { get; set; }
			public string name { get; set; }
		}

		public class UserInput {
			public string aboutMe { get; set; }
		}

		public class AbstractBundleCapability extends ConnectApi.FeedElementCapability {
			public ConnectApi.BundleType bundleType { get; set; }
			public ConnectApi.FeedElementPage feedElements { get; set; }
			public integer totalElements { get; set; }
		}

		public class AbstractMessageBody {
			public List<ConnectApi.MessageSegment> messageSegments { get; set; }
			public string text { get; set; }
		}

		public class AbstractRecordField {
			public string type { get; set; }
		}

		public class AbstractRecordView {
			public string name { get; set; }
		}

		public class Actor {
			public string name { get; set; }
			public string type { get; set; }
		}

		public class ActorWithId extends ConnectApi.Actor {
			public string id { get; set; }
			public ConnectApi.Motif motif { get; set; }
			public ConnectApi.Reference mySubscription { get; set; }
			public string recordViewUrl { get; set; }
			public string url { get; set; }
		}

		public class Address {
			public string city { get; set; }
			public string country { get; set; }
			public string formattedAddress { get; set; }
			public string state { get; set; }
			public string street { get; set; }
			public string zip { get; set; }
		}

		public class Announcement {
			public Date expirationDate { get; set; }
			public ConnectApi.FeedElement feedElement { get; set; }
			public string id { get; set; }
		}

		public class AnnouncementPage {
			public List<ConnectApi.Announcement> announcements { get; set; }
			public string currentPageUrl { get; set; }
			public string nextPageUrl { get; set; }
			public string previousPageUrl { get; set; }
		}

		public class ApprovalAttachment extends ConnectApi.FeedItemAttachment {
			public string id { get; set; }
			public List<ConnectApi.ApprovalPostTemplateField> postTemplateFields { get; set; }
			public string processInstanceStepId { get; set; }
			public ConnectApi.WorkflowProcessStatus status { get; set; }
		}

		public class ApprovalPostTemplateField {
			public string displayName { get; set; }
			public string displayValue { get; set; }
			public ConnectApi.Reference record { get; set; }
		}

		public class BannerCapability extends ConnectApi.FeedElementCapability {
			public ConnectApi.Motif motif { get; set; }
			public ConnectApi.BannerStyle style { get; set; }
		}

		public class BasicTemplateAttachment extends ConnectApi.FeedItemAttachment {
			public string description { get; set; }
			public ConnectApi.Icon icon { get; set; }
			public string linkRecordId { get; set; }
			public string linkUrl { get; set; }
			public string title { get; set; }
		}

		public class BatchResult {
			public ConnectApi.ConnectApiException getError();
			public String getErrorMessage();
			public String getErrorTypeName();
			public Object getResult();
			public Boolean isSuccess();
		}

		public class BlankRecordField extends ConnectApi.AbstractRecordField {
		}

		public class BookmarksCapability extends ConnectApi.FeedElementCapability {
		}

		public class Bundle extends ConnectApi.FeedElement {
			public ConnectApi.BundleType bundleType { get; set; }
		}

		public class CanvasTemplateAttachment extends ConnectApi.FeedItemAttachment {
			public string description { get; set; }
			public string developerName { get; set; }
			public string height { get; set; }
			public ConnectApi.Icon icon { get; set; }
			public string namespacePrefix { get; set; }
			public string parameters { get; set; }
			public string thumbnailUrl { get; set; }
			public string title { get; set; }
		}

		public class CaseComment extends ConnectApi.FeedItemAttachment {
			public ConnectApi.CaseActorType actorType { get; set; }
			public ConnectApi.UserSummary createdBy { get; set; }
			public Datetime createdDate { get; set; }
			public string id { get; set; }
			public boolean published { get; set; }
			public string text { get; set; }
		}

		public class ChatterActivity {
			public integer commentCount { get; set; }
			public integer commentReceivedCount { get; set; }
			public integer likeReceivedCount { get; set; }
			public integer postCount { get; set; }
		}

		public class ChatterConversation {
			public string conversationId { get; set; }
			public string conversationUrl { get; set; }
			public List<ConnectApi.UserSummary> members { get; set; }
			public ConnectApi.ChatterMessagePage messages { get; set; }
			public boolean read { get; set; }
		}

		public class ChatterConversationPage {
			public List<ConnectApi.ChatterConversationSummary> conversations { get; set; }
			public string currentPageToken { get; set; }
			public string currentPageUrl { get; set; }
			public string nextPageToken { get; set; }
			public string nextPageUrl { get; set; }
		}

		public class ChatterConversationSummary {
			public string id { get; set; }
			public ConnectApi.ChatterMessage latestMessage { get; set; }
			public List<ConnectApi.UserSummary> members { get; set; }
			public boolean read { get; set; }
			public string url { get; set; }
		}

		public class ChatterGroup extends ConnectApi.ActorWithId {
			public string additionalLabel { get; set; }
			public ConnectApi.Announcement announcement { get; set; }
			public boolean canHaveChatterGuests { get; set; }
			public ConnectApi.Reference community { get; set; }
			public string description { get; set; }
			public string emailToChatterAddress { get; set; }
			public boolean isArchived { get; set; }
			public boolean isAutoArchiveDisabled { get; set; }
			public Datetime lastFeedElementPostDate { get; set; }
			public Datetime lastFeedItemPostDate { get; set; }
			public integer memberCount { get; set; }
			public ConnectApi.GroupMembershipType myRole { get; set; }
			public ConnectApi.Reference mySubscription { get; set; }
			public string name { get; set; }
			public ConnectApi.UserSummary owner { get; set; }
			public ConnectApi.Photo photo { get; set; }
			public ConnectApi.GroupVisibilityType visibility { get; set; }
		}

		public class ChatterGroupDetail extends ConnectApi.ChatterGroup {
			public integer fileCount { get; set; }
			public ConnectApi.GroupInformation information { get; set; }
			public integer pendingRequests { get; set; }
		}

		public class ChatterGroupPage {
			public string currentPageUrl { get; set; }
			public List<ConnectApi.ChatterGroupDetail> groups { get; set; }
			public string nextPageUrl { get; set; }
			public string previousPageUrl { get; set; }
		}

		public class ChatterGroupSummary extends ConnectApi.ChatterGroup {
		}

		public class ChatterGroupSummaryPage {
			public string currentPageUrl { get; set; }
			public List<ConnectApi.ChatterGroupSummary> groups { get; set; }
			public string nextPageUrl { get; set; }
			public string previousPageUrl { get; set; }
		}

		public class ChatterLike {
			public string id { get; set; }
			public ConnectApi.Reference likedItem { get; set; }
			public string url { get; set; }
			public ConnectApi.UserSummary user { get; set; }
		}

		public class ChatterLikePage {
			public integer currentPageToken { get; set; }
			public string currentPageUrl { get; set; }
			public List<ConnectApi.ChatterLike> likes { get; set; }
			public integer nextPageToken { get; set; }
			public string nextPageUrl { get; set; }
			public integer previousPageToken { get; set; }
			public string previousPageUrl { get; set; }
			public integer total { get; set; }
		}

		public class ChatterLikesCapability extends ConnectApi.FeedElementCapability {
		}

		public class ChatterMessage {
			public ConnectApi.MessageBody body { get; set; }
			public string conversationId { get; set; }
			public string conversationUrl { get; set; }
			public string id { get; set; }
			public List<ConnectApi.UserSummary> recipients { get; set; }
			public ConnectApi.UserSummary sender { get; set; }
			public Date sentDate { get; set; }
			public string url { get; set; }
		}

		public class ChatterMessagePage {
			public string currentPageToken { get; set; }
			public string currentPageUrl { get; set; }
			public List<ConnectApi.ChatterMessage> messages { get; set; }
			public string nextPageToken { get; set; }
			public string nextPageUrl { get; set; }
		}

		public class ClientInfo {
			public string applicationName { get; set; }
			public string applicationUrl { get; set; }
		}

		public class Comment {
			public ConnectApi.FeedItemAttachment attachment { get; set; }
			public ConnectApi.FeedBody body { get; set; }
			public ConnectApi.ClientInfo clientInfo { get; set; }
			public Datetime createdDate { get; set; }
			public ConnectApi.Reference feedItem { get; set; }
			public string id { get; set; }
			public boolean isDeleteRestricted { get; set; }
			public ConnectApi.ChatterLikePage likes { get; set; }
			public ConnectApi.MessageBody likesMessage { get; set; }
			public ConnectApi.ModerationFlags moderationFlags { get; set; }
			public ConnectApi.Reference myLike { get; set; }
			public ConnectApi.Reference parent { get; set; }
			public string relativeCreatedDate { get; set; }
			public ConnectApi.CommentType type { get; set; }
			public string url { get; set; }
			public ConnectApi.UserSummary user { get; set; }
		}

		public class CommentPage {
			public List<ConnectApi.Comment> comments { get; set; }
			public string currentPageToken { get; set; }
			public string currentPageUrl { get; set; }
			public string nextPageToken { get; set; }
			public string nextPageUrl { get; set; }
			public integer total { get; set; }
		}

		public class CommentsCapability extends ConnectApi.FeedElementCapability {
		}

		public class Community {
			public boolean allowChatterAccessWithoutLogin { get; set; }
			public boolean allowMembersToFlag { get; set; }
			public string description { get; set; }
			public string id { get; set; }
			public boolean invitationsEnabled { get; set; }
			public boolean knowledgeableEnabled { get; set; }
			public string name { get; set; }
			public boolean privateMessagesEnabled { get; set; }
			public boolean reputationEnabled { get; set; }
			public boolean sendWelcomeEmail { get; set; }
			public string siteUrl { get; set; }
			public ConnectApi.CommunityStatus status { get; set; }
			public string url { get; set; }
			public string urlPathPrefix { get; set; }
		}

		public class CommunityPage {
			public List<ConnectApi.Community> communities { get; set; }
			public integer total { get; set; }
		}

		public class ComplexSegment extends ConnectApi.MessageSegment {
			public List<ConnectApi.MessageSegment> segments { get; set; }
		}

		public class CompoundRecordField extends ConnectApi.LabeledRecordField {
			public List<ConnectApi.AbstractRecordField> fields { get; set; }
		}

		public class ContentAttachment extends ConnectApi.FeedItemAttachment {
			public string checkSum { get; set; }
			public string contentUrl { get; set; }
			public string description { get; set; }
			public string downloadUrl { get; set; }
			public string fileExtension { get; set; }
			public string fileSize { get; set; }
			public string fileType { get; set; }
			public boolean hasImagePreview { get; set; }
			public boolean hasPdfPreview { get; set; }
			public string id { get; set; }
			public boolean isInMyFileSync { get; set; }
			public string mimeType { get; set; }
			public string renditionUrl { get; set; }
			public string renditionUrl240By180 { get; set; }
			public string renditionUrl720By480 { get; set; }
			public string textPreview { get; set; }
			public string thumb120By90RenditionStatus { get; set; }
			public string thumb240By180RenditionStatus { get; set; }
			public string thumb720By480RenditionStatus { get; set; }
			public string title { get; set; }
			public string versionId { get; set; }
		}

		public class CurrencyRecordField extends ConnectApi.LabeledRecordField {
		}

		public class DashboardComponentAttachment extends ConnectApi.FeedItemAttachment {
			public string componentId { get; set; }
			public string componentName { get; set; }
			public string dashboardBodyText { get; set; }
			public string dashboardId { get; set; }
			public string dashboardName { get; set; }
			public string fullSizeImageUrl { get; set; }
			public Datetime lastRefreshDate { get; set; }
			public string lastRefreshDateDisplayText { get; set; }
			public ConnectApi.UserSummary runningUser { get; set; }
			public string thumbnailUrl { get; set; }
		}

		public class DateRecordField extends ConnectApi.LabeledRecordField {
			public Date dateValue { get; set; }
		}

		public class EmailAddress {
			public string displayName { get; set; }
			public string emailAddress { get; set; }
		}

		public class EmailMessage extends FeedItemAttachment {
			public ConnectApi.EmailMessageDirection direction { get; set; }
			public string emailMessageId { get; set; }
			public string subject { get; set; }
			public string textBody { get; set; }
			public List<ConnectApi.EmailAddress> toAddresses { get; set; }
		}

		public class EntityLinkSegment extends ConnectApi.MessageSegment {
			public ConnectApi.Motif motif { get; set; }
			public ConnectApi.Reference reference { get; set; }
		}

		public class Feature {
			public boolean chatter { get; set; }
			public boolean chatterActivity { get; set; }
			public boolean chatterAnswers { get; set; }
			public boolean chatterGlobalInfluence { get; set; }
			public boolean chatterGroupRecords { get; set; }
			public boolean chatterGroupRecordSharing { get; set; }
			public boolean chatterMessages { get; set; }
			public boolean chatterTopics { get; set; }
			public boolean communitiesEnabled { get; set; }
			public boolean communityModeration { get; set; }
			public boolean connectRecords { get; set; }
			public boolean dashboardComponentSnapshots { get; set; }
			public string defaultCurrencyIsoCode { get; set; }
			public boolean feedPolling { get; set; }
			public boolean files { get; set; }
			public boolean filesOnComments { get; set; }
			public boolean groupsCanFollow { get; set; }
			public boolean ideas { get; set; }
			public boolean mobileNotificationsEnabled { get; set; }
			public boolean multiCurrency { get; set; }
			public boolean publisherActions { get; set; }
			public boolean storeDataOnDevicesEnabled { get; set; }
			public boolean thanksAllowed { get; set; }
			public boolean trendingTopics { get; set; }
			public boolean viralInvitesAllowed { get; set; }
		}

		public class Feed {
			public string feedElementPostUrl { get; set; }
			public string feedElementsUrl { get; set; }
			public string feedItemsUrl { get; set; }
			public string isModifiedUrl { get; set; }
		}

		public class FeedBody extends ConnectApi.AbstractMessageBody {
		}

		public class FeedDirectory {
			public List<ConnectApi.FeedFavorite> favorites { get; set; }
			public List<ConnectApi.FeedDirectoryItem> feeds { get; set; }
		}

		public class FeedDirectoryItem {
			public string feedElementsUrl { get; set; }
			public string feedItemsUrl { get; set; }
			public ConnectApi.FeedType feedType { get; set; }
			public string feedUrl { get; set; }
			public string keyPrefix { get; set; }
			public string label { get; set; }
		}

		public abstract class FeedElement {
			public ConnectApi.FeedBody body { get; set; }
			public ConnectApi.FeedElementCapabilities capabilities { get; set; }
			public Date createdDate { get; set; }
			public ConnectApi.FeedElementType feedElementType { get; set; }
			public ConnectApi.MessageBody header { get; set; }
			public string id { get; set; }
			public Date modifiedDate { get; set; }
			public ConnectApi.ActorWithId parent;
			public Date relativeCreatedDate { get; set; }
			public string url { get; set; }
		}

		public class FeedElementCapabilities {
			public ConnectApi.BannerCapability banner { get; set; }
			public ConnectApi.BookmarksCapability bookmarks { get; set; }
			public ConnectApi.AbstractBundleCapability bundle { get; set; }
			public ConnectApi.ChatterLikesCapability chatterLikes { get; set; }
			public ConnectApi.CommentsCapability comments { get; set; }
			public ConnectApi.ModerationCapability moderation { get; set; }
			public ConnectApi.PollCapability poll { get; set; }
			public ConnectApi.QuestionAndAnswerCapability questionAndAnswers { get; set; }
			public ConnectApi.TopicsCapability topics { get; set; }
		}

		public class FeedElementCapability {
		}

		public class FeedElementPage {
			public string currentPageToken { get; set; }
			public string currentPageUrl { get; set; }
			public List<ConnectApi.FeedElement> elements { get; set; }
			public string isModifiedToken { get; set; }
			public string isModifiedUrl { get; set; }
			public string nextPageToken { get; set; }
			public string nextPageUrl { get; set; }
			public string updatesToken { get; set; }
			public string updatesUrl { get; set; }
		}

		public class FeedFavorite {
			public ConnectApi.Reference community { get; set; }
			public ConnectApi.UserSummary createdBy { get; set; }
			public string feedUrl { get; set; }
			public string id { get; set; }
			public Datetime lastViewDate { get; set; }
			public string name { get; set; }
			public string searchText { get; set; }
			public ConnectApi.Reference target { get; set; }
			public ConnectApi.FeedFavoriteType type { get; set; }
			public string url { get; set; }
			public ConnectApi.UserSummary user { get; set; }
		}

		public class FeedFavorites {
			public List<ConnectApi.FeedFavorite> favorites { get; set; }
			public integer total { get; set; }
		}

		public class FeedItem extends ConnectApi.FeedElement {
			public ConnectApi.Actor actor { get; set; }
			public ConnectApi.FeedItemAttachment attachment { get; set; }
			public Boolean canShare { get; set; }
			public ConnectApi.ClientInfo clientInfo { get; set; }
			public ConnectApi.CommentPage comments { get; set; }
			public boolean event { get; set; }
			public boolean isBookmarkedByCurrentUser { get; set; }
			public boolean isDeleteRestricted { get; set; }
			public boolean isLikedByCurrentUser { get; set; }
			public ConnectApi.ChatterLikePage likes { get; set; }
			public ConnectApi.MessageBody likesMessage { get; set; }
			public ConnectApi.ModerationFlags moderationFlags { get; set; }
			public ConnectApi.Reference myLike { get; set; }
			public ConnectApi.Reference originalFeeditem { get; set; }
			public ConnectApi.Actor originalFeedItemActor { get; set; }
			public string photoUrl { get; set; }
			public ConnectApi.MessageBody preamble { get; set; }
			public ConnectApi.FeedItemTopicPage topics { get; set; }
			public ConnectApi.FeedItemType type { get; set; }
			public ConnectApi.FeedItemVisibilityType visibility { get; set; }
		}

		public abstract class FeedItemAttachment {
		}

		public class FeedItemPage {
			public string currentPageToken { get; set; }
			public string currentPageUrl { get; set; }
			public string isModifiedToken { get; set; }
			public string isModifiedUrl { get; set; }
			public List<ConnectApi.FeedItem> items { get; set; }
			public string nextPageToken { get; set; }
			public string nextPageUrl { get; set; }
			public string updatesToken { get; set; }
			public string updatesUrl { get; set; }
		}

		public class FeedItemTopicPage {
			public boolean canAssignTopics { get; set; }
			public List<ConnectApi.Topic> topics { get; set; }
		}

		public class FeedModifiedInfo {
			public boolean isModified { get; set; }
			public string isModifiedToken { get; set; }
			public string nextPollUrl { get; set; }
		}

		public class FeedPoll extends ConnectApi.FeedItemAttachment {
			public List<ConnectApi.FeedPollChoice> choices { get; set; }
			public string myChoiceId { get; set; }
			public integer totalVoteCount { get; set; }
		}

		public class FeedPollChoice {
			public string id { get; set; }
			public integer position { get; set; }
			public string text { get; set; }
			public integer voteCount { get; set; }
			public double voteCountRatio { get; set; }
		}

		public class FieldChangeSegment extends ConnectApi.ComplexSegment {
		}

		public class FieldChangeNameSegment extends ConnectApi.MessageSegment {
		}

		public class FieldChangeValueSegment extends ConnectApi.MessageSegment {
			public ConnectApi.FieldChangeValueType valueType { get; set; }
			public string url { get; set; }
		}

		public class File extends ConnectApi.ActorWithId {
			public string checksum { get; set; }
			public integer contentSize { get; set; }
			public string contentUrl { get; set; }
			public string description { get; set; }
			public string downloadUrl { get; set; }
			public string fileExtension { get; set; }
			public string fileType { get; set; }
			public string flashRenditionStatus { get; set; }
			public boolean isInMyFileSync { get; set; }
			public boolean isMajorVersion { get; set; }
			public string mimeType { get; set; }
			public ConnectApi.ModerationFlags moderationFlags { get; set; }
			public Datetime modifiedDate { get; set; }
			public string name { get; set; }
			public string origin { get; set; }
			public ConnectApi.UserSummary owner { get; set; }
			public string pdfRenditionStatus { get; set; }
			public ConnectApi.FilePublishStatus publishStatus { get; set; }
			public string renditionUrl { get; set; }
			public string renditionUrl240by180 { get; set; }
			public string renditionUrl720By480 { get; set; }
			public ConnectApi.FileSharingType sharingRole { get; set; }
			public string textPreview { get; set; }
			public string thumb120By90RenditionStatus { get; set; }
			public string thumb240By180RenditionStatus { get; set; }
			public string thumb720By480RenditionStatus { get; set; }
			public string title { get; set; }
			public string versionNumber { get; set; }
		}

		public class FileSummary extends ConnectApi.File {
		}

		public class FollowerPage {
			public string currentPageUrl { get; set; }
			public List<ConnectApi.Subscription> followers { get; set; }
			public string nextPageUrl { get; set; }
			public string previousPageUrl { get; set; }
			public integer total { get; set; }
		}

		public class FollowingCounts {
			public integer people { get; set; }
			public integer records { get; set; }
			public integer total { get; set; }
		}

		public class FollowingPage {
			public string currentPageUrl { get; set; }
			public List<ConnectApi.Subscription> following { get; set; }
			public string nextPageUrl { get; set; }
			public string previousPageUrl { get; set; }
			public integer total { get; set; }
		}

		public class GenericBundleCapability extends ConnectApi.AbstractBundleCapability {
		}

		public class GlobalInfluence {
			public string percentile { get; set; }
			public integer rank { get; set; }
		}

		public class GroupChatterSettings {
			public ConnectApi.GroupEmailFrequency emailFrequency { get; set; }
		}

		public class GroupInformation {
			public string text { get; set; }
			public string title { get; set; }
		}

		public class GroupMember {
			public string id { get; set; }
			public Date lastFeedAccessDate { get; set; }
			public ConnectApi.GroupMembershipType role { get; set; }
			public string url { get; set; }
			public ConnectApi.UserSummary user { get; set; }
		}

		public class GroupMemberPage {
			public string currentPageUrl { get; set; }
			public List<ConnectApi.GroupMember> members { get; set; }
			public ConnectApi.Reference myMembership { get; set; }
			public string nextPageUrl { get; set; }
			public string previousPageUrl { get; set; }
			public integer totalMemberCount { get; set; }
		}

		public class GroupMembershipRequest {
			public Datetime createdDate { get; set; }
			public string id { get; set; }
			public Datetime lastUpdateDate { get; set; }
			public ConnectApi.Reference requestedGroup { get; set; }
			public string responseMessage { get; set; }
			public ConnectApi.GroupMembershipRequestStatus status { get; set; }
			public string url { get; set; }
			public ConnectApi.UserSummary user { get; set; }
		}

		public class GroupMembershipRequests {
			public List<ConnectApi.GroupMembershipRequest> requests { get; set; }
			public integer total { get; set; }
		}

		public class HashtagSegment extends ConnectApi.MessageSegment {
			public string tag { get; set; }
			public string topicUrl { get; set; }
			public string url { get; set; }
		}

		public class Icon {
			public integer height { get; set; }
			public integer width { get; set; }
			public string url { get; set; }
		}

		public class LabeledRecordField extends ConnectApi.AbstractRecordField {
			public string label { get; set; }
			public string text { get; set; }
		}

		public class LinkAttachment extends ConnectApi.FeedItemAttachment {
			public string title { get; set; }
			public string url { get; set; }
		}

		public class LinkSegment extends ConnectApi.MessageSegment {
			public string url { get; set; }
		}

		public class MentionCompletion {
			public string additionalLabel { get; set; }
			public string description { get; set; }
			public string name { get; set; }
			public string photoUrl { get; set; }
			public string recordId { get; set; }
			public ConnectApi.UserType userType { get; set; }
		}

		public class MentionCompletionPage {
			public string currentPageUrl { get; set; }
			public List<ConnectApi.MentionCompletion> mentionCompletions { get; set; }
			public string nextPageUrl { get; set; }
			public string previousPageUrl { get; set; }
		}

		public class MentionSegment extends ConnectApi.MessageSegment {
			public boolean accessible { get; set; }
			public string name { get; set; }
			public ConnectApi.ActorWithId record { get; set; }
			public ConnectApi.UserSummary user { get; set; }
		}

		public class MentionValidation {
			public string recordId { get; set; }
			public ConnectApi.MentionValidationStatus validationStatus { get; set; }
		}

		public class MentionValidations {
			public boolean hasErrors { get; set; }
			public List<ConnectApi.MentionValidation> mentionValidations { get; set; }
		}

		public class MessageBody extends ConnectApi.AbstractMessageBody {
		}

		public abstract class MessageSegment {
			public string text { get; set; }
			public ConnectApi.MessageSegmentType type { get; set; }
		}

		public class ModerationCapability extends ConnectApi.FeedElementCapability {
			public ConnectApi.ModerationFlags moderationFlags { get; set; }
		}

		public class ModerationFlags {
			public integer flagCount { get; set; }
			public boolean flaggedByMe { get; set; }
		}

		public class MoreChangesSegment extends ConnectApi.MessageSegment {
			public List<ConnectApi.FieldChangeSegment> moreChanges { get; set; }
			public integer moreChangesCount { get; set; }
		}

		public class Motif {
			public string color { get; set; }
			public string largeIconUrl { get; set; }
			public string mediumIconUrl { get; set; }
			public string smallIconUrl { get; set; }
		}

		public class OrganizationSettings {
			public integer accessTimeout { get; set; }
			public ConnectApi.Features features { get; set; }
			public string name { get; set; }
			public string orgId { get; set; }
			public ConnectApi.UserSettings userSettings { get; set; }
		}

		public class PercentRecordField extends ConnectApi.LabeledRecordField {
			public double value { get; set; }
		}

		public class PhoneNumber {
			public string label { get; set; }
			public string phoneNumber { get; set; }
			public string phoneType { get; set; }
			public string type { get; set; }
		}

		public class Photo {
			public string fullEmailPhotoUrl { get; set; }
			public string largePhotoUrl { get; set; }
			public string photoVersionId { get; set; }
			public string smallPhotoUrl { get; set; }
			public string standardEmailPhotoUrl { get; set; }
			public string url { get; set; }
		}

		public class PicklistRecordField extends ConnectApi.LabeledRecordField {
		}

		public class PollCapability extends ConnectApi.FeedElementCapability {
		}

		public class QuestionAndAnswersCapability {
			public ConnectApi.FeedElementCapabilityType capabilityType { get; set; }
		}

		public class RecordField extends ConnectApi.LabeledRecordField {
		}

		public class RecordSnapshotAttachment extends ConnectApi.FeedItemAttachment {
			public ConnectApi.RecordView recordView { get; set; }
		}

		public class RecordSummary extends ConnectApi.AbstractRecordView {
		}

		public class RecordSummaryList {
			public List<ConnectApi.ActorWithId> records { get; set; }
			public string url { get; set; }
		}

		public class RecordView extends ConnectApi.AbstractRecordView {
			public List<ConnectApi.RecordViewSection> sections { get; set; }
		}

		public class RecordViewSection {
			public integer columnCount { get; set; }
			public ConnectApi.RecordColumnOrder columnOrder { get; set; }
			public ConnectApi.AbstractRecordField fields { get; set; }
			public string heading { get; set; }
			public boolean isCollapsible { get; set; }
		}

		public class Reference {
			public string id { get; set; }
			public string url { get; set; }
		}

		public class ReferenceRecordField extends ConnectApi.LabeledRecordField {
			public ConnectApi.RecordSummary reference { get; set; }
		}

		public class ReferenceWithDateRecordField extends LabeledRecordField {
			public Date dateValue { get; set; }
			public ConnectApi.RecordSummary reference { get; set; }
		}

		public class ResourceLinkSegment {
			public string url { get; set; }
		}

		public class Subscription {
			public ConnectApi.Reference community { get; set; }
			public string id { get; set; }
			public ConnectApi.Actor subject { get; set; }
			public ConnectApi.Actor subscriber { get; set; }
			public string url { get; set; }
		}

		public class TextSegment extends ConnectApi.MessageSegment {
		}

		public class TimeZone {
			public double gmtOffset { get; set; }
			public string name { get; set; }
		}

		public class Topic {
			public Datetime createdDate { get; set; }
			public string description { get; set; }
			public string id { get; set; }
			public string name { get; set; }
			public integer talingAbout { get; set; }
			public string url { get; set; }
		}

		public class TopicEndorsement {
			public ConnectApi.UserSummary endorsee { get; set; }
			public string endorsementId { get; set; }
			public ConnectApi.UserSummary endorser { get; set; }
			public ConnectApi.Topic topic { get; set; }
			public string url { get; set; }
		}

		public class TopicEndorsementCollection {
			public string currentPageUrl { get; set; }
			public string nextPageUrl { get; set; }
			public string previousPageUrl { get; set; }
			public List<ConnectApi.Topic> topicEndorsements { get; set; }
		}

		public class TopicPage {
			public string currentPageUrl { get; set; }
			public string nextPageUrl { get; set; }
			public List<ConnectApi.Topic> topics { get; set; }
		}

		public class TopicsCapability extends ConnectApi.FeedElementCapability {
		}

		public class TopicSuggestion {
			public ConnectApi.Topic existingTopic { get; set; }
			public string name { get; set; }
		}

		public class TopicSuggestionPage {
			public List<ConnectApi.TopicSuggestion> TopicSuggestionPage { get; set; }
		}

		public class TrackedChangeAttachment {
			public List<ConnectApi.TrackedChangeItem> changes { get; set; }
		}

		public class TrackedChangeBundleCapability extends ConnectApi.AbstractBundleCapability {
			public List<ConnectApi.TrackedChangeItem> changes { get; set; }
		}

		public class TrackedChangeItem {
			public string fieldName { get; set; }
			public string newValue { get; set; }
			public string oldValue { get; set; }
		}

		public class UnauthenticatedUser extends ConnectApi.Actor {
		}

		public class UnreadConversationCount {
			public boolean hasMore { get; set; }
			public integer unreadCount { get; set; }
		}

		public class User extends ConnectApi.ActorWithId {
			public string additionalLabel { get; set; }
			public string companyName { get; set; }
			public string firstName { get; set; }
			public boolean isChatterGuest { get; set; }
			public boolean isInThisCommunity { get; set; }
			public string lastName { get; set; }
			public ConnectApi.Photo photo { get; set; }
			public string title { get; set; }
			public ConnectApi.UserType userType { get; set; }
		}

		public class UserCapabilities {
			public boolean canChat { get; set; }
			public boolean canDirectMessage { get; set; }
			public boolean canEdit { get; set; }
			public boolean canFollow { get; set; }
			public boolean canViewFeed { get; set; }
			public boolean canViewFullProfile { get; set; }
			public boolean isModerator { get; set; }
		}

		public class UserChatterSettings {
			public ConnectApi.GroupEmailFrequency defaultGroupEmailFrequency { get; set; }
		}

		public class UserDetail extends ConnectApi.User {
			public string aboutMe { get; set; }
			public ConnectApi.Address address { get; set; }
			public ConnectApi.ChatterActivity chatterActivity { get; set; }
			public ConnectApi.GlobalInfluence chatterInfluence { get; set; }
			public string email { get; set; }
			public integer followersCount { get; set; }
			public ConnectApi.FollowingCounts followingCounts { get; set; }
			public integer groupCount { get; set; }
			public boolean hasChatter { get; set; }
			public boolean isActive { get; set; }
			public string managerId { get; set; }
			public string managerName { get; set; }
			public integer thanksReceived { get; set; }
			public List<ConnectApi.PhoneNumber> phoneNumbers { get; set; }
			public string username { get; set; }
		}

		public class UserGroupPage {
			public string currentPageUrl { get; set; }
			public List<ConnectApi.ChatterGroupSummary> groups { get; set; }
			public string nextPageUrl { get; set; }
			public string previousPageUrl { get; set; }
			public integer total { get; set; }
		}

		public class UserPage {
			public integer currentPageToken { get; set; }
			public string currentPageUrl { get; set; }
			public integer nextPageToken { get; set; }
			public string nextPageUrl { get; set; }
			public integer previousPageToken { get; set; }
			public string previousPageUrl { get; set; }
			public List<ConnectApi.UserDetail> users { get; set; }
		}

		public class UserProfile {
			public ConnectApi.UserCapabilities capabilities { get; set; }
			public string id { get; set; }
			public List<ConnectApi.UserProfileTab> tabs { get; set; }
			public string url { get; set; }
			public ConnectApi.UserDetail userDetail { get; set; }
		}

		public class UserProfileTab {
			public string id { get; set; }
			public boolean isDefault { get; set; }
			public ConnectApi.UserProfileTabType tabType { get; set; }
			public string tabUrl { get; set; }
		}

		public class UserSettings {
			public boolean approvalPosts { get; set; }
			public boolean canFollow { get; set; }
			public boolean canModifyAllData { get; set; }
			public boolean canOwnGroups { get; set; }
			public boolean canViewAllData { get; set; }
			public boolean canViewAllGroups { get; set; }
			public boolean canViewAllUsers { get; set; }
			public boolean canViewFullUserProfile { get; set; }
			public boolean canViewPublicFiles { get; set; }
			public string currencySymbol { get; set; }
			public boolean externalUser { get; set; }
			public integer fileSyncStorageLimit { get; set; }
			public boolean hasAccessToInternalOrg { get; set; }
			public boolean hasChatter { get; set; }
			public boolean hasFileSync { get; set; }
			public boolean hasResetDataApiAccess { get; set; }
			public ConnectApi.TimeZone timeZone { get; set; }
			public string userDefaultCurrencyIsoCode { get; set; }
			public string userId { get; set; }
			public string userLocale { get; set; }
		}

		public class UserSummary extends ConnectApi.User {
			public boolean isActive { get; set; }
		}

		public class Zone {
			public string description { get; set; }
			public string id { get; set; }
			public boolean isActive { get; set; }
			public boolean isChatterAnswers { get; set; }
			public string name { get; set; }
			public string url { get; set; }
			public ConnectApi.ZoneShowIn visibility { get; set; }
			public string visibilityId { get; set; }
		}

		public class ZonePage {
			public List<ConnectApi.Zone> zones { get; set; }
			public string currentPageUrl { get; set; }
			public string nextPageUrl { get; set; }
		}

		public class ZoneSearchPage {
			public string currentPageToken { get; set; }
			public string currentPageUrl { get; set; }
			public List<ConnectApi.ZoneSearchResult> items { get; set; }
			public string nextPageToken { get; set; }
			public string nextPageUrl { get; set; }
		}

		public class ZoneSearchResult {
			public boolean hasBestAnswer { get; set; }
			public string id { get; set; }
			public string title { get; set; }
			public ConnectApi.ZoneSearchResultType type { get; set; }
			public string voteCount { get; set; }
		}

		public class ConnectApiException extends Exception {
		}

		public class NotFoundException extends Exception {
		}

		public class RateLimitException extends Exception {
		}

		public enum BannerStyle {
			Announcement
		}

		public enum BundleType {
			GenericBundle,
			TrackedChanges
		}

		public enum CaseActorType {
			Customer,
			CustomerService
		}

		public enum CaseCommentEventType {
			NewInternal,
			NewPublished,
			NewPublishedByCustomer,
			PublishExsiting,
			PublishExistingByCustomer,
			UnpublishExisting,
			UnpublishExistingByCustomer
		}

		public enum CommentType {
			ContentComment,
			TextComment
		}

		public enum CommunityFlagVisibility {
			ModeratorsOnly,
			SelfAndModerators
		}

		public enum CommunityStatus {
			Live,
			Inactive,
			UnderConstruction
		}

		public enum EmailMessageDirection {
			Inbound,
			Outbound
		}

		public enum FeedDensity {
			AllUpdates,
			FewerUpdates
		}

		public enum FeedElementCapabilityType {
			AssociatedActions,
			Banner,
			Bookmarks,
			Bundle,
			ChatterLikes,
			Comments,
			Moderation,
			Poll,
			QuestionAndAnswers,
			Topics
		}

		public enum FeedElementType {
			Bundle,
			FeedItem
		}

		public enum FeedFavoriteType {
			ListView,
			Search,
			Topic
		}

		public enum FeedFavoriteAttachmentType {
			Approval,
			BasicTemplate,
			Canvas,
			CaseComment,
			CaseComment,
			Content,
			DashboardComponent,
			EmailMessage,
			Link,
			Poll,
			Question,
			RecordSnapshot,
			TrackedChange
		}

		public enum FeedItemType {
			ActivityEvent,
			AdvancedTextPost,
			ApprovalPost,
			AttachArticleEvent,
			BasicTemplateFeedItem,
			CallLogPost,
			CanvasPost,
			CaseCommentPost,
			ChangeStatusPost,
			ChatTranscriptionPost,
			CollaborationGroupCreated,
			CollaborationGroupUnarchived,
			ContentPost,
			CreateRecordEvent,
			DashboardComponentAlert,
			DashboardComponentSnapshot,
			EmailMessageEvent,
			FacebookPost,
			LinkPost,
			MilestoneEvent,
			PollPost,
			ProfileSkillPost,
			QuestionPost,
			ReplyPost,
			RypplePost,
			SocialPost,
			TextPost,
			TrackedChange,
			UserStatus
		}

		public enum FeedItemVisibilityType {
			AllUsers,
			InternalUsers
		}

		public enum FeedSortOrder {
			CreatedDateDesc,
			LastModifiedDateDesc
		}

		public enum FeedType {
			Bookmarks,
			Company,
			Files,
			Filter,
			Groups,
			Moderation,
			News,
			People,
			Record,
			To,
			Topics,
			UserProfile
		}

		public enum FieldChangeValueType {
			NewValue,
			OldValue
		}

		public enum FilePublishStatus {
			PendingAccess,
			PrivateAccess,
			PublicAccess
		}

		public enum FileSharingType {
			Admin,
			Collaborator,
			Owner,
			Viewer,
			WorkspaceManaged
		}

		public enum GroupArchiveStatus {
			All,
			Archived,
			NotArchived
		}

		public enum GroupEmailFrequency {
			All,
			Archived,
			NotArchived
		}

		public enum GroupEmailFrequency {
			EachPost,
			DailyDigest,
			WeeklyDigest,
			Never,
			UseDefault
		}

		public enum GroupMembershipType {
			GroupOwner,
			GroupManager,
			NotAMember,
			NotAMemberPrivateRequested,
			StandardMember
		}

		public enum GroupMembershipRequestStatus {
			Accepted,
			Declined,
			Pending
		}

		public enum GroupVisibilityType {
			PrivateAccess,
			PublicAccess,
			Unlisted
		}

		public enum MentionCompletionType {
			All,
			Group,
			User
		}

		public enum MentionValidationStatus {
			Disallowed,
			Inaccessible,
			Ok
		}

		public enum MessageSegmentType {
			EntityLink,
			FieldChange,
			FieldChangeName,
			FieldChangeValue,
			Hashtag,
			Link,
			Mention,
			MoreChanges,
			ResourceLink,
			Text
		}

		public enum RecordColumnOrder {
			LeftRight,
			TopDown
		}

		public enum RecordFieldType {
			Address,
			Blank,
			Boolean,
			Compound,
			CreatedBy,
			Date,
			DateTime,
			Email,
			LastModifiedBy,
			Location,
			Name,
			Number,
			Percent,
			Phone,
			Picklist,
			Reference,
			Text,
			Time
		}

		public enum SortOrder {
			Ascending,
			Descending
		}

		public enum TopicSort {
			popularDesc,
			alphaAsc
		}

		public enum UserProfileTabType {
			CustomVisualForce,
			CustomWeb,
			Feed,
			Overview
		}

		public enum UserType {
			ChatterGuest,
			ChatterOnly,
			Guest,
			Internal,
			Portal,
			System,
			Undefined
		}

		public enum WorkflowProcessStatus {
			Approved,
			Fault,
			Held,
			NoResponse,
			Pending,
			Reassigned,
			Rejected,
			Removed,
			Started
		}

		public enum ZoneSearchResultType {
			Article,
			Question
		}

		public enum ZoneShowIn {
			Community,
			Internal,
			Portal
		}
	}

	public interface Comparable {
		Integer compareTo(Object objectToCompareTo);
	}

	public class Cookie {
		public Cookie(String name, String value, String path, Integer maxAge, Boolean isSecure);
		public String getDomain();
		public Integer getMaxAge();
		public String getName();
		public String getPath();
		public String getValue();
		public Boolean isSecure();
	}

	public class Crypto {
		public static Blob decrypt(String algorithmName, Blob privateKey, Blob initializationVector, Blob cipherText);
		public static Blob decryptWithManagedIV(String algorithmName, Blob privateKey, Blob IVAndCipherText);
		public static Blob encrypt(String algorithmName, Blob privateKey, Blob initializationVector, Blob clearText);
		public static Blob encryptWithManagedIV(String algorithmName, Blob privateKey, Blob clearText);
		public static Blob generateAesKey(Integer size);
		public static Blob generateDigest(String algorithmName, Blob input);
		public static Blob generateMac(String algorithmName, Blob input, Blob privateKey);
		public static Integer getRandomInteger();
		public static Long getRandomLong();
		public static Blob sign(String algorithmName, Blob input, Blob privateKey);
		public static Blob signWithCertificate(String algorithmName, Blob input, String certDevName);
		public Void signXML(String algorithmName, Dom.XmlNode node, String idAttributeName, String certDevName);
	}

	public class BusinessHours {
		public static Datetime add(String businessHoursId, Datetime startDate, Long interval);
		public static Datetime addGmt(String businessHoursId, Datetime startDate, Long interval);
		public static Long diff(String businessHoursId, Datetime startDate, Datetime endDate);
		public static Boolean isWithin(String businessHoursId, Datetime targetDate);
		public static Datetime nextStartDate(String businessHoursId, Datetime targetDate);
	}

	public class CustomSettings {
		public Map<String, CustomSetting__c> getAll();
		public CustomSetting__c getInstance(String dataset_name);
		public CustomSetting__c getValues(String dataset_name);
		public CustomSetting__c getInstance();
		public CustomSetting__c getInstance(ID user_Id);
		public CustomSetting__c getInstance(ID profile_Id);
		public CustomSetting__c getOrgDefaults();
		public CustomSetting__c getValues(ID user_Id);
		public CustomSetting__c getValues(ID Profile_Id);
	}

	public class Database {
		public static Database.LeadConvertResult convertLead(Database.LeadConvert leadToConvert, Boolean opt_allOrNone);
		public static Database.LeadConvertResult[] convertLead(Database.LeadConvert[] leadsToConvert, Boolean opt_allOrNone);
		public static Integer countQuery(String query);
		public static Database.DeleteResult delete(SObject recordToDelete, Boolean opt_allOrNone);
		public static Database.DeleteResult[] delete(SObject[] recordsToDelete, Boolean opt_allOrNone);
		public static Database.DeleteResult delete(ID recordID, Boolean opt_allOrNone);
		public static Database.DeleteResult[] delete(ID[] recordIDs, Boolean opt_allOrNone);
		public static Database.EmptyRecycleBinResult[] emptyRecycleBin(ID [] recordIds);
		public static Database.EmptyRecycleBinResult emptyRecycleBin(sObject obj);
		public static Database.EmptyRecycleBinResult[] emptyRecycleBin(sObject[] listOfSObjects);
		public static ID executeBatch(sObject className);
		public static ID executeBatch(sObject className, Integer scope);
		public static Database.GetDeletedResult getDeleted(String sObjectType, Datetime startDate, Datetime endDate);
		public static Database. QueryLocator getQueryLocator(sObject [] listOfQueries);
		public static Database.QueryLocator getQueryLocator(String query);
		public static Database.GetUpdatedResult getUpdated(String sobjectType, Datetime startDate, Datetime endDate);
		public static Database.SaveResult insert(sObject recordToInsert, Boolean opt_allOrNone);
		public static Database.SaveResult[] insert(sObject [] recordsToInsert, Boolean opt_allOrNone);
		public static Database.SaveResult insert(sObject recordToInsert, Database.DMLOptions options);
		public static Database.SaveResult insert(sObject[] recordToInsert, Database.DMLOptions options);
		public static Database.MergeResult merge(sObject master, Id duplicate);
		public static Database.MergeResult merge(sObject master, sObject duplicate);
		public static List<Database.MergeResult> merge(sObject master, List<Id> duplicates);
		public static List<Database.MergeResult> merge(sObject master, List<SObject> duplicates);
		public static Database.MergeResult merge(sObject master, Id duplicate, Boolean allOrNothing);
		public static Database.MergeResult merge(sObject master, sObject duplicate, Boolean allOrNone);
		public static List<Database.MergeResult> merge(sObject master, List<Id> duplicates, Boolean allOrNone);
		public static List<Database.MergeResult> merge(sObject master, List<SObject> duplicates, Boolean allOrNone);
		public static sObject[] query(String query);
		public static Void rollback(System.Savepoint sp);
		public static System.Savepoint setSavepoint();
		public static Database.UndeleteResult undelete(sObject recordToUndelete, Boolean opt_allOrNone);
		public static Database.UndeleteResult[] undelete(sObject [] recordsToUndelete, Boolean opt_allOrNone);
		public static Database.UndeleteResult undelete(ID recordID, Boolean opt_allOrNone);
		public static Database.UndeleteResult[] undelete(ID[] recordIDs, Boolean opt_allOrNone);
		public static Database.SaveResult update(sObject recordToUpdate, Boolean opt_allOrNone);
		public static Database.SaveResult[] update(sObject[] recordsToUpdate, Boolean opt_allOrNone);
		public static Database.SaveResult update(sObject recordToUpdate, Database.DmlOptions options);
		public static Database.SaveResult[] update(sObject[] recordsToUpdate, Database.DMLOptions options);
		public static Database.UpsertResult upsert(sObject recordToUpsert, Schema.SObjectField external_ID_Field, Boolean opt_allOrNone);
		public static Database.UpsertResult[] upsert(sObject [] recordsToUpsert, Schema.SObjectField External_ID_Field, Boolean opt_allOrNone);

		public interface Batchable {
			Void execute(Database.BatchableContext context, List<sObject> scope);
			Void finish(Database.BatchableContext context);
			System.Iterable start(Database.BatchableContext context);
			Database.QueryLocator start(Database.BatchableContext context);
		}

		public interface BatchableContext {
			Id getChildJobId();
			Id getJobId();
		}

		public class DeletedRecord {
			public Date getDeletedDate();
			public Id getId();
		}

		public class DeleteResult {
			public Database.Error[] getErrors();
			public ID getId();
			public Boolean isSuccess();
		}

		public class DMLOptions {
			public Boolean allowFieldTruncation {get; set;}
			public Database.DmlOptions.Assignmentruleheader assignmentRuleHeader {get; set;}
			public Database.DmlOptions.EmailHeader emailHeader {get; set;}
			public Database.DmlOptions.LocaleOptions localeOptions {get; set;}
			public Boolean optAllOrNone {get; set;}

			public class AssignmentRuleHeader {
				public Id assignmentRuleID {get; set;}
				public Boolean useDefaultRule {get; set;}
			}

			public class EmailHeader {
				public Boolean triggerAutoResponseEmail {get; set;}
				public Boolean triggerOtherEmail {get; set;}
				public Boolean triggerUserEmail {get; set;}
			}
		}

		public class EmptyRecycleBinResult {
			public Database.Errors[] getErrors();
			public ID getId();
			public Boolean isSuccess();
		}

		public class Error {
			public String[] getFields();
			public String getMessage();
			public StatusCode getStatusCode();
		}

		public class GetDeletedResult {
			public List<Database.DeletedRecord> getDeletedRecords();
			public Date getEarliestDateAvailable();
			public Date getLatestDateCovered();
		}

		public class GetUpdatedResult {
			public List<Id> getIds();
			public Date getLatestDateCovered();
		}

		public class LeadConvert {
			public LeadConvert();
			public ID getAccountId();
			public ID getContactId();
			public String getConvertedStatus();
			public ID getLeadID();
			public String getOpportunityName();
			public ID getOwnerID();
			public Boolean isDoNotCreateOpportunity();
			public Boolean isOverWriteLeadSource();
			public Boolean isSendNotificationEmail();
			public Void setAccountId(ID accountID);
			public Void setContactId(ID contactID);
			public Void setConvertedStatus(String Status);
			public Void setDoNotCreateOpportunity(Boolean createOpportunity);
			public Void setLeadId(ID leadID);
			public Void setOpportunityName(String OppName);
			public Void setOverwriteLeadSource(Boolean overwriteLeadSource);
			public Void setOwnerId(ID ownerID);
			public Void setSendNotificationEmail(Boolean sendEmail);
		}

		public class LeadConvertResult {
			public ID getAccountId();
			public ID getContactId();
			public Database.Error[] getErrors();
			public ID getLeadId();
			public ID getOpportunityId();
			public Boolean isSuccess();
		}

		public class MergeResult {
			public List<Database.Error> getErrors();
			public Id getId();
			public List<String> getMergedRecordIds();
			public List<String> getUpdatedRelatedIds();
			public Boolean isSuccess();
		}

		public class QueryLocator {
			public String getQuery();
			public Database.QueryLocatorIterator iterator();
		}

		public class QueryLocatorIterator {
			public Boolean hasNext();
			public sObject next();
		}

		public class SaveResult {
			public Database.Error[] getErrors();
			public ID getId();
			public Boolean isSuccess();
		}

		public class UndeleteResult {
			public Database.Error[] getErrors();
			public ID getId();
			public Boolean isSuccess();
		}

		public class UpsertResult {
			public Database.Error[] getErrors();
			public ID getId();
			public Boolean isCreated();
			public Boolean isSuccess();
		}
	}

	public class Dom {
		public class Document {
			public Document();
			public Dom.XmlNode createRootElement(String name, String namespace, String prefix);
			public Dom.XmlNode getRootElement();
			public Void load(String xml);
			public String toXmlString();
		}

		public class XmlNode {
			public Dom.XmlNode addChildElement(String name, String namespace, String prefix);
			public Dom.XmlNode addCommentNode(String text);
			public Dom.XmlNode addTextNode(String text);
			public String getAttribute(String key, String keyNamespace);
			public Integer getAttributeCount();
			public String getAttributeKeyAt(Integer index);
			public String getAttributeKeyNsAt(Integer index);
			public String getAttributeValue(String key, String keyNamespace);
			public String getAttributeValueNs(String key, String keyNamespace);
			public Dom.XmlNode getChildElement(String name, String namespace);
			public Dom.XmlNode[] getChildElements();
			public Dom.XmlNode[] getChildren();
			public String getName();
			public String getNamespace();
			public String getNamespaceFor(String prefix);
			public Dom.XmlNodeType getNodeType();
			public Dom.XmlNode getParent();
			public String getPrefixFor(String namespace);
			public String getText();
			public Boolean removeAttribute(String key, String keyNamespace);
			public Boolean removeChild(Dom.XmlNode childNode);
			public Void setAttribute(String key, String value);
			public Void setAttributeNs(String key, String value, String keyNamespace, String valueNamespace);
			public Void setNamespace(String prefix, String namespace);
		}
	}

	public class Flow {
		public class Interview {
			public Object getVariableValue(String variableName);
			public Void start();
		}
	}

	public class KbManagement {
		public class PublishingService {
			public static Void archiveOnlineArticle(String articleId, Datetime scheduledDate);
			public static Void assignDraftArticleTask(String articleId, String assigneeID, String instructions, Datetime dueDate, Boolean sendEmailNotification);
			public static Void assignDraftTranslationTask(String articleVersionId, String assigneeID, String instructions, Datetime dueDate, Boolean sendEmailNotification);
			public static Void cancelScheduledArchivingOfArticle(String articleId);
			public static Void cancelScheduledPublicationOfArticle(String articleId);
			public static Void completeTranslation(String articleVersionId);
			public static Void deleteArchivedArticle(String articleId);
			public static Void deleteArchivedArticleVersion(String articleId, Integer versionNumber);
			public static Void deleteDraftArticle(String articleId);
			public static Void deleteDraftTranslation(String articleVersionId);
			public static String editArchivedArticle(String articleId);
			public static String editOnlineArticle(String articleId, Boolean unpublish);
			public static String editPublishedTranslation(String articleId, String language, Boolean unpublish);
			public static Void publishArticle(String articleId, Boolean flagAsNew);
			public static String restoreOldVersion(String articleId, Integer versionNumber);
			public static Void scheduleForPublication(String articleId, Datetime scheduledDate);
			public static Void setTranslationToIncomplete(String articleVersionId);
			public static String submitForTranslation(String articleId, String language, String assigneeID, Datetime dueDate);
		}
	}

	public class Date {
		public Date addDays(Integer addlDays);
		public Date addMonths(Integer addlMonths);
		public Date addYears(Integer addlYears);
		public Integer day();
		public Integer dayOfYear();
		public Integer daysBetween(Date compDate);
		public static Integer daysInMonth(Integer year, Integer month);
		public String format();
		public static Boolean isLeapYear(Integer year);
		public Boolean isSameDay(Date compDate);
		public Integer month();
		public Integer monthsBetween(Date compDate);
		public static Date newInstance(Integer year, Integer month, Integer date);
		public static Date parse(String Date);
		public static Date today();
		public Date toStartOfMonth();
		public Date toStartOfWeek();
		public static Date valueOf(String toDate);
		public static Date valueOf(Object fieldValue);
		public Integer year();
	}

	public class Datetime {
		public Datetime addDays(Integer addlDays);
		public Datetime addHours(Integer addlHours);
		public Datetime addMinutes(Integer addlMinutes);
		public Datetime addMonths(Integer addlMonths);
		public Datetime addSeconds(Integer addlSeconds);
		public Datetime addYears(Integer addlYears);
		public Date date();
		public Date dateGMT();
		public Integer day();
		public Integer dayGmt();
		public Integer dayOfYear();
		public Integer dayOfYearGmt();
		public String format();
		public String format(String dateFormat);
		public String format(String dateFormat, String timezone);
		public String formatGmt(String dateFormat);
		public String formatLong();
		public Long getTime();
		public Integer hour();
		public Integer hourGmt();
		public Boolean isSameDay(Datetime compDt);
		public Integer millisecond();
		public Integer millisecondGmt();
		public Integer minute();
		public Integer minuteGmt();
		public Integer month();
		public Integer monthGmt();
		public static Datetime newInstance(Long milliseconds);
		public static Datetime newInstance(Date dt, Time tm);
		public static Datetime newInstance(Integer year, Integer month, Integer day);
		public static Datetime newInstance(Integer year, Integer month, Integer day, Integer hour, Integer minute, Integer second);
		public static Datetime newInstanceGmt(Date dt, Time tm);
		public static Datetime newInstanceGmt(Integer year, Integer month, Integer date);
		public static Datetime newInstanceGmt(Integer year, Integer month, Integer date, Integer hour, Integer minute, Integer second);
		public static Datetime now();
		public static Datetime parse(String datetime);
		public Integer second();
		public Integer secondGmt();
		public Time time();
		public Time timeGmt();
		public static Datetime valueOf(String toDateTime);
		public static Datetime valueOf(Object fieldValue);
		public static Datetime valueOfGmt(String toDateTime);
		public Integer year();
		public Integer yearGmt();
	}

	public enum RoundingMode {
		CEILING,
		DOWN,
		FLOOR,
		HALF_DOWN,
		HALF_EVEN,
		HALF_UP,
		UNNECESSARY,
		UP
	}

	public class Decimal {
		public Decimal abs();
		public Decimal divide(Decimal divisor, Integer scale);
		public Decimal divide(Decimal divisor, Integer scale, Object roundingMode);
		public Double doubleValue();
		public String format();
		public Integer intValue();
		public Long longValue();
		public Decimal pow(Integer exponent);
		public Integer precision();
		public Long round();
		public Long round(System.RoundingMode roundingMode);
		public Integer scale();
		public Decimal setScale(Integer scale);
		public Decimal setScale(Integer scale, System.RoundingMode roundingMode);
		public Decimal stripTrailingZeros();
		public String toPlainString();
		public static Decimal valueOf(Double convertToDecimal);
		public static Decimal valueOf(Long convertToDecimal);
		public static Decimal valueOf(String convertToDecimal);
	}

	public class Double {
		public String format();
		public Integer intValue();
		public Long longValue();
		public Long round();
		public static Double valueOf(String toDouble);
		public static Double valueOf(Object fieldValue);
	}

	public class EncodingUtil {
		public static Blob base64Decode(String inputString);
		public static String base64Encode(Blob inputBlob);
		public static Blob convertToHex(String inputString);
		public static String convertToHex(Blob inputString);
		public static String urlDecode(String inputString, String encodingScheme);
		public static String urlEncode(String inputString, String encodingScheme);
	}

	public class Exception {
		public Exception getCause();
		public integer getLineNumber();
		public string getMessage();
		public string getStackTraceString();
		public string getTypeName();
		public void initCause(Exception cause);
		public void setMessage(string s);
	}

	public class DmlException extends Exception {
		public string[] getDmlFieldNames(integer i);
		public Schema.sObjectField[] getDmlFields(integer i);
		public string getDmlId(integer i);
		public integer getDmlIndex(integer i);
		public string getDmlMessage(integer i);
		public string getDmlStatusCode(integer i);
		public System.StatusCode getDmlType(integer i);
		public integer getNumDml();
	}

	public class AsyncException extends Exception {
	}

	public class CalloutException extends Exception {
	}

	public class EmailException extends Exception {
	}
	
	public class InvalidParameterValueException extends Exception {
	}
	
	public class JSONException extends Exception {
	}
	
	public class ListException extends Exception {
	}
	
	public class MathException extends Exception {
	}
	
	public class NoAccessException extends Exception {
	}
	
	public class NoDataFoundException extends Exception {
	}
	
	public class NoSuchElementException extends Exception {
	}
	
	public class NullPointerException extends Exception {
	}
	
	public class QueryException extends Exception {
	}
	
	public class RequiredFeatureMissing extends Exception {
	}
	
	public class SearchException extends Exception {
	}
	
	public class SecurityException extends Exception {
	}
	
	public class SerializationException extends Exception {
	}
	
	public class SObjectException extends Exception {
	}
	
	public class StringException extends Exception {
	}
	
	public class TypeException extends Exception {
	}
	
	public class VisualforceException extends Exception {
	}
	
	public class XmlException extends Exception {
	}

	public class Http {
		public HttpResponse send(HttpRequest request);
		public String toString();
	}

	public interface HttpCalloutMock {
		HttpResponse respond(HttpRequest req);
	}

	public class HttpRequest {
		public HttpRequest();
		public String getBody();
		public Blob getBodyAsBlob();
		public Dom.Document getBodyDocument();
		public Boolean getCompressed();
		public String getEndpoint();
		public String getHeader(String key);
		public String getMethod();
		public Void setBody(String body);
		public Void setBodyAsBlob(Blob body);
		public Void setBodyDocument(Dom.Document document);
		public Void setClientCertificate(String clientCert, String password);
		public Void setClientCertificateName(String certDevName);
		public Void setCompressed(Boolean flag);
		public Void setEndpoint(String endpoint);
		public Void setHeader(String key, String Value);
		public Void setMethod(String method);
		public Void setTimeout(Integer timeout);
		public String toString();
	}

	public class HttpResponse {
		public String getBody();
		public Blob getBodyAsBlob();
		public Dom.Document getBodyDocument();
		public String getHeader(String key);
		public String[] getHeaderKeys();
		public String getStatus();
		public Integer getStatusCode();
		public XmlStreamReader getXmlStreamReader();
		public Void setBody(String body);
		public Void setBodyAsBlob(Blob body);
		public Void setHeader(String key, String value);
		public Void setStatus(String status);
		public Void setStatusCode(Integer statusCode);
		public String toString();
	}

	public class Id {
		public Void addError(String errorMsg);
		public Void addError(String errorMsg, Boolean escape);
		public Void addError(Exception exceptionError);
		public Void addError(Exception exceptionError, Boolean escape);
		public Schema.SObjectType getSObjectType();
		public static ID valueOf(String toID);
	}

	public class Ideas {
		public static ID[] findSimilar(Idea idea);
		public static ID[] getAllRecentReplies(String userID, String communityID);
		public static ID[] getReadRecentReplies(String userID, String communityID);
		public static ID[] getUnreadRecentReplies(String userID, String communityID);
		public static Void markRead(String ideaID);
	}

	public interface InstallHandler {
		Void onInstall(InstallContext context);
	}

	public class Integer {
		public String format();
		public static Integer valueOf(String toInteger);
		public static Integer valueOf(Object fieldValue);
	}

	public class JSON {
		public static System.JSONGenerator createGenerator(Boolean pretty);
		public static System.JSONParser createParser(String jsonString);
		public static Object deserialize(String jsonString, System.Type apexType);
		public static Object deserializeStrict(String jsonString, System.Type apexType);
		public static Object deserializeUntyped(String jsonString);
		public static String serialize(anyType object);
		public static String serializePretty(Object anyType);
	}

	public class JSONGenerator {
		public Void close();
		public String getAsString();
		public Boolean isClosed();
		public Void writeBlob(Blob blobValue);
		public Void writeBlobField(String fieldName, Blob blobValue);
		public Void writeBoolean(Boolean blobValue);
		public Void writeBooleanField(String fieldName, Boolean booleanValue);
		public Void writeDate(Date dateValue);
		public Void writeDateField(String fieldName, Date dateValue);
		public Void writeDateTime(Datetime datetimeValue);
		public Void writeDateTimeField(String fieldName, Datetime datetimeValue);
		public Void writeEndArray();
		public Void writeEndObject();
		public Void writeFieldName(String fieldName);
		public Void writeId(ID identifier);
		public Void writeIdField(String fieldName, Id identifier);
		public Void writeNull();
		public Void writeNullField(String fieldName);
		public Void writeNumber(Decimal num);
		public Void writeNumber(Double num);
		public Void writeNumber(Integer num);
		public Void writeNumber(Long num);
		public Void writeNumberField(String fieldName, Decimal num);
		public Void writeNumberField(String fieldName, Double num);
		public Void writeNumberField(String fieldName, Integer num);
		public Void writeNumberField(String fieldName, Long num);
		public Void writeObject(Object anyType);
		public Void writeObjectField(String fieldName, Object anyType);
		public Void writeStartArray();
		public Void writeStartObject();
		public Void writeString(String stringValue);
		public Void writeStringField(String fieldName, String stringValue);
		public Void writeTime(Time timeValue);
		public Void writeTimeField(String fieldName, Time timeValue);
	}

	public class JSONParser {
		public Void clearCurrentToken();
		public Blob getBlobValue();
		public Boolean getBooleanValue();
		public String getCurrentName();
		public System.JSONToken getCurrentToken();
		public Datetime getDatetimeValue();
		public Date getDateValue();
		public Decimal getDecimalValue();
		public Double getDoubleValue();
		public ID getIdValue();
		public Integer getIntegerValue();
		public System.JSONToken getLastClearedToken();
		public Long getLongValue();
		public String getText();
		public Time getTimeValue();
		public Boolean hasCurrentToken();
		public System.JSONToken nextToken();
		public System.JSONToken nextValue();
		public Object readValueAs(System.Type apexType);
		public Object readValueAsStrict(System.Type apexType);
		public Void skipChildren();
	}

	public class Process {
		public interface Plugin {
			Process.PluginDescribeResult describe();
			Process.PluginResult invoke(Process.PluginRequest request);
		}

		public class PluginDescribeResult {
			public PluginDescribeResult();
			public String Description {get; set;}
			public List<Process.PluginDescribeResult.InputParameter> InputParameters {get; set;}
			public String Name {get; set;}
			public List<Process.PluginDescribeResult.OutputParameter> OutputParameters {get; set;}
			public String Tag {get; set;}

			public class InputParameter {
				public InputParameter(String name, String description, Process.PluginDescribeResult.ParameterType parameterType, Boolean required);
				public InputParameter(String name, Process.PluginDescribeResult.ParameterType parameterType, Boolean required);
				public String Description {get; set;}
				public String Name {get; set;}
				public Process.PluginDescribeResult.ParameterType ParameterType {get; set;}
				public Boolean Required {get; set;}
			}

			public class OutputParameter {
				public OutputParameter(String name, String description, Process.PluginDescribeResult.ParameterType parameterType);
				public OutputParameter(String name, Process.PluginDescribeResult.ParameterType parameterType);
				public String Description {get; set;}
				public String Name {get; set;}
				public Process.PluginDescribeResult.ParameterType ParameterType {get; set;}
			}
		}

		public class PluginRequest {
			public MAP<String,ANY> inputParameters {get; set;}
		}

		public class PluginResult {
			public MAP<String, ANY> outputParameters {get; set;}
		}
	}

	public enum JSONToken {
		END_ARRAY,
		END_OBJECT,
		FIELD_NAME,
		NOT_AVAILABLE,
		START_ARRAY,
		START_OBJECT,
		VALUE_EMBEDDED_OBJECT,
		VALUE_FALSE,
		VALUE_NULL,
		VALUE_NUMBER_FLOAT,
		VALUE_NUMBER_INT,
		VALUE_STRING,
		VALUE_TRUE
	}

	public class Limits {
		public static Integer getAggregateQueries();
		public static Integer getLimitAggregateQueries();
		public static Integer getCallouts();
		public static Integer getLimitCallouts();
		public static Integer getChildRelationshipsDescribes();
		public static Integer getLimitChildRelationshipsDescribes();
		public static Integer getCpuTime();
		public static Integer getLimitCpuTime();
		public static Integer getDMLRows();
		public static Integer getLimitDMLRows();
		public static Integer getDMLStatements();
		public static Integer getLimitDMLStatements();
		public static Integer getEmailInvocations();
		public static Integer getLimitEmailInvocations();
		public static Integer getFieldsDescribes();
		public static Integer getLimitFieldsDescribes();
		public static Integer getFieldSetsDescribes();
		public static Integer getLimitFieldSetsDescribes();
		public static Integer getFindSimilarCalls();
		public static Integer getLimitFindSimilarCalls();
		public static Integer getFutureCalls();
		public static Integer getLimitFutureCalls();
		public static Integer getHeapSize();
		public static Integer getLimitHeapSize();
		public static Integer getMobilePushApexCalls();
		public static Integer getLimitMobilePushApexCalls();
		public static Integer getQueries();
		public static Integer getLimitQueries();
		public static Integer getPicklistDescribes();
		public static Integer getLimitPicklistDescribes();
		public static Integer getQueryLocatorRows();
		public static Integer getLimitQueryLocatorRows();
		public static Integer getQueryRows();
		public static Integer getLimitQueryRows();
		public static Integer getRecordTypesDescribes();
		public static Integer getLimitRecordTypesDescribes();
		public static Integer getRunAs();
		public static Integer getLimitRunAs();
		public static Integer getSavepointRollbacks();
		public static Integer getLimitSavepointRollbacks();
		public static Integer getSavepoints();
		public static Integer getLimitSavepoints();
		public static Integer getScriptStatements();
		public static Integer getLimitScriptStatements();
		public static Integer getSoslQueries();
		public static Integer getLimitSoslQueries();
	}

	public class List {
		public List();
		public List(List listToCopy);
		public List(Set setToCopy);
		public Void add(T1 listElement);
		public Void add(Integer index, T1 listElement);
		public Void addAll(List fromList);
		public Void addAll(Set fromSet);
		public Void clear();
		public List<T1> clone();
		public List<T1> deepClone(Boolean opt_preserve_id, Boolean opt_preserve_readonly_timestamps, Boolean opt_preserve_autonumber);
		public Boolean equals(List list2);
		public T1 get(Integer index);
		public Schema.SObjectType getSObjectType();
		public Integer hashCode();
		public Boolean isEmpty();
		public Iterator iterator();
		public T1 remove(Integer index);
		public Void set(Integer index, T1 listElement);
		public Integer size();
		public Void sort();
	}

	public class Long {
		public String format();
		public Integer intValue();
		public static Long valueOf(String toLong);
	}

	public class Map {
		public Map();
		public Map(Map mapToCopy);
		public Map(List<sObject> recordList);
		public Void clear();
		public Map<T1, T2> clone();
		public Boolean containsKey(T1 key);
		public Map<T1, T2> deepClone();
		public Boolean equals(Map map2);
		public T2 get(T1 key);
		public Schema.SObjectType getSObjectType();
		public Integer hashCode();
		public Boolean isEmpty();
		public Set<T1> keySet();
		public T2 put(T1 key, T2 value);
		public Void putAll(Map fromMap);
		public putAll(sObject[] sobjectArray);
		public T2 remove(T1 key);
		public Integer size();
		public List<T2> values();
	}

	public class Matcher {
		public Integer end();
		public Integer end(Integer groupIndex);
		public Boolean find();
		public Boolean find(Integer group);
		public String group();
		public String group(Integer groupIndex);
		public Integer groupCount();
		public Boolean hasAnchoringBounds();
		public Boolean hasTransparentBounds();
		public Boolean hitEnd();
		public Boolean lookingAt();
		public Boolean matches();
		public Pattern pattern();
		public static String quoteReplacement(String inputString);
		public Matcher region(Integer start, Integer end);
		public Integer regionEnd();
		public Integer regionStart();
		public String replaceAll(String replacementString);
		public String replaceFirst(String replacementString);
		public Boolean requireEnd();
		public Matcher reset();
		public Matcher reset(String inputSequence);
		public Integer start();
		public Integer start(Integer groupIndex);
		public Matcher useAnchoringBounds(Boolean anchoringBounds);
		public Matcher usePattern(Pattern pattern);
		public Matcher useTransparentBounds(Boolean transparentBounds);
	}

	public class Math {
		public static Decimal abs(Decimal d);
		public static Double abs(Double d);
		public static Integer abs(Integer i);
		public static Long abs(Long l);
		public static Decimal acos(Decimal d);
		public static Double acos(Double d);
		public static Decimal asin(Decimal d);
		public static Double asin(Double d);
		public static Decimal atan(Decimal d);
		public static Double atan(Double d);
		public static Decimal atan2(Decimal x, Decimal y);
		public static Double atan2(Double x, Double y);
		public static Decimal cbrt(Decimal d);
		public static Double cbrt(Double d);
		public static Decimal ceil(Decimal d);
		public static Double ceil(Double d);
		public static Decimal cos(Decimal d);
		public static Double cos(Double d);
		public static Decimal cosh(Decimal d);
		public static Double cosh(Double d);
		public static Decimal exp(Decimal d);
		public static Double exp(Double d);
		public static Decimal floor(Decimal d);
		public static Double floor(Double d);
		public static Decimal log(Decimal d);
		public static Double log(Double d);
		public static Decimal log10(Decimal d);
		public static Double log10(Double d);
		public static Decimal max(Decimal d1, Decimal d2);
		public static Double max(Double d1, Double d2);
		public static Integer max(Integer i1, Integer i2);
		public static Long max(Long l1, Long l2);
		public static Decimal min(Decimal d1, Decimal d2);
		public static Double min(Double d1, Double d2);
		public static Integer min(Integer i1, Integer i2);
		public static Long min(Long l1, Long l2);
		public static Integer mod(Integer i1, Integer i2);
		public static Long mod(Long L1, Long L2);
		public static Double pow(Double d, Double exp);
		public static Double random();
		public static Decimal rint(Decimal d);
		public static Double rint(Double d);
		public static Integer round(Double d);
		public static Integer round(Decimal d);
		public static Long roundToLong(Decimal d);
		public static Long roundToLong(Double d);
		public static Decimal signum(Decimal d);
		public static Double signum(Double d);
		public static Decimal sin(Decimal d);
		public static Double sin(Double d);
		public static Decimal sinh(Decimal d);
		public static Double sinh(Double d);
		public static Decimal sqrt(Decimal d);
		public static Double sqrt(Double d);
		public static Decimal tan(Decimal d);
		public static Double tan(Double d);
		public static Decimal tanh(Decimal d);
		public static Double tanh(Double d);
	}

	public class Messaging {
		public Void reserveMassEmailCapacity(Integer amountReserved);
		public Void reserveSingleEmailCapacity(Integer amountReserved);
		public Messaging.SendEmailResult[] sendEmail(Messaging.Email[] emails, Boolean allOrNothing);
		public Messaging.SendEmailResult[] sendEmailMessage(List <ID> emailMessageIds, Boolean allOrNothing);

		public class Email {
			public Void setBccSender(Boolean bcc);
			public Void setReplyTo(String replyAddress);
			public Void setTemplateID(ID templateID);
			public Void setSaveAsActivity(Boolean saveAsActivity);
			public Void setSenderDisplayName(String displayName);
			public Void setUseSignature(Boolean useSignature);
		}

		public class EmailFileAttachment {
			public EmailFileAttachment();
			public Void setBody(Blob attachment);
			public Void setContentType(String content_type);
			public Void setFileName(String file_name);
			public Void setInline(Boolean contentDisposition);
		}

		public class InboundEmail {
			public InboundEmail();
			public InboundEmail.BinaryAttachment[] binaryAttachments {get; set;}
			public String[] ccAddresses {get; set;}
			public String fromAddress {get; set;}
			public String fromName {get; set;}
			public InboundEmail.Header[] headers {get; set;}
			public String htmlBody {get; set;}
			public Boolean htmlBodyIsTruncated {get; set;}
			public String inReplyTo {get; set;}
			public String messageId {get; set;}
			public String plainTextBody {get; set;}
			public Boolean plainTextBodyIsTruncated {get; set;}
			public String[] references {get; set;}
			public String replyTo {get; set;}
			public String subject {get; set;}
			public InboundEmail.TextAttachment[] textAttachments {get; set;}
			public String[] toAddresses {get; set;}

			public class BinaryAttachment {
				public BinaryAttachment();
				public Blob body {get; set;}
				public String fileName {get; set;}
				public String mimeTypeSubType {get; set;}
			}

			public class TextAttachment {
				public TextAttachment();
				public String body {get; set;}
				public Boolean bodyIsTruncated {get; set;}
				public String charset {get; set;}
				public String fileName {get; set;}
				public String mimeTypeSubType {get; set;}
			}

			public class Header {
				public String name {get; set;}
				public String value {get; set;}
			}
		}

		public class InboundEmailResult {
			public String message {get; set;}
			public Boolean success {get; set;}
		}

		public class InboundEnvelope {
			public String fromAddress {get; set;}
			public String toAddress {get; set;}
		}

		public class MassEmailMessage {
			public MassEmailMessage();
			public Void setDescription(String description);
			public Void setTargetObjectIds(ID[] targetObjectIds);
			public Void setWhatIds(ID[] whatIds);
		}

		public class PushNotification {
			public PushNotification();
			public PushNotification(Map<String, Object> payload);
			public void send(String application, Set<String> users);
			public void setPayload(Map<String, Object> payload);
			public void setTtl(Integer ttl);
		}

		public class PushNotificationPayload {
			public static Map<String, Object> apple(String alert, String sound, Integer badgeCount, Map<String, Object> userData);
			public static Map<String, Object> apple(String alertBody, String actionLocKey, String locKey, String[] locArgs, String launchImage, String sound, Integer badgeCount, Map<String, Object> userData);
		}

		public class SendEmailError {
			public String[] getFields();
			public String getMessage();
			public System.StatusCode getStatusCode();
			public String getTargetObjectId();
		}

		public class SendEmailResult {
			public SendEmailError[] getErrors();
			public Boolean isSuccess();
		}

		public class SingleEmailMessage {
			public SingleEmailMessage();
			public Void setBccAddresses(String[] bccAddresses);
			public Void setCcAddresses(String[] ccAddresses);
			public Void setCharset(String charset);
			public Void setDocumentAttachments(ID[] docAttachments);
			public Void setFileAttachments(EmailFileAttachment[] fileAttachments);
			public Void setHtmlBody(String htmlBody);
			public Void setInReplyTo(String inReplyTo);
			public Void setPlainTextBody(String plainTextBody);
			public Void setOrgWideEmailAddressId(ID emailAddressId);
			public Void setReferences(String references);
			public Void setSubject(String subject);
			public Void setTargetObjectId(ID targetObjectId);
			public Void setToAddresses(String[] toAddresses);
			public Void setWhatId(ID whatId);
		}
	}

	public class MultiStaticResourceCalloutMock {
		public MultiStaticResourceCalloutMock();
		public Void setHeader(String headerName, String headerValue);
		public Void setStaticResource(String endpoint, String resourceName);
		public Void setStatus(String httpStatus);
		public Void setStatusCode(Integer httpStatusCode);
	}

	public class Network {
		public Network();
		public String getNetworkId();
		public String communitiesLanding();
		public PageReference forwardToAuthPage(String startURL);
	}

	public class PageReference { 
		public PageReference(String partialURL);
		public PageReference(SObject record);
		public String getAnchor();
		public Blob getContent();
		public Blob getContentAsPDF();
		public Map<String, System.Cookie[]> getCookies();
		public Map<String, String> getHeaders();
		public Map<String, String> getParameters();
		public Boolean getRedirect();
		public String getUrl();
		public System.PageReference setAnchor(String anchor);
		public Void setCookies(Cookie[] cookies);
		public System.PageReference setRedirect(Boolean redirect);
	}

	public class Pattern {
		public static Pattern compile(String regExp);
		public Matcher matcher(String regExp);
		public static Boolean matches(String regExp, String s);
		public String pattern();
		public static String quote(String s);
		public String[] split(String s);
		public String[] split(String regExp, Integer limit);
	}

	public class QuickAction {
		public static List<QuickAction.DescribeAvailableQuickActionResult> describeAvailableQuickActions(String parentType);
		public static List<QuickAction.DescribeQuickActionResult> describeAvailableQuickActions(List<String> sObjectNames);
		public static QuickAction.QuickActionResult performQuickAction(QuickAction.QuickActionRequest performQuickAction);
		public static QuickAction.QuickActionResult performQuickAction(QuickAction.QuickActionRequest performQuickAction, Boolean allOrNothing);
		public static List<QuickAction.QuickActionResult> performQuickActions(List<QuickAction.QuickActionRequest> performQuickActions);
		public static List<QuickAction.QuickActionResult> performQuickActions(List<QuickAction.QuickActionRequest> performQuickActions, Boolean allOrNothing);

		public class DescribeAvailableQuickActionResult {
			public String getLabel();
			public String getName();
			public String getType();
		}

		public class DescribeLayoutComponent {
			public Integer getDisplayLines();
			public Integer getTabOrder();
			public String getType();
			public String getValue();
		}

		public class DescribeLayoutItem {
			public String getLabel();
			public List<QuickAction.DescribeLayoutComponent> getLayoutComponents();
			public Boolean isEditable();
			public Boolean isPlaceholder();
			public Boolean isRequired();
		}

		public class DescribeLayoutRow {
			public List<QuickAction.DescribeLayoutItem> getLayoutItems();
			public Integer getNumItems();
		}

		public class DescribeLayoutSection {
			public Integer getColumns();
			public String getHeading();
			public List<QuickAction.DescribeLayoutRow> getLayoutRows();
			public Integer getRows();
			public Boolean isUseCollapsibleSection();
			public Boolean isUseHeading();
		}

		public class DescribeQuickActionDefaultValue {
			public String getDefaultValue();
			public String getField();
		}

		public class DescribeQuickActionResult {
			public String getCanvasApplicationName();
			public List<QuickAction.DescribeQuickActionDefaultValue> getDefaultValues();
			public Integer getHeight();
			public String getIconName();
			public String getIconUrl();
			public List<Schema.DescribeIconResult> getIcons();
			public String getLabel();
			public QuickAction.DescribeLayoutSection getLayout();
			public String getMiniIconUrl();
			public String getName();
			public String getSourceSobjectType();
			public String getTargetParentField();
			public String getTargetRecordTypeId();
			public String getTargetSobjectType();
			public String getType();
			public String getVisualforcePageName();
			public Integer getWidth();
		}

		public class QuickActionRequest {
			public QuickActionRequest();
			public Id getContextId();
			public String getQuickActionName();
			public SObject getRecord();
			public Void setContextId(Id contextId);
			public Void setQuickActionName(String name);
			public Void setRecord(SObject record);
		}

		public class QuickActionResult {
			public List<Database.Error> getErrors();
			public List<Id> getIds();
			public Boolean isCreated();
			public Boolean isSuccess();
		}
	}

	public class ResetPasswordResult {
		public String getPassword();
	}

	public class RestContext {
		public RestRequest request {get; set;}
		public RestResponse response {get; set;}
	}

	public class RestRequest {
		public RestRequest();
		public Map<String, String> headers {get; set;}
		public String httpMethod {get; set;}
		public Map <String, String> params {get; set;}
		public String remoteAddress {get; set;}
		public Blob requestBody {get; set;}
		public String requestURI {get; set;}
		public String resourcePath {get; set;}
		public Void addHeader(String name, String value);
		public Void addParameter(String name, String value);
	}

	public class RestResponse {
		public RestResponse();
		public Blob responseBody {get; set;}
		public Map<String, String> headers {get; set;}
		public Integer statuscode {get; set;}
		public Void addHeader(String name, String value);

	}

	public interface Schedulable {
		Void execute(SchedulableContext context);
	} 

	public interface SchedulableContext {
		Id getTriggerId();
	}

	public class Schema {
		public static Map<String, Schema.SObjectType> getGlobalDescribe();
		public static List<Schema.DescribeDataCategoryGroupResult> describeDataCategoryGroups(List<String> sObjectNames);
		public static List<Schema.DescribeSObjectResult> describeSObjects(List<String> types);
		public static List<Schema.DescribeTabSetResult> describeTabs();
		public static List<Schema.DescribeDataCategoryGroupStructureResult> describeDataCategoryGroupStructures(List<Schema.DataCategoryGroupSobjectTypePair> pairs);

		public class ChildRelationship {
			public Schema.SObjectType getChildSObject();
			public Schema.SObjectField getField();
			public String getRelationshipName();
			public Boolean isCascadeDelete();
			public Boolean isDeprecatedAndHidden();
			public Boolean isRestrictedDelete();
		}

		public class DataCategory {
			public Schema.DataCategory getChildCategories();
			public String getLabel();
			public String getName();
		}

		public class DataCategoryGroupSobjectTypePair {
			public DataCategoryGroupSobjectTypePair();
			public String getDataCategoryGroupName();
			public String getSobject();
			public String setDataCategoryGroupName(String name);
			public Void setSobject(String sObjectName);
		}

		public class DescribeColorResult {
			public String getColor();
			public String getContext();
			public String getTheme();
		}

		public class DescribeDataCategoryGroupResult {
			public Integer getCategoryCount();
			public String getDescription();
			public String getLabel();
			public String getName();
			public String getSobject();
		}

		public class DescribeDataCategoryGroupStructureResult {
			public String getDescription();
			public String getLabel();
			public String getName();
			public String getSobject();
			public List<Schema.DataCategory> getTopCategories();
		}

		public class DescribeFieldResult {
			public Integer getByteLength();
			public String getCalculatedFormula();
			public Schema.sObjectField getController();
			public Object getDefaultValue();
			public String getDefaultValueFormula();
			public Integer getDigits();
			public String getInlineHelpText();
			public String getLabel();
			public Integer getLength();
			public String getLocalName();
			public String getName();
			public List<Schema.PicklistEntry> getPicklistValues();
			public Integer getPrecision();
			public List <Schema.sObjectType> getReferenceTo();
			public String getRelationshipName();
			public Integer getRelationshipOrder();
			public Integer getScale();
			public Schema.SOAPType getSOAPType();
			public Schema.sObjectField getSObjectField();
			public Schema.DisplayType getType();
			public Boolean isAccessible();
			public Boolean isAutoNumber();
			public Boolean isCalculated();
			public Boolean isCascadeDelete();
			public Boolean isCaseSensitive();
			public Boolean isCreateable();
			public Boolean isCustom();
			public Boolean isDefaultedOnCreate();
			public Boolean isDependentPicklist();
			public Boolean isDeprecatedAndHidden();
			public Boolean isExternalID();
			public Boolean isFilterable();
			public Boolean isGroupable();
			public Boolean isHtmlFormatted();
			public Boolean isIdLookup();
			public Boolean isNameField();
			public Boolean isNamePointing();
			public Boolean isNillable();
			public Boolean isPermissionable();
			public Boolean isRestrictedDelete();
			public Boolean isRestrictedPicklist();
			public Boolean isSortable();
			public Boolean isUnique();
			public Boolean isUpdateable();
			public Boolean isWriteRequiresMasterRead();
		}

		public class DescribeIconResult {
			public String getContentType();
			public Integer getHeight();
			public String getTheme();
			public String getUrl();
			public Integer getWidth();
		}

		public class DescribeSObjectResult {
			public Schema.SObjectTypeFields fields();
			public Schema.SObjectTypeFields fieldSets();
			public Schema.ChildRelationship getChildRelationships();
			public String getKeyPrefix();
			public String getLabel();
			public String getLabelPlural();
			public String getLocalName();
			public String getName();
			public List<Schema.RecordTypeInfo> getRecordTypeInfos();
			public Schema.RecordTypeInfo getRecordTypeInfosById();
			public Schema.RecordTypeInfo getRecordTypeInfosByName();
			public Schema.SObjectType getSobjectType();
			public Boolean isAccessible();
			public Boolean isCreateable();
			public Boolean isCustom();
			public Boolean isCustomSetting();
			public Boolean isDeletable();
			public Boolean isDeprecatedAndHidden();
			public Boolean isFeedEnabled();
			public Boolean isMergeable();
			public Boolean isQueryable();
			public Boolean isSearchable();
			public Boolean isUndeletable();
			public Boolean isUpdateable();
		}

		public class DescribeTabResult {
			public List<Schema.DescribeColorResult> getColors();
			public List<Schema.DescribeIconResult> getIcons();
			public String getLabel();
			public String getMiniIconUrl();
			public String getSobjectName();
			public String getUrl();
			public Boolean isCustom();
		}

		public class DescribeTabSetResult {
			public String getLabel();
			public String getLogoUrl();
			public String getNamespace();
			public List<Schema.DescribeTabResult> getTabs();
			public Boolean isSelected();
		}

		public enum DisplayType {
			anytype,
			base64,
			Boolean,
			Combobox,
			Currency,
			DataCategoryGroupReference,
			Date,
			DateTime,
			Double,
			Email,
			EncryptedString,
			ID,
			Integer,
			MultiPicklist,
			Percent,
			Phone,
			Picklist,
			Reference,
			String,
			TextArea,
			Time,
			URL
		}

		public class FieldSet {
			public String getDescription();
			public List<FieldSetMember> getFields();
			public String getLabel();
			public String getName();
			public String getNamespace();
			public Schema.SObjectType getSObjectType();
		}

		public class FieldSetMember {
			public Boolean getDBRequired();
			public String getFieldPath();
			public String getLabel();
			public Boolean getRequired();
			public Schema.DisplayType getType();
		}

		public class PicklistEntry {
			public String getLabel();
			public String getValue();
			public Boolean isActive();
			public Boolean isDefaultValue();
		}

		public class RecordTypeInfo {
			public String getName();
			public ID getRecordTypeId();
			public Boolean isAvailable();
			public Boolean isDefaultRecordTypeMapping();
		}

		public enum SOAPType {
			anytype,
			base64binary,
			Boolean,
			Date,
			DateTime,
			Double,
			ID,
			Integer,
			String,
			Time
		}

		public class SObjectField {
			public Schema.DescribeFieldResult getDescribe();
		}

		public class SObjectType {
			public Schema.DescribeSObjectResult getDescribe();
			public sObject newSObject();
			public sObject newSObject(ID Id);
			public sObject newSObject(ID recordTypeId, Boolean loadDefaults);
		}
	}

	public class Search {
		public static sObject[] query(String query);
	}

	public class SelectOption {
		public SelectOption(String value, String label);
		public SelectOption(String value, String label, Boolean isDisabled);
		public Boolean getDisabled();
		public Boolean getEscapeItem();
		public String getLabel();
		public String getValue();
		public Void setDisabled(Boolean isDisabled);
		public Void setEscapeItem(Boolean itemsEscaped);
		public Void setLabel(String label);
		public Void setValue(String value);
	}

	public class Set {
		public Set();
		public Set(Set setToCopy);
		public Set(List listToCopy);
		public Boolean add(T1 setElement);
		public Boolean addAll(List<T1> fromList);
		public Boolean addAll(Set<T1> fromSet);
		public Void clear();
		public Set<T1> clone();
		public Boolean contains(T1 setElement);
		public Boolean containsAll(List<T1> listToCompare);
		public Boolean containsAll(Set<T1> setToCompare);
		public Boolean equals(Set<T1> set2);
		public Integer hashCode();
		public Boolean isEmpty();
		public Boolean remove(T1 setElement);
		public Boolean removeAll(List<T1> listOfElementsToRemove);
		public Boolean retainAll(List<T1> listOfElementsToRetain);
		public Boolean retainAll(Set setOfElementsToRetain);
		public Integer size();
	}

	public class Site {
		public static System.PageReference changePassword(String newpassword, String verifynewpassword, String opt_oldpassword);
		public static ID createPersonAccountPortalUser(sObject user, String ownerId, String password);
		public static ID createPersonAccountPortalUser(sObject user, String ownerId, String recordTypeId, String password);
		public static ID createPortalUser(sObject user, String accountId, String opt_password, Boolean opt_sendEmailConfirmation);
		public static Boolean forgotPassword(String username);
		public static String getAdminEmail();
		public static ID getAdminId();
		public static String getAnalyticsTrackingCode();
		public static String getCurrentSiteUrl();
		public static String getBaseCustomUrl();
		public static String getBaseInsecureUrl();
		public static String getBaseRequestUrl();
		public static String getBaseSecureUrl();
		public static String getBaseUrl();
		public static String getCustomWebAddress();
		public static String getDomain();
		public static String getErrorDescription();
		public static String getErrorMessage();
		public static String getMasterLabel();
		public static String getName();
		public static String getOriginalUrl();
		public static String getPathPrefix();
		public static String getPrefix();
		public static String getSiteId();
		public static System.PageReference getTemplate();
		public static String getSiteType();
		public static String getSyteTypeLabel();
		public static Boolean isLoginEnabled();
		public static Boolean isPasswordExpired();
		public static Boolean isRegistrationEnabled();
		public static System.PageReference login(String username, String password, String startUrl);
		public static Void setPortalUserAsAuthProvider(sObject user, String contactId);

		public interface UrlRewriter {
			System.PageReference[] generateUrlFor(System.PageReference[] urls);
			System.PageReference mapRequestUrl(System.PageReference url);
		}
	}

	public class sObject {
		public Void addError(String errorMsg);
		public Void addError(String errorMsg, Boolean escape);
		public Void addError(Exception exceptionError);
		public Void addError(Exception exceptionError, Boolean escape);
		public Void addError(String errorMsg);
		public Void addError(String errorMsg, Boolean escape);
		public Void clear();
		public sObject clone(Boolean opt_preserve_id, Boolean opt_IsDeepClone, Boolean opt_preserve_readonly_timestamps, Boolean opt_preserve_autonumber);
		public Object get(String fieldName);
		public Object get(Schema.sObjectField field);
		public Database.DMLOptions getOptions();
		public sObject getSObject(String fieldName);
		public sObject getSObject(Schema.SObjectField fieldName);
		public sObject[] getSObjects(String fieldName);
		public sObject[] getSObjects(Schema.SObjectType fieldName);
		public Schema.SObjectType getSObjectType();
		public String getQuickActionName();
		public Object put(String fieldName, Object value);
		public Object put(Schema.SObjectField fieldName, Object value);
		public sObject putSObject(String fieldName, sObject value);
		public sObject putSObject(Schema.sObjectType fieldName, sObject value);
		public Void setOptions(database.DMLOptions DMLOptions);
	}

	public class StaticResourceCalloutMock {
		public StaticResourceCalloutMock();
		public Void setHeader(String headerName, String headerValue);
		public Void setStaticResource(String resourceName);
		public Void setStatus(String httpStatus);
		public Void setStatusCode(Integer httpStatusCode);
	}

	public class String {
		public String abbreviate(Integer maxWidth);
		public String abbreviate(Integer maxWidth, Integer offset);
		public String capitalize();
		public String center(Integer size);
		public String center(Integer size, String padStr);
		public Integer charAt(Integer index);
		public Integer codePointAt(Integer index);
		public Integer codePointBefore(Integer index);
		public Integer codePointCount(Integer beginIndex, Integer endIndex);
		public Integer compareTo(String compString);
		public Boolean contains(String compString);
		public Boolean containsAny(String compString);
		public Boolean containsIgnoreCase(String compString);
		public Boolean containsNone(String compString);
		public Boolean containsOnly(String compString);
		public Boolean containsWhitespace();
		public Integer countMatches(String compString);
		public String deleteWhitespace();
		public String difference(String compString);
		public Boolean endsWith(String suffix);
		public Boolean endsWithIgnoreCase(String suffix);
		public Boolean equals(String compString);
		public Boolean equalsIgnoreCase(String compString);
		public String escapeCsv();
		public String escapeEcmaScript();
		public String escapeHtml3();
		public String escapeHtml4();
		public String escapeJava();
		public static String escapeSingleQuotes(String stringToEscape);
		public String escapeUnicode();
		public String escapeXml();
		public static String format(String stringToFormat, List<String> formattingArguments);
		public static String fromCharArray(List<Integer> charArray);
		public List<Integer> getChars();
		public static String getCommonPrefix(List<String> strings);
		public Integer getLevenshteinDistance(String stringToCompare);
		public Integer getLevenshteinDistance(String stringToCompare, Integer threshold);
		public Integer hashCode();
		public Integer indexOf(String subString);
		public Integer indexOf(String substring, Integer index);
		public Integer indexOfAny(String substring);
		public Integer indexOfAnyBut(String substring);
		public Integer indexOfChar(Integer character);
		public Integer indexOfChar(Integer character, Integer startIndex);
		public Integer indexOfDifference(String stringToCompare);
		public Integer indexOfIgnoreCase(String substring);
		public Integer indexOfIgnoreCase(String substring, Integer startPosition);
		public Boolean isAllLowerCase();
		public Boolean isAllUpperCase();
		public Boolean isAlpha();
		public Boolean isAlphaSpace();
		public Boolean isAlphanumeric();
		public Boolean isAlphanumericSpace();
		public Boolean isAsciiPrintable();
		public static Boolean isBlank(String inputString);
		public static Boolean isEmpty(String inputString);
		public static Boolean isNotBlank(String inputString);
		public static Boolean isNotEmpty(String inputString);
		public Boolean isNumeric();
		public Boolean isNumericSpace();
		public Boolean isWhitespace();
		public static String join(Object iterableObj, String separator);
		public Integer lastIndexOf(String substring);
		public Integer lastIndexOf(String substring, Integer endPosition);
		public Integer indexOfChar(Integer character);
		public Integer lastIndexOfChar(Integer character, Integer endIndex);
		public Integer lastIndexOfIgnoreCase(String substring);
		public Integer lastIndexOfIgnoreCase(String substring, Integer endPosition);
		public String left(Integer length);
		public String leftPad(Integer length);
		public Integer length();
		public String mid(Integer startIndex, Integer length);
		public String normalizeSpace();
		public Integer offsetByCodePoints(Integer index, Integer codePointOffset);
		public String remove(String substring);
		public String removeEnd(String substring);
		public String removeEndIgnoreCase(String substring);
		public String removeStart(String substring);
		public String removeStartIgnoreCase(String substring);
		public String repeat(Integer numTimes);
		public String repeat(String separator, Integer numTimes);
		public String replace(String target, String replacement);
		public String replaceAll(String regExp, String replacement);
		public String replaceFirst(String regExp, String replacement);
		public String reverse();
		public String right(Integer length);
		public String rightPad(Integer length);
		public String[] split(String regExp, Integer limit);
		public List<String> splitByCharacterType();
		public List<String> splitByCharacterTypeCamelCase();
		public Boolean startsWith(String prefix);
		public Boolean startsWithIgnoreCase(String prefix);
		public String stripHtmlTags(String htmlInput);
		public String substring(Integer startIndex);
		public String substring(Integer startIndex, Integer endIndex);
		public String substringAfter(String separator);
		public String substringAfterLast(String separator);
		public String substringBefore(String separator);
		public String substringBeforeLast(String separator);
		public String substringBetween(String tag);
		public String substringBetween(String open, String close);
		public String swapCase(String open, String close);
		public String toLowerCase();
		public String toLowerCase(String locale);
		public String toUpperCase();
		public String toUpperCase(String locale);
		public String trim();
		public String uncapitalize();
		public String unescapeCsv();
		public String unescapeEcmaScript();
		public String unescapeHtml3();
		public String unescapeHtml4();
		public String unescapeJava();
		public String unescapeUnicode();
		public String unescapeXml();
		public static String valueOf(Date dateToConvert);
		public static String valueOf(Datetime datetimeToConvert);
		public static String valueOf(Decimal decimalToConvert);
		public static String valueOf(Double doubleToConvert);
		public static String valueOf(Integer integerToConvert);
		public static String valueOf(Long longToConvert);
		public static String valueOf(Object toConvert);
		public static String valueOfGmt(Datetime datetimeToConvert);
	}

	public enum LoggingLevel {
		ERROR,
		WARN,
		INFO,
		DEBUG,
		FINE,
		FINER,
		FINEST
	}

	public class System {
		public static Void abortJob(String Job_ID);
		public static Void assert(Boolean condition, Object opt_msg);
		public static Void assertEquals(Object expected, Object actual, Object opt_msg);
		public static Void assertNotEquals(Object expected, Object actual, Object opt_msg);
		public static System.PageReference currentPageReference();
		public static Long currentTimeMillis();
		public static Void debug(Object msg);
		public static Void debug(LoggingLevel logLevel, Object msg);
		public static Boolean equals(Object obj1, Object obj2);
		public static System.ApplicationReadWriteMode getApplicationReadWriteMode();
		public static Integer hashCode(Object obj);
		public static Boolean isBatch();
		public static Boolean isFuture();
		public static Boolean isScheduled();
		public static Datetime now();
		public static List<Id> process(List<Id> WorkItemIDs, String Action, String Comments, String NextApprover);
		public static Integer purgeOldAsyncJobs(Date dt);
		public static System.Version requestVersion();
		public static System.ResetPasswordResult resetPassword(ID userID, Boolean send_user_email);
		public static Void runAs(System.Version version);
		public static Void runAs(User user_var);
		public static String schedule(String JobName, String CronExpression, Object schedulable_class);
		public static String scheduleBatch(Database.Batchable batchable, String jobName, Integer minutesFromNow);
		public static String scheduleBatch(Database.Batchable batchable, String jobName, Integer minutesFromNow, Integer scopeSize);
		public static Void setPassword(ID userID, String password);
		public static List<ID> submit(List<ID> workItemIDs, String Comments, String NextApprover);
		public static Date today();
	}

	public class Test {
		public static Id getStandardPricebookId();
		public static Boolean isRunningTest();
		public static List<sObject> loadData(Schema.SObjectType sObjectToken, String resourceName);
		public static Void setCurrentPage(PageReference page);
		public static Void setCurrentPageReference(PageReference page);
		public static Void setFixedSearchResults(ID[] opt_set_search_results);
		public static Void setMock(Type interfaceType, Object instance);
		public static Void setReadOnlyApplicationMode(Boolean application_mode);
		public static Void startTest();
		public static Void stopTest();
		public static Void testInstall(InstallHandler installImp, Version ver, Boolean isPush);
		public static Void testUninstall(UninstallHandler uninstImp);
	}

	public class Reports {
		public class AggregateColumn {
			public String getName();
			public String getLabel();
			public Reports.ColumnDataType getDataType();
			public String getAcrossGroupingContext();
			public String getDownGroupingContext();
		}

		public enum ColumnDataType {
			BOOLEAN_DATA,
			COMBOBOX_DATA,
			CURRENCY_DATA,
			DATETIME_DATA,
			DATE_DATA,
			DOUBLE_DATA,
			EMAIL_DATA,
			ID_DATA,
			INT_DATA,
			MULTIPICKLIST_DATA,
			PERCENT_DATA,
			PHONE_DATA,
			PICKLIST_DATA,
			REFERENCE_DATA,
			STRING_DATA,
			TEXTAREA_DATA,
			TIME_DATA,
			URL_DATA
		}

		public enum ColumnSortOrder {
			ASCENDING,
			DESCENDING
		}

		public enum DateGranularity {
			DAY,
			DAY_IN_MONTH,
			FISCAL_PERIOD,
			FISCAL_QUARTER,
			FISCAL_WEEK,
			FISCAL_YEAR,
			MONTH,
			MONTH_IN_YEAR,
			NONE,
			QUARTER,
			WEEK,
			YEAR
		}

		public class DetailColumn {
			public String getName();
			public String getLabel();
			public Reports.ColumnDataType getDataType();
		}

		public class Dimension {
			public LIST<Reports.GroupingValue> getGroupings();
		}

		public class FilterOperator {
			public String getLabel();
			public String getName();
		}

		public class FilterValue {
			public String getLabel();
			public String getName();
		}

		public class GroupingColumn {
			public String getName();
			public String getLabel();
			public Reports.ColumnDataType getDataType();
			public Integer getGroupingLevel();
		}

		public class GroupingInfo {
			public String getName();
			public Reports.ColumnSortOrder getSortOrder();
			public Reports.DateGranularity getDateGranularity();
			public String getSortAggregate();
		}

		public class GroupingValue {
			public LIST<Reports.GroupingValue> getGroupings();
			public String getKey();
			public String getLabel();
			public Object getValue();
		}

		public class ReportCurrency {
			public Decimal getAmount();
			public String getCurrencyCode();
		}

		public class ReportDataCell {
			public String getLabel();
			public Object getValue();
		}

		public class ReportDescribeResult {
			public Reports.ReportExtendedMetadata getReportExtendedMetadata();
			public Reports.ReportMetadata getReportMetadata();
			public Reports.ReportTypeMetadata getReportTypeMetadata();
		}

		public class ReportDetailRow {
			public LIST<Reports.ReportDataCell> getDataCells();
		}

		public class ReportExtendedMetadata {
			public MAP<String,Reports.AggregateColumn> getAggregateColumnInfo();
			public MAP<String,Reports.DetailColumn> getDetailColumnInfo();
			public MAP<String,Reports.GroupingColumn> getGroupingColumnInfo();
		}

		public class ReportFact {
			public LIST<Reports.SummaryValue> getAggregates();
			public String getKey();
		}

		public class ReportFactWithDetails {
			public LIST<Reports.SummaryValue> getAggregates();
			public String getKey();
			public LIST<Reports.ReportDetailRow> getRows();
		}

		public class ReportFilter {
			public ReportFilter();
			public ReportFilter(String column, String operator, String value);
			public String getColumn();
			public String getOperator();
			public String getValue();
			public Void setColumn(String column);
			public Void setOperator(String operator);
			public Void setValue(String value);
		}

		public enum ReportFormat {
			MATRIX,
			SUMMARY,
			TABULAR
		}

		public class ReportInstance {
			public Datetime getCompletionDate();
			public Id getId();
			public Id getOwnerId();
			public Id getReportId();
			public Reports.ReportResults getReportResults();
			public Datetime getRequestDate();
			public String getStatus();
		}

		public class ReportManager {
			public static Reports.ReportDescribeResult describeReport(Id reportId);
			public static MAP<String,LIST<Reports.FilterOperator>> getDatatypeFilterOperatorMap();
			public static Reports.ReportInstance getReportInstance(Id instanceId);
			public static LIST<Reports.ReportInstance> getReportInstances(Id reportId);
			public static Reports.ReportInstance runAsyncReport(Id reportId, Reports.ReportMetadata rmData, Boolean includeDetails);
			public static Reports.ReportInstance runAsyncReport(Id reportId, Boolean includeDetails);
			public static Reports.ReportInstance runAsyncReport(Id reportId, Reports.ReportMetadata rmData);
			public static Reports.ReportInstance runAsyncReport(Id reportId);
			public static Reports.ReportResults runReport(Id reportId, Reports.ReportMetadata rmData, Boolean includeDetails);
			public static Reports.ReportResults runReport(Id reportId, Boolean includeDetails);
			public static Reports.ReportResults runReport(Id reportId, Reports.ReportMetadata rmData);
			public static Reports.ReportResults runReport(Id reportId);
		}

		public class ReportMetadata {
			public LIST<String> getAggregates();
			public String getCurrencyCode();
			public LIST<String> getDetailColumns();
			public String getDeveloperName();
			public LIST<Reports.GroupingInfo> getGroupingsAcross();
			public LIST<Reports.GroupingInfo> getGroupingsDown();
			public LIST<String> getHistoricalSnapshotDates();
			public Id getId();
			public String getName();
			public String getReportBooleanFilter();
			public LIST<Reports.ReportFilter> getReportFilters();
			public Reports.ReportFormat getReportFormat();
			public Reports.ReportType getReportType();
			public Void setHistoricalSnapshotDates(LIST<String> historicalSnapshot);
			public Void setReportBooleanFilter(String reportBooleanFilter);
			public Void setReportFilters(LIST<Reports.ReportFilter> reportFilters);
		}

		public class ReportResults {
			public Boolean getAllData();
			public MAP<String,Reports.ReportFact> getFactMap();
			public Reports.Dimension getGroupingsAcross();
			public Reports.Dimension getGroupingsDown();
			public Boolean getHasDetailRows();
			public Reports.ReportExtendedMetadata getReportExtendedMetadata();
			public Reports.ReportMetadata getReportMetadata();
		}

		public class ReportType {
			public String getLabel();
			public String getType();
		}

		public class ReportTypeColumn {
			public Reports.ColumnDataType getDataType();
			public LIST<Reports.FilterValue> getFilterValues();
			public Boolean getFilterable();
			public String getLabel();
			public String getName();
		}

		public class ReportTypeColumnCategory {
			public MAP<String,Reports.ReportTypeColumn> getColumns();
			public String getLabel();
		}

		public class ReportTypeMetadata {
			public LIST<Reports.ReportTypeColumnCategory> getCategories();
		}

		public class SummaryValue {
			public String getLabel();
			public Object getValue();
		}

		public class FeatureNotSupportedException extends Exception {
		}

		public class InstanceAccessException extends Exception {
		}

		public class InvalidFilterException extends Exception {
			public List<String> getFilterErrors();
		}

		public class InvalidReportMetadataException extends Exception {
			public List<String> getReportMetadataErrors();
		}

		public class InvalidSnapshotDateException extends Exception {
			public List<String> getSnapshotDateErrors();
		}

		public class MetadataException extends Exception {
		}

		public class ReportRunException extends Exception {
		}

		public class UnsupportedOperationException extends Exception {
		}
	}

	public class Time {
		public Time addHours(Integer addlHours);
		public Time addMilliseconds(Integer addlMilliseconds);
		public Time addMinutes(Integer addlMinutes);
		public Time addSeconds(Integer addlSeconds);
		public Integer hour();
		public Integer millisecond();
		public Integer minute();
		public static Time newInstance(Integer hour, Integer minutes, Integer seconds, Integer milliseconds);
		public Integer second();
	}

	public class TimeZone {
		public String getDisplayName();
		public String getID();
		public Integer getOffset(Datetime date);
		public static TimeZone getTimeZone(String Id);
		public String toString();
	}

	public class Type {
		public Boolean equals(Object toCompare);
		public static System.Type forName(String fullyQualifiedName);
		public static System.Type forName(String namespace, String name);
		public String getName();
		public Integer hashCode();
		public Object newInstance();
		public String toString();

	}

	public interface UninstallHandler {
		Void onUninstall(UninstallContext context);
	}

	public class URL {
		public Url(String spec);
		public Url(Url context, String spec);
		public Url(String protocol, String host, String file);
		public Url(String protocol, String host, Integer port, String file);
		public String getAuthority();
		public static System.URL getCurrentRequestUrl();
		public Integer getDefaultPort();
		public String getFile();
		public static String getFileFieldURL(String entityId, String fieldName);
		public String getHost();
		public String getPath();
		public Integer getPort();
		public String getProtocol();
		public String getQuery();
		public String getRef();
		public static System.URL getSalesforceBaseUrl();
		public String getUserInfo();
		public Boolean sameFile(System.URL URLToCompare);
		public String toExternalForm();
	}

	public class UserInfo {
		public static String getDefaultCurrency();
		public static String getFirstName();
		public static String getLanguage();
		public static String getLastName();
		public static String getLocale();
		public static String getName();
		public static String getOrganizationId();
		public static String getOrganizationName();
		public static String getProfileId();
		public static String getSessionId();
		public static System.TimeZone getTimeZone();
		public static String getUiTheme();
		public static String getUiThemeDisplayed();
		public static String getUserEmail();
		public static String getUserId();
		public static String getUserName();
		public static String getUserRoleId();
		public static String getUserType();
		public static Boolean isCurrentUserLicensed(String namespace);
		public static Boolean isMultiCurrencyOrganization();
	}

	public class Version {
		public Version(Integer major, Integer minor);
		public Version(Integer major, Integer minor, Integer patch);
		public Integer compareTo(System.Version version);
		public Integer major();
		public Integer minor();
		public Integer patch();
	}

	public interface WebServiceMock {
		Void doInvoke(Object stub, Object request, Map<String, Object> response, String endpoint, String soapAction, String requestName, String responseNS, String responseName, String responseType);
	}

	public enum XmlTag {
		ATTRIBUTE,
		CDATA,
		CHARACTERS,
		COMMENT,
		DTD,
		END_DOCUMENT,
		END_ELEMENT,
		ENTITY_DECLARATION,
		ENTITY_REFERENCE,
		NAMESPACE,
		NOTATION_DECLARATION,
		PROCESSING_INSTRUCTION,
		SPACE,
		START_DOCUMENT,
		START_ELEMENT
	}

	public class XmlStreamReader {
		public XmlStreamReader(String xmlInput);
		public Integer getAttributeCount();
		public String getAttributeLocalName(Integer index);
		public String getAttributeNamespace(Integer index);
		public String getAttributePrefix(Integer index);
		public String getAttributeType(Integer index);
		public String getAttributeValue(String namespaceURI, String localName);
		public String getAttributeValueAt(Integer index);
		public System.XmlTag getEventType();
		public String getLocalName();
		public String getLocation();
		public String getNamespace();
		public Integer getNamespaceCount();
		public String getNamespacePrefix(Integer index);
		public String getNamespaceURI(String Prefix);
		public String getNamespaceURIAt(Integer Index);
		public String getPIData();
		public String getPITarget();
		public String getPrefix();
		public String getText();
		public String getVersion();
		public Boolean hasName();
		public Boolean hasNext();
		public Boolean hasText();
		public Boolean isCharacters();
		public Boolean isEndElement();
		public Boolean isStartElement();
		public Boolean isWhiteSpace();
		public Integer next();
		public Integer nextTag();
		public Void setCoalescing(Boolean returnAsSingleBlock);
		public Void setNamespaceAware(Boolean isNamespaceAware);
		public String toString();
	}

	public class XmlStreamWriter {
		public XmlStreamWriter();
		public Void close();
		public String getXmlString();
		public Void setDefaultNamespace(String URI);
		public Void writeAttribute(String prefix, String namespaceURI, String localName, String value);
		public Void writeCData(String data);
		public Void writeCharacters(String text);
		public Void writeComment(String data);
		public Void writeDefaultNamespace(String namespaceURI);
		public Void writeEmptyElement(String prefix, String localName, String namespaceURI);
		public Void writeEndDocument();
		public Void writeEndElement();
		public Void writeNamespace(String prefix, String namespaceURI);
		public Void writeProcessingInstruction(String target, String data);
		public Void writeStartDocument(String encoding, String version);
		public Void writeStartElement(String prefix, String localName, String namespaceURI);
	}

	public class Support {
		public interface EmailTemplateSelector {
			ID getDefaultTemplateId(ID caseId);
		}

		public interface MilestoneTriggerTimeCalculator {
			Integer calculateMilestoneTriggerTime(String caseId, String milestoneTypeId);
		}
	}
}