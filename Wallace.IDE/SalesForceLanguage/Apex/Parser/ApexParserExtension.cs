/*
 * Copyright (c) 2014 Nathaniel Wallace
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

using System;
using System.Collections.Generic;
using SalesForceLanguage.Apex.CodeModel;

namespace SalesForceLanguage.Apex.Parser
{
    /// <summary>
    /// Adds methods to the ApexParser class which is auto generated by gppg.
    /// </summary>
    public partial class ApexParser
    {
        #region Fields

        /// <summary>
        /// Holds parser errors that have occured.
        /// </summary>
        private List<LanguageError> _errors;

        #endregion

        #region Constructors

        /// <summary>
        /// Constructor.
        /// </summary>
        /// <param name="scanner">Scanner passed to the parser base class.</param>
        public ApexParser(ApexLexer scanner) 
            : base(scanner)
        {
            _errors = new List<LanguageError>();
            SymbolDocument = null;
        }

        /// <summary>
        /// Constructor.
        /// </summary>
        /// <param name="scanner">Scanner passed to the parser base class.</param>
        /// <param name="symbolDocument">SymbolDocument.</param>
        public ApexParser(ApexLexer scanner, TextSymbolDocument symbolDocument)
            : base(scanner)
        {
            _errors = new List<LanguageError>();
            SymbolDocument = symbolDocument;
        }

        #endregion

        #region Properties

        /// <summary>
        /// The document to add symbols to.
        /// </summary>
        public TextSymbolDocument SymbolDocument { get; set; }

        /// <summary>
        /// Errors that occured during parsing.
        /// </summary>
        public LanguageError[] ParserErrors
        {
            get { return _errors.ToArray(); }
        }

        /// <summary>
        /// Factory used to parse code.
        /// </summary>
        protected ApexParserFactory ParserFactory { get; set; }

        /// <summary>
        /// When a successful parse occurs this property will be set with the resulting root node of the syntax tree.
        /// </summary>
        protected ApexSyntaxNode GoalNode { get; set; }

        /// <summary>
        /// When a successful parse occurs this property will be set with the resulting elements parsed from the code.
        /// </summary>
        public ICodeElement[] Elements { get; private set; }

        #endregion

        #region Methods

        /// <summary>
        /// Parse the apex code.
        /// </summary>
        public void ParseApex()
        {
            if (SymbolDocument != null)
                ParserFactory = new ApexParserFactory(SymbolDocument);
            else
                ParserFactory = new ApexParserFactory(null);

            GoalNode = null;
            Elements = new ICodeElement[0];
            _errors = new List<LanguageError>();

            Parse();

            List<ICodeElement> elements = new List<ICodeElement>();            
            Elements = elements.ToArray();
        }

        

        /// <summary>
        /// Process the reduce.
        /// </summary>
        /// <param name="token">The token that was generated from the reduce.</param>
        /// <param name="values">The values that are being reduced.</param>
        /// <param name="valuesLength">The number of values in the values parameter.</param>
        protected override void ProcessReduce(int token, ApexSyntaxNode[] values, int valuesLength)
        {
            Tokens tokenValue = (Tokens)token;
            if (tokenValue == Tokens.error)
            {
                Error(tokenValue, "Invalid syntax.");
            }
            else
            {
                ApexSyntaxNode[] subNodes = new ApexSyntaxNode[valuesLength];
                Array.Copy(values, subNodes, valuesLength);
                CurrentSemanticValue = ParserFactory.Process(tokenValue, CurrentLocationSpan, subNodes);
            }
        }

        /// <summary>
        /// Helper method used to generate a non terminal syntax node.
        /// </summary>
        /// <param name="token">The token that identifies the node.</param>
        /// <param name="nodes">Sub nodes to this node.</param>
        /// <returns>The newly created syntax node.</returns>
        protected ApexSyntaxNode Node(Tokens token, params ApexSyntaxNode[] nodes)
        {
            return ParserFactory.Process(token, CurrentLocationSpan, nodes);
        }

        /// <summary>
        /// Helper method used to generate a syntax node on an error condition.
        /// </summary>
        /// <param name="token">The token that identifies the node.</param>
        /// <param name="message">The error message.</param>
        protected void Error(Tokens token, string message)
        {            
            TextLocation location = new TextLocation();

            ApexLexer lexer = Scanner as ApexLexer;
            if (lexer != null && lexer.PreviousNode != null)
                location = lexer.PreviousNode.TextSpan;
            else if (CurrentLocationSpan != null)
                location = CurrentLocationSpan;

            foreach (LanguageError err in ParserErrors)
                if (location.CompareTo(err.Location) == 0)
                    YYAbort();

            _errors.Add(new LanguageError(message, location));

            yyclearin();
            yyerrok();
        }

        #endregion
    }
}
