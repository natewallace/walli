/*
 * Copyright (c) 2014 Nathaniel Wallace
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

using System.Collections.Generic;
using SalesForceLanguage.Apex.CodeModel;

namespace SalesForceLanguage.Apex.Parser
{
    /// <summary>
    /// Adds methods to the ApexParser class which is auto generated by gppg.
    /// </summary>
    public partial class ApexParser
    {
        #region Fields

        /// <summary>
        /// Holds parser errors that have occured.
        /// </summary>
        private List<LanguageError> _errors;

        #endregion

        #region Constructors

        /// <summary>
        /// Constructor.
        /// </summary>
        /// <param name="scanner">Scanner passed to the parser base class.</param>
        public ApexParser(ApexLexer scanner) 
            : base(scanner)
        {
            _errors = new List<LanguageError>();
            SymbolDocument = null;
        }

        /// <summary>
        /// Constructor.
        /// </summary>
        /// <param name="scanner">Scanner passed to the parser base class.</param>
        /// <param name="symbolDocument">SymbolDocument.</param>
        public ApexParser(ApexLexer scanner, TextSymbolDocument symbolDocument)
            : base(scanner)
        {
            _errors = new List<LanguageError>();
            SymbolDocument = symbolDocument;
        }

        #endregion

        #region Properties

        /// <summary>
        /// The document to add symbols to.
        /// </summary>
        public TextSymbolDocument SymbolDocument { get; set; }

        /// <summary>
        /// Errors that occured during parsing.
        /// </summary>
        public LanguageError[] ParserErrors
        {
            get { return _errors.ToArray(); }
        }

        /// <summary>
        /// Factory used to parse code.
        /// </summary>
        protected ApexParserFactory ParserFactory { get; set; }

        /// <summary>
        /// When a successful parse occurs this property will be set with the resulting root node of the syntax tree.
        /// </summary>
        protected ApexSyntaxNode GoalNode { get; set; }

        /// <summary>
        /// When a successful parse occurs this property will be set with the resulting elements parsed from the code.
        /// </summary>
        public ICodeElement[] Elements { get; private set; }

        #endregion

        #region Methods

        /// <summary>
        /// Parse the apex code.
        /// </summary>
        public void ParseApex()
        {
            if (SymbolDocument != null)
                ParserFactory = new ApexParserFactory(SymbolDocument);
            else
                ParserFactory = new ApexParserFactory(null);

            GoalNode = null;
            Elements = new ICodeElement[0];
            _errors = new List<LanguageError>();

            Parse();

            // Construct the code model.  This top down approach will change in the future.
            List<ICodeElement> elements = new List<ICodeElement>();
            ApexSyntaxNode node = GoalNode;
            bool done = false;
            while (!done)
            {
                switch (node.Token)
                {
                    case Tokens.ProductionGoal:
                        node = node.GetChildNodeWithToken(Tokens.ProductionCompilationUnit);
                        break;

                    case Tokens.ProductionCompilationUnit:
                        node = node.GetChildNodeWithToken(Tokens.ProductionTypeDeclaration);
                        break;

                    case Tokens.ProductionTypeDeclaration:
                        node = node.Nodes[0];
                        break;

                    case Tokens.ProductionAnnotatedClassDeclaration:
                        node = node.GetChildNodeWithToken(Tokens.ProductionClassDeclaration);
                        break;

                    case Tokens.ProductionAnnotatedInterfaceDeclaration:
                        node = node.GetChildNodeWithToken(Tokens.ProductionInterfaceDeclaration);
                        break;

                    case Tokens.ProductionClassDeclaration:
                        List<ClassDeclaration> classes = new List<ClassDeclaration>();
                        ParseClassElements(node, classes);
                        foreach (ClassDeclaration c in classes)
                            elements.Add(c);
                        done = true;
                        break;

                    case Tokens.ProductionInterfaceDeclaration:
                        List<InterfaceDeclaration> interfaces = new List<InterfaceDeclaration>();
                        ParseInterfaceElements(node, interfaces);
                        foreach (InterfaceDeclaration i in interfaces)
                            elements.Add(i);
                        done = true;
                        break;

                    default:
                        node = null;                        
                        break;
                }

                if (node == null)
                    break;
            }

            Elements = elements.ToArray();
        }

        /// <summary>
        /// Parse interface node.
        /// </summary>
        /// <param name="interfaceNode">The interface node to parse.</param>
        /// <param name="elements">The elements collection to add parsed interfaces to.</param>
        private void ParseInterfaceElements(ApexSyntaxNode interfaceNode, List<InterfaceDeclaration> elements)
        {
            // methods
            ApexSyntaxNode[] methodNodes = interfaceNode.GetNodesWithToken(Tokens.ProductionAbstractMethodDeclaration);
            List<MethodDeclaration> methods = new List<MethodDeclaration>();
            foreach (ApexSyntaxNode methodNode in methodNodes)
            {
                ApexSyntaxNode methodNameNode = methodNode.GetNodeWithToken(Tokens.ProductionMethodDeclarator)
                                                          .GetNodeWithToken(Tokens.ProductionSimpleName)
                                                          .GetNodeWithText();

                ApexSyntaxNode[] methodParameterNodes = methodNode.GetNodeWithToken(Tokens.ProductionMethodDeclarator)
                                                                  .GetAllNodesWithToken(Tokens.ProductionFormalParameter);

                List<ParameterDeclaration> parameters = new List<ParameterDeclaration>();
                foreach (ApexSyntaxNode methodParameterNode in methodParameterNodes)
                {
                    ApexSyntaxNode methodParameterNameNode = methodParameterNode.GetNodeWithToken(Tokens.ProductionVariableDeclaratorId)
                                                                                .GetNodeWithText();
                    ApexSyntaxNode methodParameterTypeNode = methodParameterNode.GetNodeWithToken(Tokens.ProductionType);

                    parameters.Add(new ParameterDeclaration(
                        new NameDeclaration(methodParameterNameNode.Text, methodParameterNameNode.TextSpan),
                        methodParameterNode.TextSpan,
                        methodParameterTypeNode.GetLeavesDisplayText()));
                }

                methods.Add(new MethodDeclaration(new NameDeclaration(
                    methodNameNode.Text,
                    methodNameNode.TextSpan),
                    methodNode.TextSpan,
                    parameters.ToArray()));
            }

            // interface
            ApexSyntaxNode interfaceNameNode = interfaceNode.GetChildNodeWithToken(Tokens.ProductionSimpleName)
                                                            .GetNodeWithText();
            elements.Add(new InterfaceDeclaration(
                new NameDeclaration(interfaceNameNode.Text, interfaceNameNode.TextSpan),
                interfaceNode.TextSpan,
                methods.ToArray()));
        }

        /// <summary>
        /// Parse the class node.
        /// </summary>
        /// <param name="classNode">The class node to parse.</param>
        /// <param name="elements">The elements collection to add parsed classes to.</param>
        private void ParseClassElements(ApexSyntaxNode classNode, List<ClassDeclaration> elements)
        {
            // get inner classes
            List<ClassDeclaration> innerClasses = new List<ClassDeclaration>();
            ApexSyntaxNode[] innerClassNodes = classNode.GetNodeWithToken(Tokens.ProductionClassBody)
                                                        .GetNodesWithToken(Tokens.ProductionClassDeclaration);
            foreach (ApexSyntaxNode innerClassNode in innerClassNodes)
                ParseClassElements(innerClassNode, innerClasses);

            // get inner interfaces
            List<InterfaceDeclaration> innerInterfaces = new List<InterfaceDeclaration>();
            ApexSyntaxNode[] innerInterfaceNodes = classNode.GetNodeWithToken(Tokens.ProductionClassBody)
                                                            .GetNodesWithToken(Tokens.ProductionInterfaceDeclaration);
            foreach (ApexSyntaxNode innerInterfaceNode in innerInterfaceNodes)
            {
                bool canParse = true;
                foreach (ClassDeclaration innerClass in innerClasses)
                {
                    if (innerClass.Location.ContainsLocation(innerInterfaceNode.TextSpan))
                    {
                        canParse = false;
                        break;
                    }
                }

                if (canParse)
                    ParseInterfaceElements(innerInterfaceNode, innerInterfaces);
            }

            // fields
            ApexSyntaxNode[] fieldNodes = classNode.GetNodesWithToken(Tokens.ProductionFieldDeclaration);
            List<FieldDeclaration> fields = new List<FieldDeclaration>();
            foreach (ApexSyntaxNode fieldNode in fieldNodes)
            {
                foreach (ApexSyntaxNode fieldNameNode in fieldNode.GetAllNodesWithToken(Tokens.ProductionVariableDeclaratorId))
                {
                    ApexSyntaxNode fieldNameTextNode = fieldNameNode.GetNodeWithText();
                    fields.Add(new FieldDeclaration(new NameDeclaration(
                        fieldNameTextNode.Text,
                        fieldNameTextNode.TextSpan),
                        fieldNode.TextSpan));
                }
            }

            // constructors
            ApexSyntaxNode[] constructorNodes = classNode.GetNodesWithToken(Tokens.ProductionConstructorDeclaration);
            List<ConstructorDeclaration> constructors = new List<ConstructorDeclaration>();
            foreach (ApexSyntaxNode constructorNode in constructorNodes)
            {
                ApexSyntaxNode constructorNameNode = constructorNode.GetNodeWithToken(Tokens.ProductionConstructorDeclarator)
                                                                    .GetNodeWithToken(Tokens.ProductionName)
                                                                    .GetNodeWithText();

                ApexSyntaxNode[] constructorParameterNodes = constructorNode.GetNodeWithToken(Tokens.ProductionConstructorDeclarator)
                                                                            .GetAllNodesWithToken(Tokens.ProductionFormalParameter);

                List<ParameterDeclaration> parameters = new List<ParameterDeclaration>();
                foreach (ApexSyntaxNode constructorParameterNode in constructorParameterNodes)
                {
                    ApexSyntaxNode constructorParameterNameNode = constructorParameterNode.GetNodeWithToken(Tokens.ProductionVariableDeclaratorId)
                                                                                          .GetNodeWithText();
                    ApexSyntaxNode constructorParameterTypeNode = constructorParameterNode.GetNodeWithToken(Tokens.ProductionType);

                    parameters.Add(new ParameterDeclaration(
                        new NameDeclaration(constructorParameterNameNode.Text, constructorParameterNameNode.TextSpan),
                        constructorParameterNode.TextSpan,
                        constructorParameterTypeNode.GetLeavesDisplayText()));
                }

                constructors.Add(new ConstructorDeclaration(new NameDeclaration(
                    constructorNameNode.Text,
                    constructorNameNode.TextSpan),
                    constructorNode.TextSpan,
                    parameters.ToArray()));
            }

            // properties
            ApexSyntaxNode[] propertyNodes = classNode.GetNodesWithToken(Tokens.ProductionPropertyDeclaration);
            List<PropertyDeclaration> properties = new List<PropertyDeclaration>();
            foreach (ApexSyntaxNode propertyNode in propertyNodes)
            {
                ApexSyntaxNode propertyNameNode = propertyNode.GetChildNodeWithToken(Tokens.ProductionSimpleName)
                                                              .GetNodeWithText();
                properties.Add(new PropertyDeclaration(new NameDeclaration(
                    propertyNameNode.Text,
                    propertyNameNode.TextSpan),
                    propertyNode.TextSpan));
            }

            // methods
            ApexSyntaxNode[] methodNodes = classNode.GetNodesWithToken(Tokens.ProductionMethodDeclaration);
            List<MethodDeclaration> methods = new List<MethodDeclaration>();
            foreach (ApexSyntaxNode methodNode in methodNodes)
            {
                ApexSyntaxNode methodNameNode = methodNode.GetNodeWithToken(Tokens.ProductionMethodDeclarator)
                                                          .GetNodeWithToken(Tokens.ProductionSimpleName)
                                                          .GetNodeWithText();

                ApexSyntaxNode[] methodParameterNodes = methodNode.GetNodeWithToken(Tokens.ProductionMethodDeclarator)
                                                                  .GetAllNodesWithToken(Tokens.ProductionFormalParameter);

                List<ParameterDeclaration> parameters = new List<ParameterDeclaration>();
                foreach (ApexSyntaxNode methodParameterNode in methodParameterNodes)
                {
                    ApexSyntaxNode methodParameterNameNode = methodParameterNode.GetNodeWithToken(Tokens.ProductionVariableDeclaratorId)
                                                                                .GetNodeWithText();
                    ApexSyntaxNode methodParameterTypeNode = methodParameterNode.GetNodeWithToken(Tokens.ProductionType);

                    parameters.Add(new ParameterDeclaration(
                        new NameDeclaration(methodParameterNameNode.Text, methodParameterNameNode.TextSpan),
                        methodParameterNode.TextSpan,
                        methodParameterTypeNode.GetLeavesDisplayText()));
                }

                methods.Add(new MethodDeclaration(new NameDeclaration(
                    methodNameNode.Text,
                    methodNameNode.TextSpan),
                    methodNode.TextSpan,
                    parameters.ToArray()));
            }

            // class
            ApexSyntaxNode classNameNode = classNode.GetChildNodeWithToken(Tokens.ProductionSimpleName)
                                        .GetNodeWithText();
            elements.Add(new ClassDeclaration(
                new NameDeclaration(classNameNode.Text, classNameNode.TextSpan),
                classNode.TextSpan,
                fields.ToArray(),
                constructors.ToArray(),
                properties.ToArray(),
                methods.ToArray(),
                innerClasses.ToArray(),
                innerInterfaces.ToArray()));
        }

        /// <summary>
        /// Helper method used to generate a non terminal syntax node.
        /// </summary>
        /// <param name="token">The token that identifies the node.</param>
        /// <param name="nodes">Sub nodes to this node.</param>
        /// <returns>The newly created syntax node.</returns>
        protected ApexSyntaxNode Node(Tokens token, params ApexSyntaxNode[] nodes)
        {

#if DEBUG
            // The commented out block is useful for debuging language parser failures
            //System.Text.StringBuilder sb = new System.Text.StringBuilder(this.ValueStack.ToString());
            //sb.AppendFormat(" => {0}", token);
            //System.Console.WriteLine(sb.ToString());
#endif

            return ParserFactory.Process(token, CurrentLocationSpan, nodes);
        }

        /// <summary>
        /// Helper method used to generate a syntax node on an error condition.
        /// </summary>
        /// <param name="token">The token that identifies the node.</param>
        /// <param name="message">The error message.</param>
        protected void Error(Tokens token, string message)
        {            
            TextLocation location = new TextLocation();

            ApexLexer lexer = Scanner as ApexLexer;
            if (lexer != null && lexer.PreviousNode != null)
                location = lexer.PreviousNode.TextSpan;
            else if (CurrentLocationSpan != null)
                location = CurrentLocationSpan;

            foreach (LanguageError err in ParserErrors)
                if (location.CompareTo(err.Location) == 0)
                    YYAbort();

            _errors.Add(new LanguageError(message, location));

            yyclearin();
            yyerrok();
        }

        #endregion
    }
}
