// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.0
// Machine:  OFFICEDESKTOP
// DateTime: 7/28/2014 9:03:26 PM
// UserName: Nate
// Input file <C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y - 7/28/2014 9:03:22 PM>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace SalesForceLanguage.Apex.Parser
{
public enum Tokens {
    error=1,EOF=2,IDENTIFIER=3,WHITESPACE=4,SOQL=5,SOSL=6,
    COMMENT_DOC=7,COMMENT_BLOCK=8,COMMENT_INLINE=9,COMMENT_DOCUMENTATION=10,KEYWORD_ABSTRACT=11,KEYWORD_AFTER=12,
    KEYWORD_ANNOTATE=13,KEYWORD_BEFORE=14,KEYWORD_BLOB=15,KEYWORD_BOOLEAN=16,KEYWORD_BREAK=17,KEYWORD_CATCH=18,
    KEYWORD_CLASS=19,KEYWORD_CONTINUE=20,KEYWORD_DATE=21,KEYWORD_DATETIME=22,KEYWORD_DECIMAL=23,KEYWORD_DELETE=24,
    KEYWORD_DO=25,KEYWORD_DOUBLE=26,KEYWORD_ELSE=27,KEYWORD_ENUM=28,KEYWORD_EXTENDS=29,KEYWORD_FINAL=30,
    KEYWORD_FINALLY=31,KEYWORD_FOR=32,KEYWORD_GET=33,KEYWORD_GLOBAL=34,KEYWORD_ID=35,KEYWORD_IF=36,
    KEYWORD_IMPLEMENTS=37,KEYWORD_INSERT=38,KEYWORD_INTERFACE=39,KEYWORD_INTEGER=40,KEYWORD_LONG=41,KEYWORD_MERGE=42,
    KEYWORD_NEW=43,KEYWORD_ON=44,KEYWORD_OVERRIDE=45,KEYWORD_PRIVATE=46,KEYWORD_PROTECTED=47,KEYWORD_PUBLIC=48,
    KEYWORD_RETURN=49,KEYWORD_ROLLBACK=50,KEYWORD_SET=51,KEYWORD_STATIC=52,KEYWORD_STRING=53,KEYWORD_SUPER=54,
    KEYWORD_SYSTEM=55,KEYWORD_TESTMETHOD=56,KEYWORD_THIS=57,KEYWORD_THROW=58,KEYWORD_TRANSIENT=59,KEYWORD_TRIGGER=60,
    KEYWORD_TRY=61,KEYWORD_UNDELETE=62,KEYWORD_UPDATE=63,KEYWORD_UPSERT=64,KEYWORD_VIRTUAL=65,KEYWORD_VOID=66,
    KEYWORD_WEBSERVICE=67,KEYWORD_WHILE=68,KEYWORD_WITHSHARING=69,KEYWORD_WITHOUTSHARING=70,LITERAL_TRUE=71,LITERAL_FALSE=72,
    LITERAL_DOUBLE=73,LITERAL_INTEGER=74,LITERAL_LONG=75,LITERAL_NULL=76,LITERAL_STRING=77,OPERATOR_ASSIGNMENT=78,
    OPERATOR_ASSIGNMENT_MAP=79,OPERATOR_ASSIGNMENT_ADDITION=80,OPERATOR_ASSIGNMENT_MULTIPLICATION=81,OPERATOR_ASSIGNMENT_SUBTRACTION=82,OPERATOR_ASSIGNMENT_DIVISION=83,OPERATOR_ASSIGNMENT_OR=84,
    OPERATOR_ASSIGNMENT_AND=85,OPERATOR_ASSIGNMENT_EXCLUSIVE_OR=86,OPERATOR_ASSIGNMENT_BITWISE_SHIFT_LEFT=87,OPERATOR_ASSIGNMENT_BITWISE_SHIFT_RIGHT=88,OPERATOR_ASSIGNMENT_BITWISE_SHIFT_RIGHT_UNSIGNED=89,OPERATOR_AND=90,
    OPERATOR_OR=91,OPERATOR_EQUALITY=92,OPERATOR_EQUALITY_EXACT=93,OPERATOR_LESS_THAN=94,OPERATOR_GREATER_THAN=95,OPERATOR_GREATER_THAN_A=96,
    OPERATOR_GREATER_THAN_B=97,OPERATOR_GREATER_THAN_C=98,OPERATOR_LESS_THAN_OR_EQUAL=99,OPERATOR_GREATER_THAN_OR_EQUAL=100,OPERATOR_INEQUALITY=101,OPERATOR_INEQUALITY_ALT=102,
    OPERATOR_INEQUALITY_EXACT=103,OPERATOR_ADDITION=104,OPERATOR_SUBTRACTION=105,OPERATOR_MULTIPLICATION=106,OPERATOR_DIVISION=107,OPERATOR_LOGICAL_COMPLEMENT=108,
    OPERATOR_INCREMENT=109,OPERATOR_DECREMENT=110,OPERATOR_BITWISE_AND=111,OPERATOR_BITWISE_OR=112,OPERATOR_BITWISE_EXCLUSIVE_OR=113,OPERATOR_BITWISE_SHIFT_LEFT=114,
    OPERATOR_QUESTION_MARK=115,OPERATOR_INSTANCEOF=116,SEPARATOR_PARENTHESES_LEFT=117,SEPARATOR_PARENTHESES_RIGHT=118,SEPARATOR_BRACE_LEFT=119,SEPARATOR_BRACE_RIGHT=120,
    SEPARATOR_BRACKET_LEFT=121,SEPARATOR_BRACKET_RIGHT=122,SEPARATOR_BRACKET_EMPTY=123,SEPARATOR_SEMICOLON=124,SEPARATOR_COLON=125,SEPARATOR_COMMA=126,
    SEPARATOR_DOT=127,RESERVED_ACTIVATE=128,RESERVED_ANY=129,RESERVED_ARRAY=130,RESERVED_ASC=131,RESERVED_AUTONOMOUS=132,
    RESERVED_BEGIN=133,RESERVED_BIGDECIMAL=134,RESERVED_BULK=135,RESERVED_BYTE=136,RESERVED_CAST=137,RESERVED_CHAR=138,
    RESERVED_COLLECT=139,RESERVED_COMMIT=140,RESERVED_CONST=141,RESERVED_DEFAULT=142,RESERVED_DESC=143,RESERVED_END=144,
    RESERVED_EXIT=145,RESERVED_EXPORT=146,RESERVED_FLOAT=147,RESERVED_FROM=148,RESERVED_GOTO=149,RESERVED_GROUP=150,
    RESERVED_HAVING=151,RESERVED_HINT=152,RESERVED_IMPORT=153,RESERVED_IN=154,RESERVED_INNER=155,RESERVED_INT=156,
    RESERVED_INTO=157,RESERVED_JOIN=158,RESERVED_LIKE=159,RESERVED_LIMIT=160,RESERVED_LOOP=161,RESERVED_NOT=162,
    RESERVED_NULLS=163,RESERVED_NUMBER=164,RESERVED_OBJECT=165,RESERVED_OF=166,RESERVED_ON=167,RESERVED_OR=168,
    RESERVED_OUTER=169,RESERVED_PACKAGE=170,RESERVED_PARALLEL=171,RESERVED_PRAGMA=172,RESERVED_RETRIEVE=173,RESERVED_RETURNING=174,
    RESERVED_SEARCH=175,RESERVED_SELECT=176,RESERVED_SHORT=177,RESERVED_SORT=178,RESERVED_STAT=179,RESERVED_SWITCH=180,
    RESERVED_SYNCHRONIZED=181,RESERVED_THEN=182,RESERVED_TRANSACTION=183,RESERVED_TYPE=184,RESERVED_USING=185,RESERVED_WHEN=186,
    RESERVED_WHERE=187,ProductionAbstractMethodDeclaration=188,ProductionAccessorBody=189,ProductionAccessorDeclarations=190,ProductionAdditiveExpression=191,ProductionAndExpression=192,
    ProductionAnnotation=193,ProductionAnnotatedClassDeclaration=194,ProductionAnnotatedEnumDeclaration=195,ProductionAnnotatedFieldDeclaration=196,ProductionAnnotatedInterfaceDeclaration=197,ProductionAnnotatedMethodDeclaration=198,
    ProductionAnnotations=199,ProductionArgumentList=200,ProductionArrayAccess=201,ProductionArrayCreationExpression=202,ProductionArrayInitializer=203,ProductionArrayType=204,
    ProductionAssignment=205,ProductionAssignmentExpression=206,ProductionAssignmentOperator=207,ProductionMapArgumentAssignment=208,ProductionMapArgumentAssignmentList=209,ProductionBlock=210,
    ProductionBlockStatement=211,ProductionBlockStatements=212,ProductionBreakStatement=213,ProductionCatchClause=214,ProductionCatches=215,ProductionClassBody=216,
    ProductionClassBodyDeclaration=217,ProductionClassBodyDeclarations=218,ProductionClassDeclaration=219,ProductionClassInstanceCreationExpression=220,ProductionClassMemberDeclaration=221,ProductionCastExpression=222,
    ProductionCollectionType=223,ProductionCompilationUnit=224,ProductionConditionalAndExpression=225,ProductionConditionalExpression=226,ProductionConditionalOrExpression=227,ProductionConstantExpression=228,
    ProductionConstructorBody=229,ProductionConstructorDeclaration=230,ProductionConstructorDeclarator=231,ProductionContinueStatement=232,ProductionDimExpr=233,ProductionDimExprs=234,
    ProductionDims=235,ProductionDMLStatement=236,ProductionDoStatement=237,ProductionEmptyStatement=238,ProductionEnumBody=239,ProductionEnumDeclaration=240,
    ProductionEnumMemberDeclaration=241,ProductionEnumMemberDeclarations=242,ProductionEqualityExpression=243,ProductionExclusiveOrExpression=244,ProductionExplicitConstructorInvocation=245,ProductionExpression=246,
    ProductionExpressionStatement=247,ProductionExtendsInterfaces=248,ProductionFieldAccess=249,ProductionFieldDeclaration=250,ProductionFinally=251,ProductionForEachStatement=252,
    ProductionForEachStatementNoShortIf=253,ProductionForExpression=254,ProductionForInit=255,ProductionFormalParameter=256,ProductionFormalParameterList=257,ProductionForUpdate=258,
    ProductionForStatement=259,ProductionForStatementNoShortIf=260,ProductionGetAccessorDeclaration=261,ProductionGoal=262,ProductionIfThenElseStatement=263,ProductionIfThenElseStatementNoShortIf=264,
    ProductionIfThenStatement=265,ProductionInclusiveOrExpression=266,ProductionInterfaceBody=267,ProductionInterfaceDeclaration=268,ProductionInterfaceMemberDeclaration=269,ProductionInterfaceMemberDeclarations=270,
    ProductionInterfaces=271,ProductionInterfaceTypeList=272,ProductionLeftHandSide=273,ProductionLiteral=274,ProductionLocalVariableDeclaration=275,ProductionLocalVariableDeclarationStatement=276,
    ProductionMethodBody=277,ProductionMethodDeclaration=278,ProductionMethodDeclarator=279,ProductionMethodHeader=280,ProductionMethodInvocation=281,ProductionModifier=282,
    ProductionModifiers=283,ProductionMultiplicativeExpression=284,ProductionName=285,ProductionNonReservedIdentifier=286,ProductionPostDecrementExpression=287,ProductionPostIncrementExpression=288,
    ProductionPostfixExpression=289,ProductionPreDecrementExpression=290,ProductionPreIncrementExpression=291,ProductionPrimary=292,ProductionPrimaryNoNewArray=293,ProductionPrimitiveType=294,
    ProductionPropertyDeclaration=295,ProductionQualifiedName=296,ProductionReferenceType=297,ProductionRelationalExpression=298,ProductionRelationalOperator=299,ProductionReturnStatement=300,
    ProductionSetAccessorDeclaration=301,ProductionShiftExpression=302,ProductionSimpleName=303,ProductionStatement=304,ProductionStatementExpression=305,ProductionStatementExpressionList=306,
    ProductionStatementNoShortIf=307,ProductionStatementWithoutTrailingSubstatement=308,ProductionStaticInitializer=309,ProductionSuper=310,ProductionTemplateParameterList=311,ProductionTemplateParameters=312,
    ProductionThrowStatement=313,ProductionTriggerDeclaration=314,ProductionTriggerEvent=315,ProductionTriggerEvents=316,ProductionTriggerHeader=317,ProductionTryStatement=318,
    ProductionType=319,ProductionTypeDeclaration=320,ProductionUnaryExpression=321,ProductionUnaryExpressionNotPlusMinus=322,ProductionVariableDeclarator=323,ProductionVariableDeclaratorId=324,
    ProductionVariableDeclarators=325,ProductionVariableInitializer=326,ProductionVariableInitializers=327,ProductionWhileStatement=328,ProductionWhileStatementNoShortIf=329};

// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ApexSyntaxNode,ApexTextSpan> {
  private ApexTextSpan __yylloc = new ApexTextSpan();
  public override ApexTextSpan yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
public class ScanObj {
  public int token;
  public ApexSyntaxNode yylval;
  public ApexTextSpan yylloc;
  public ScanObj( int t, ApexSyntaxNode val, ApexTextSpan loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

public partial class ApexParser: ShiftReduceParser<ApexSyntaxNode, ApexTextSpan>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[394];
  private static State[] states = new State[673];
  private static string[] nonTerms = new string[] {
      "Goal", "$accept", "CompilationUnit", "Literal", "Type", "PrimitiveType", 
      "ReferenceType", "TemplateParameterList", "TemplateParameters", "Name", 
      "ArrayType", "NonReservedIdentifier", "SimpleName", "QualifiedName", "TypeDeclaration", 
      "TriggerDeclaration", "ClassDeclaration", "AnnotatedClassDeclaration", 
      "InterfaceDeclaration", "AnnotatedInterfaceDeclaration", "EnumDeclaration", 
      "AnnotatedEnumDeclaration", "Modifiers", "Modifier", "Annotations", "ClassBody", 
      "Interfaces", "Super", "InterfaceTypeList", "ClassBodyDeclarations", "ClassBodyDeclaration", 
      "ClassMemberDeclaration", "StaticInitializer", "ConstructorDeclaration", 
      "FieldDeclaration", "AnnotatedFieldDeclaration", "MethodDeclaration", "AnnotatedMethodDeclaration", 
      "PropertyDeclaration", "VariableDeclarators", "VariableDeclarator", "VariableDeclaratorId", 
      "VariableInitializer", "Expression", "ArrayInitializer", "TriggerHeader", 
      "MethodBody", "TriggerEvents", "TriggerEvent", "AccessorDeclarations", 
      "GetAccessorDeclaration", "SetAccessorDeclaration", "AccessorBody", "Block", 
      "MethodHeader", "MethodDeclarator", "FormalParameterList", "FormalParameter", 
      "ConstructorDeclarator", "ConstructorBody", "ExplicitConstructorInvocation", 
      "BlockStatements", "ArgumentList", "InterfaceBody", "ExtendsInterfaces", 
      "InterfaceMemberDeclarations", "InterfaceMemberDeclaration", "AbstractMethodDeclaration", 
      "EnumBody", "EnumMemberDeclarations", "EnumMemberDeclaration", "VariableInitializers", 
      "BlockStatement", "LocalVariableDeclarationStatement", "Statement", "LocalVariableDeclaration", 
      "StatementWithoutTrailingSubstatement", "IfThenStatement", "IfThenElseStatement", 
      "WhileStatement", "ForStatement", "ForEachStatement", "StatementNoShortIf", 
      "IfThenElseStatementNoShortIf", "WhileStatementNoShortIf", "ForStatementNoShortIf", 
      "ForEachStatementNoShortIf", "EmptyStatement", "ExpressionStatement", "DoStatement", 
      "BreakStatement", "ContinueStatement", "ReturnStatement", "ThrowStatement", 
      "TryStatement", "DMLStatement", "StatementExpression", "MethodInvocation", 
      "Assignment", "PreIncrementExpression", "PreDecrementExpression", "PostIncrementExpression", 
      "PostDecrementExpression", "ClassInstanceCreationExpression", "ForInit", 
      "ForExpression", "ForUpdate", "StatementExpressionList", "Catches", "Finally", 
      "CatchClause", "Primary", "PrimaryNoNewArray", "ArrayCreationExpression", 
      "FieldAccess", "ArrayAccess", "MapArgumentAssignmentList", "MapArgumentAssignment", 
      "DimExprs", "Dims", "DimExpr", "Annotation", "PostfixExpression", "UnaryExpression", 
      "UnaryExpressionNotPlusMinus", "CastExpression", "MultiplicativeExpression", 
      "AdditiveExpression", "ShiftExpression", "RelationalExpression", "RelationalOperator", 
      "EqualityExpression", "AndExpression", "ExclusiveOrExpression", "InclusiveOrExpression", 
      "ConditionalAndExpression", "ConditionalOrExpression", "ConditionalExpression", 
      "AssignmentExpression", "AssignmentOperator", };

  static ApexParser() {
    states[0] = new State(new int[]{19,6,48,328,47,329,46,330,11,331,52,332,34,333,45,334,65,335,56,336,69,337,70,338,59,339,30,340,67,341,13,612,39,622,28,627,60,654},new int[]{-1,1,-3,3,-15,4,-17,5,-23,649,-24,342,-18,635,-25,650,-122,630,-19,636,-20,637,-21,638,-22,639,-16,651,-46,652});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(-52);
    states[5] = new State(-54);
    states[6] = new State(new int[]{3,101,12,103,14,104,158,105,178,106,33,107,35,237,51,108,60,109,38,110,62,111,63,112,64,113},new int[]{-13,7,-12,102});
    states[7] = new State(new int[]{119,11,37,532,29,537},new int[]{-26,8,-27,9,-28,645});
    states[8] = new State(-77);
    states[9] = new State(new int[]{119,11},new int[]{-26,10});
    states[10] = new State(-78);
    states[11] = new State(new int[]{120,12,15,84,16,85,21,86,22,87,23,88,26,89,35,90,40,91,41,92,53,93,3,101,12,103,14,104,158,105,178,106,33,107,51,108,60,109,38,110,62,111,63,112,64,113,48,328,47,329,46,330,11,331,52,597,34,333,45,334,65,335,56,336,69,337,70,338,59,339,30,340,67,341,1,599,13,612,66,557,19,6,39,622,28,627},new int[]{-30,13,-31,644,-32,16,-35,17,-5,18,-6,83,-7,94,-10,506,-13,123,-12,102,-14,124,-11,125,-23,511,-24,342,-36,600,-25,601,-122,630,-37,631,-55,618,-38,632,-39,633,-15,634,-17,5,-18,635,-19,636,-20,637,-21,638,-22,639,-33,640,-34,641,-59,642});
    states[12] = new State(-89);
    states[13] = new State(new int[]{120,14,15,84,16,85,21,86,22,87,23,88,26,89,35,90,40,91,41,92,53,93,3,101,12,103,14,104,158,105,178,106,33,107,51,108,60,109,38,110,62,111,63,112,64,113,48,328,47,329,46,330,11,331,52,597,34,333,45,334,65,335,56,336,69,337,70,338,59,339,30,340,67,341,1,599,13,612,66,557,19,6,39,622,28,627},new int[]{-31,15,-32,16,-35,17,-5,18,-6,83,-7,94,-10,506,-13,123,-12,102,-14,124,-11,125,-23,511,-24,342,-36,600,-25,601,-122,630,-37,631,-55,618,-38,632,-39,633,-15,634,-17,5,-18,635,-19,636,-20,637,-21,638,-22,639,-33,640,-34,641,-59,642});
    states[14] = new State(-90);
    states[15] = new State(-92);
    states[16] = new State(-93);
    states[17] = new State(-96);
    states[18] = new State(new int[]{123,82,3,101,12,103,14,104,158,105,178,106,33,107,35,237,51,108,60,109,38,110,62,111,63,112,64,113},new int[]{-40,19,-56,290,-13,291,-41,310,-42,23,-12,102});
    states[19] = new State(new int[]{124,20,126,21});
    states[20] = new State(-103);
    states[21] = new State(new int[]{3,101,12,103,14,104,158,105,178,106,33,107,35,237,51,108,60,109,38,110,62,111,63,112,64,113},new int[]{-41,22,-42,23,-13,289,-12,102});
    states[22] = new State(-107);
    states[23] = new State(new int[]{78,24,124,-108,126,-108});
    states[24] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,209,6,210,108,213,119,282},new int[]{-43,25,-44,26,-139,27,-138,28,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,179,-114,182,-98,190,-10,191,-13,123,-12,102,-14,124,-6,199,-116,206,-102,211,-103,212,-126,220,-99,221,-45,281});
    states[25] = new State(-109);
    states[26] = new State(-111);
    states[27] = new State(-391);
    states[28] = new State(-373);
    states[29] = new State(new int[]{91,30,115,277,124,-371,126,-371,118,-371,120,-371,122,-371,79,-371,125,-371});
    states[30] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,90,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,223,6,224,108,213},new int[]{-136,31,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,215,-114,182,-98,190,-10,216,-13,123,-12,102,-14,124,-6,199,-116,222,-102,211,-103,212,-126,220});
    states[31] = new State(new int[]{90,32,91,-370,115,-370,124,-370,126,-370,118,-370,120,-370,122,-370,79,-370,125,-370});
    states[32] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,90,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,223,6,224,108,213},new int[]{-135,33,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,215,-114,182,-98,190,-10,216,-13,123,-12,102,-14,124,-6,199,-116,222,-102,211,-103,212,-126,220});
    states[33] = new State(new int[]{112,34,90,-368,91,-368,115,-368,124,-368,126,-368,118,-368,120,-368,122,-368,79,-368,125,-368});
    states[34] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,90,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,223,6,224,108,213},new int[]{-134,35,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,215,-114,182,-98,190,-10,216,-13,123,-12,102,-14,124,-6,199,-116,222,-102,211,-103,212,-126,220});
    states[35] = new State(new int[]{113,36,112,-366,90,-366,91,-366,115,-366,124,-366,126,-366,118,-366,120,-366,122,-366,79,-366,125,-366});
    states[36] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,90,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,223,6,224,108,213},new int[]{-133,37,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,215,-114,182,-98,190,-10,216,-13,123,-12,102,-14,124,-6,199,-116,222,-102,211,-103,212,-126,220});
    states[37] = new State(new int[]{111,38,113,-364,112,-364,90,-364,91,-364,115,-364,124,-364,126,-364,118,-364,120,-364,122,-364,79,-364,125,-364});
    states[38] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,90,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,223,6,224,108,213},new int[]{-132,39,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,215,-114,182,-98,190,-10,216,-13,123,-12,102,-14,124,-6,199,-116,222,-102,211,-103,212,-126,220});
    states[39] = new State(new int[]{92,40,93,78,101,268,102,270,103,272,111,-362,113,-362,112,-362,90,-362,91,-362,115,-362,124,-362,126,-362,118,-362,120,-362,122,-362,79,-362,125,-362});
    states[40] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,90,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,223,6,224,108,213},new int[]{-130,41,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,215,-114,182,-98,190,-10,216,-13,123,-12,102,-14,124,-6,199,-116,222,-102,211,-103,212,-126,220});
    states[41] = new State(new int[]{116,80,94,127,95,128,99,129,100,130,92,-356,93,-356,101,-356,102,-356,103,-356,111,-356,113,-356,112,-356,90,-356,91,-356,115,-356,124,-356,126,-356,118,-356,120,-356,122,-356,79,-356,125,-356},new int[]{-131,42});
    states[42] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,90,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,223,6,224,108,213},new int[]{-129,43,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,215,-114,182,-98,190,-10,216,-13,123,-12,102,-14,124,-6,199,-116,222,-102,211,-103,212,-126,220});
    states[43] = new State(new int[]{114,44,96,132,116,-349,94,-349,95,-349,99,-349,100,-349,92,-349,93,-349,101,-349,102,-349,103,-349,111,-349,113,-349,112,-349,90,-349,91,-349,115,-349,124,-349,126,-349,118,-349,120,-349,122,-349,79,-349,125,-349});
    states[44] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,90,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,223,6,224,108,213},new int[]{-128,45,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,215,-114,182,-98,190,-10,216,-13,123,-12,102,-14,124,-6,199,-116,222,-102,211,-103,212,-126,220});
    states[45] = new State(new int[]{104,46,105,135,114,-345,96,-345,116,-345,94,-345,95,-345,99,-345,100,-345,92,-345,93,-345,101,-345,102,-345,103,-345,111,-345,113,-345,112,-345,90,-345,91,-345,115,-345,124,-345,126,-345,118,-345,120,-345,122,-345,79,-345,125,-345});
    states[46] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,90,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,223,6,224,108,213},new int[]{-127,47,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,215,-114,182,-98,190,-10,216,-13,123,-12,102,-14,124,-6,199,-116,222,-102,211,-103,212,-126,220});
    states[47] = new State(new int[]{106,48,107,137,104,-342,105,-342,114,-342,96,-342,116,-342,94,-342,95,-342,99,-342,100,-342,92,-342,93,-342,101,-342,102,-342,103,-342,111,-342,113,-342,112,-342,90,-342,91,-342,115,-342,124,-342,126,-342,118,-342,120,-342,122,-342,79,-342,125,-342});
    states[48] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,90,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,223,6,224,108,213},new int[]{-124,49,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,215,-114,182,-98,190,-10,216,-13,123,-12,102,-14,124,-6,199,-116,222,-102,211,-103,212,-126,220});
    states[49] = new State(-339);
    states[50] = new State(-324);
    states[51] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,90,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,223,6,224,108,213},new int[]{-124,52,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,215,-114,182,-98,190,-10,216,-13,123,-12,102,-14,124,-6,199,-116,222,-102,211,-103,212,-126,220});
    states[52] = new State(-329);
    states[53] = new State(-325);
    states[54] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,90,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,223,6,224,108,213},new int[]{-124,55,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,215,-114,182,-98,190,-10,216,-13,123,-12,102,-14,124,-6,199,-116,222,-102,211,-103,212,-126,220});
    states[55] = new State(-330);
    states[56] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,90,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,223,6,224,108,213},new int[]{-124,57,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,215,-114,182,-98,190,-10,216,-13,123,-12,102,-14,124,-6,199,-116,222,-102,211,-103,212,-126,220});
    states[57] = new State(-326);
    states[58] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,90,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,223,6,224,108,213},new int[]{-124,59,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,215,-114,182,-98,190,-10,216,-13,123,-12,102,-14,124,-6,199,-116,222,-102,211,-103,212,-126,220});
    states[59] = new State(-327);
    states[60] = new State(-328);
    states[61] = new State(new int[]{109,62,110,63,106,-331,107,-331,104,-331,105,-331,114,-331,96,-331,116,-331,94,-331,95,-331,99,-331,100,-331,92,-331,93,-331,101,-331,102,-331,103,-331,111,-331,113,-331,112,-331,90,-331,91,-331,115,-331,124,-331,126,-331,118,-331,120,-331,122,-331,79,-331,125,-331});
    states[62] = new State(-322);
    states[63] = new State(-323);
    states[64] = new State(new int[]{127,65,109,-318,110,-318,106,-318,107,-318,104,-318,105,-318,114,-318,96,-318,116,-318,94,-318,95,-318,99,-318,100,-318,92,-318,93,-318,101,-318,102,-318,103,-318,111,-318,113,-318,112,-318,90,-318,91,-318,115,-318,124,-318,126,-318,118,-318,120,-318,122,-318,79,-318,125,-318});
    states[65] = new State(new int[]{19,274,43,275,3,101,12,103,14,104,158,105,178,106,33,107,35,90,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93},new int[]{-13,66,-6,276,-12,102});
    states[66] = new State(new int[]{117,67,78,-295,79,-295,80,-295,81,-295,82,-295,83,-295,84,-295,85,-295,86,-295,87,-295,88,-295,89,-295,121,-295,127,-295,109,-295,110,-295,106,-295,107,-295,104,-295,105,-295,114,-295,96,-295,116,-295,94,-295,95,-295,99,-295,100,-295,92,-295,93,-295,101,-295,102,-295,103,-295,111,-295,113,-295,112,-295,90,-295,91,-295,115,-295,124,-295,126,-295,118,-295,120,-295,122,-295,125,-295});
    states[67] = new State(new int[]{118,68,109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,209,6,210,108,213},new int[]{-63,69,-44,178,-139,27,-138,28,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,179,-114,182,-98,190,-10,191,-13,123,-12,102,-14,124,-6,199,-116,206,-102,211,-103,212,-126,220,-99,221});
    states[68] = new State(-312);
    states[69] = new State(new int[]{118,70,126,71});
    states[70] = new State(-313);
    states[71] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,209,6,210,108,213},new int[]{-44,72,-139,27,-138,28,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,179,-114,182,-98,190,-10,191,-13,123,-12,102,-14,124,-6,199,-116,206,-102,211,-103,212,-126,220,-99,221});
    states[72] = new State(-287);
    states[73] = new State(new int[]{90,32,91,-369,115,-369,124,-369,126,-369,118,-369,120,-369,122,-369,79,-369,125,-369});
    states[74] = new State(new int[]{112,34,90,-367,91,-367,115,-367,124,-367,126,-367,118,-367,120,-367,122,-367,79,-367,125,-367});
    states[75] = new State(new int[]{113,36,112,-365,90,-365,91,-365,115,-365,124,-365,126,-365,118,-365,120,-365,122,-365,79,-365,125,-365});
    states[76] = new State(new int[]{111,38,113,-363,112,-363,90,-363,91,-363,115,-363,124,-363,126,-363,118,-363,120,-363,122,-363,79,-363,125,-363});
    states[77] = new State(new int[]{92,40,93,78,101,268,102,270,103,272,111,-361,113,-361,112,-361,90,-361,91,-361,115,-361,124,-361,126,-361,118,-361,120,-361,122,-361,79,-361,125,-361});
    states[78] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,90,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,223,6,224,108,213},new int[]{-130,79,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,215,-114,182,-98,190,-10,216,-13,123,-12,102,-14,124,-6,199,-116,222,-102,211,-103,212,-126,220});
    states[79] = new State(new int[]{116,80,94,127,95,128,99,129,100,130,92,-357,93,-357,101,-357,102,-357,103,-357,111,-357,113,-357,112,-357,90,-357,91,-357,115,-357,124,-357,126,-357,118,-357,120,-357,122,-357,79,-357,125,-357},new int[]{-131,42});
    states[80] = new State(new int[]{15,84,16,85,21,86,22,87,23,88,26,89,35,90,40,91,41,92,53,93,3,101,12,103,14,104,158,105,178,106,33,107,51,108,60,109,38,110,62,111,63,112,64,113},new int[]{-5,81,-6,83,-7,94,-10,95,-13,123,-12,102,-14,124,-11,125});
    states[81] = new State(new int[]{123,82,116,-350,94,-350,95,-350,99,-350,100,-350,92,-350,93,-350,101,-350,102,-350,103,-350,111,-350,113,-350,112,-350,90,-350,91,-350,115,-350,124,-350,126,-350,118,-350,120,-350,122,-350,79,-350,125,-350});
    states[82] = new State(-31);
    states[83] = new State(-10);
    states[84] = new State(-12);
    states[85] = new State(-13);
    states[86] = new State(-14);
    states[87] = new State(-15);
    states[88] = new State(-16);
    states[89] = new State(-17);
    states[90] = new State(-18);
    states[91] = new State(-19);
    states[92] = new State(-20);
    states[93] = new State(-21);
    states[94] = new State(-11);
    states[95] = new State(new int[]{127,96,94,115,123,-28,116,-28,95,-28,99,-28,100,-28,92,-28,93,-28,101,-28,102,-28,103,-28,111,-28,113,-28,112,-28,90,-28,91,-28,115,-28,124,-28,126,-28,118,-28,120,-28,122,-28,79,-28,125,-28,96,-28,97,-28,98,-28,117,-28,119,-28,121,-28,3,-28,12,-28,14,-28,158,-28,178,-28,33,-28,35,-28,51,-28,60,-28,38,-28,62,-28,63,-28,64,-28,37,-28},new int[]{-8,114});
    states[96] = new State(new int[]{19,98,43,99,3,101,12,103,14,104,158,105,178,106,33,107,35,90,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93},new int[]{-13,97,-6,100,-12,102});
    states[97] = new State(-48);
    states[98] = new State(-49);
    states[99] = new State(-50);
    states[100] = new State(-51);
    states[101] = new State(-46);
    states[102] = new State(-47);
    states[103] = new State(-32);
    states[104] = new State(-33);
    states[105] = new State(-34);
    states[106] = new State(-35);
    states[107] = new State(-36);
    states[108] = new State(-38);
    states[109] = new State(-39);
    states[110] = new State(-40);
    states[111] = new State(-41);
    states[112] = new State(-42);
    states[113] = new State(-43);
    states[114] = new State(-29);
    states[115] = new State(new int[]{15,84,16,85,21,86,22,87,23,88,26,89,35,90,40,91,41,92,53,93,3,101,12,103,14,104,158,105,178,106,33,107,51,108,60,109,38,110,62,111,63,112,64,113},new int[]{-9,116,-5,126,-6,83,-7,94,-10,95,-13,123,-12,102,-14,124,-11,125});
    states[116] = new State(new int[]{95,117,96,118,97,119,98,120,126,121});
    states[117] = new State(-22);
    states[118] = new State(-23);
    states[119] = new State(-24);
    states[120] = new State(-25);
    states[121] = new State(new int[]{15,84,16,85,21,86,22,87,23,88,26,89,35,90,40,91,41,92,53,93,3,101,12,103,14,104,158,105,178,106,33,107,51,108,60,109,38,110,62,111,63,112,64,113},new int[]{-5,122,-6,83,-7,94,-10,95,-13,123,-12,102,-14,124,-11,125});
    states[122] = new State(new int[]{123,82,95,-27,96,-27,97,-27,98,-27,126,-27});
    states[123] = new State(-44);
    states[124] = new State(-45);
    states[125] = new State(-30);
    states[126] = new State(new int[]{123,82,95,-26,96,-26,97,-26,98,-26,126,-26});
    states[127] = new State(-351);
    states[128] = new State(-352);
    states[129] = new State(-353);
    states[130] = new State(-354);
    states[131] = new State(new int[]{114,44,96,132,116,-348,94,-348,95,-348,99,-348,100,-348,92,-348,93,-348,101,-348,102,-348,103,-348,111,-348,113,-348,112,-348,90,-348,91,-348,115,-348,124,-348,126,-348,118,-348,120,-348,122,-348,79,-348,125,-348});
    states[132] = new State(new int[]{97,133});
    states[133] = new State(new int[]{98,266,109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,90,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,223,6,224,108,213},new int[]{-128,134,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,215,-114,182,-98,190,-10,216,-13,123,-12,102,-14,124,-6,199,-116,222,-102,211,-103,212,-126,220});
    states[134] = new State(new int[]{104,46,105,135,114,-346,96,-346,116,-346,94,-346,95,-346,99,-346,100,-346,92,-346,93,-346,101,-346,102,-346,103,-346,111,-346,113,-346,112,-346,90,-346,91,-346,115,-346,124,-346,126,-346,118,-346,120,-346,122,-346,79,-346,125,-346});
    states[135] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,90,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,223,6,224,108,213},new int[]{-127,136,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,215,-114,182,-98,190,-10,216,-13,123,-12,102,-14,124,-6,199,-116,222,-102,211,-103,212,-126,220});
    states[136] = new State(new int[]{106,48,107,137,104,-343,105,-343,114,-343,96,-343,116,-343,94,-343,95,-343,99,-343,100,-343,92,-343,93,-343,101,-343,102,-343,103,-343,111,-343,113,-343,112,-343,90,-343,91,-343,115,-343,124,-343,126,-343,118,-343,120,-343,122,-343,79,-343,125,-343});
    states[137] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,90,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,223,6,224,108,213},new int[]{-124,138,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,215,-114,182,-98,190,-10,216,-13,123,-12,102,-14,124,-6,199,-116,222,-102,211,-103,212,-126,220});
    states[138] = new State(-340);
    states[139] = new State(new int[]{121,140,127,-267,109,-267,110,-267,106,-267,107,-267,104,-267,105,-267,114,-267,96,-267,116,-267,94,-267,95,-267,99,-267,100,-267,92,-267,93,-267,101,-267,102,-267,103,-267,111,-267,113,-267,112,-267,90,-267,91,-267,115,-267,124,-267,126,-267,118,-267,120,-267,122,-267,79,-267,125,-267});
    states[140] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,209,6,210,108,213},new int[]{-44,141,-139,27,-138,28,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,179,-114,182,-98,190,-10,191,-13,123,-12,102,-14,124,-6,199,-116,206,-102,211,-103,212,-126,220,-99,221});
    states[141] = new State(new int[]{122,142});
    states[142] = new State(-317);
    states[143] = new State(new int[]{116,80,94,127,95,128,99,129,100,130,92,-355,93,-355,101,-355,102,-355,103,-355,111,-355,113,-355,112,-355,90,-355,91,-355,115,-355,124,-355,126,-355,118,-355,120,-355,122,-355,79,-355,125,-355},new int[]{-131,42});
    states[144] = new State(new int[]{104,46,105,135,114,-344,96,-344,116,-344,94,-344,95,-344,99,-344,100,-344,92,-344,93,-344,101,-344,102,-344,103,-344,111,-344,113,-344,112,-344,90,-344,91,-344,115,-344,124,-344,126,-344,118,-344,120,-344,122,-344,79,-344,125,-344});
    states[145] = new State(new int[]{106,48,107,137,104,-341,105,-341,114,-341,96,-341,116,-341,94,-341,95,-341,99,-341,100,-341,92,-341,93,-341,101,-341,102,-341,103,-341,111,-341,113,-341,112,-341,90,-341,91,-341,115,-341,124,-341,126,-341,118,-341,120,-341,122,-341,79,-341,125,-341});
    states[146] = new State(-338);
    states[147] = new State(-269);
    states[148] = new State(-3);
    states[149] = new State(-4);
    states[150] = new State(-5);
    states[151] = new State(-6);
    states[152] = new State(-7);
    states[153] = new State(-8);
    states[154] = new State(-9);
    states[155] = new State(-270);
    states[156] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,209,6,210,108,213},new int[]{-44,157,-6,159,-7,165,-139,27,-138,28,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,179,-114,182,-98,190,-10,264,-13,123,-12,102,-14,124,-116,206,-102,211,-103,212,-126,220,-99,221,-11,125,-5,265});
    states[157] = new State(new int[]{118,158});
    states[158] = new State(-271);
    states[159] = new State(new int[]{118,160,127,200,123,-10});
    states[160] = new State(new int[]{117,162,109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,90,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,223,6,224,108,213},new int[]{-124,161,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,215,-114,182,-98,190,-10,216,-13,123,-12,102,-14,124,-6,199,-116,222,-102,211,-103,212,-126,220});
    states[161] = new State(-334);
    states[162] = new State(new int[]{3,163,109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,209,6,210,108,213},new int[]{-44,157,-6,159,-7,165,-139,27,-138,28,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,179,-114,182,-98,190,-10,264,-13,123,-12,102,-14,124,-116,206,-102,211,-103,212,-126,220,-99,221,-11,125,-5,265});
    states[163] = new State(new int[]{118,164,117,-46,127,-46,121,-46,78,-46,79,-46,80,-46,81,-46,82,-46,83,-46,84,-46,85,-46,86,-46,87,-46,88,-46,89,-46,94,-46,123,-46,109,-46,110,-46,106,-46,107,-46,104,-46,105,-46,114,-46,96,-46,116,-46,95,-46,99,-46,100,-46,92,-46,93,-46,101,-46,102,-46,103,-46,111,-46,113,-46,112,-46,90,-46,91,-46,115,-46});
    states[164] = new State(-336);
    states[165] = new State(new int[]{118,166,123,-11});
    states[166] = new State(new int[]{117,168,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,90,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,223,6,224,108,213},new int[]{-125,167,-123,61,-112,64,-113,139,-4,147,-104,171,-115,215,-114,182,-98,190,-10,216,-13,123,-12,102,-14,124,-6,199,-116,222,-102,211,-103,212,-126,220});
    states[167] = new State(-335);
    states[168] = new State(new int[]{3,169,109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,209,6,210,108,213},new int[]{-44,157,-6,159,-7,165,-139,27,-138,28,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,179,-114,182,-98,190,-10,264,-13,123,-12,102,-14,124,-116,206,-102,211,-103,212,-126,220,-99,221,-11,125,-5,265});
    states[169] = new State(new int[]{118,170,117,-46,127,-46,121,-46,78,-46,79,-46,80,-46,81,-46,82,-46,83,-46,84,-46,85,-46,86,-46,87,-46,88,-46,89,-46,94,-46,123,-46,109,-46,110,-46,106,-46,107,-46,104,-46,105,-46,114,-46,96,-46,116,-46,95,-46,99,-46,100,-46,92,-46,93,-46,101,-46,102,-46,103,-46,111,-46,113,-46,112,-46,90,-46,91,-46,115,-46});
    states[170] = new State(-337);
    states[171] = new State(-272);
    states[172] = new State(new int[]{15,84,16,85,21,86,22,87,23,88,26,89,35,90,40,91,41,92,53,93,3,101,12,103,14,104,158,105,178,106,33,107,51,108,60,109,38,110,62,111,63,112,64,113},new int[]{-5,173,-6,83,-7,94,-10,95,-13,123,-12,102,-14,124,-11,125});
    states[173] = new State(new int[]{117,174,119,242,123,82,121,260},new int[]{-119,255,-121,263});
    states[174] = new State(new int[]{118,175,109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,209,6,210,108,213},new int[]{-63,176,-44,178,-139,27,-138,28,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,179,-114,182,-98,190,-10,191,-13,123,-12,102,-14,124,-6,199,-116,206,-102,211,-103,212,-126,220,-99,221});
    states[175] = new State(-278);
    states[176] = new State(new int[]{118,177,126,71});
    states[177] = new State(-279);
    states[178] = new State(-286);
    states[179] = new State(new int[]{78,225,79,226,80,227,81,228,82,229,83,230,84,231,85,232,86,233,87,234,88,235,89,236,121,-273,127,-273,109,-273,110,-273,106,-273,107,-273,104,-273,105,-273,114,-273,96,-273,116,-273,94,-273,95,-273,99,-273,100,-273,92,-273,93,-273,101,-273,102,-273,103,-273,111,-273,113,-273,112,-273,90,-273,91,-273,115,-273,124,-273,126,-273,118,-273,120,-273,122,-273,125,-273},new int[]{-140,180});
    states[180] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,209,6,210,108,213},new int[]{-44,181,-139,27,-138,28,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,179,-114,182,-98,190,-10,191,-13,123,-12,102,-14,124,-6,199,-116,206,-102,211,-103,212,-126,220,-99,221});
    states[181] = new State(-377);
    states[182] = new State(-268);
    states[183] = new State(new int[]{127,184});
    states[184] = new State(new int[]{19,240,3,101,12,103,14,104,158,105,178,106,33,107,35,90,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93},new int[]{-13,185,-6,241,-12,102});
    states[185] = new State(new int[]{117,186,78,-299,79,-299,80,-299,81,-299,82,-299,83,-299,84,-299,85,-299,86,-299,87,-299,88,-299,89,-299,121,-299,127,-299,109,-299,110,-299,106,-299,107,-299,104,-299,105,-299,114,-299,96,-299,116,-299,94,-299,95,-299,99,-299,100,-299,92,-299,93,-299,101,-299,102,-299,103,-299,111,-299,113,-299,112,-299,90,-299,91,-299,115,-299,124,-299,126,-299,118,-299,120,-299,122,-299,125,-299});
    states[186] = new State(new int[]{118,187,109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,209,6,210,108,213},new int[]{-63,188,-44,178,-139,27,-138,28,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,179,-114,182,-98,190,-10,191,-13,123,-12,102,-14,124,-6,199,-116,206,-102,211,-103,212,-126,220,-99,221});
    states[187] = new State(-314);
    states[188] = new State(new int[]{118,189,126,71});
    states[189] = new State(-315);
    states[190] = new State(-274);
    states[191] = new State(new int[]{117,192,127,96,121,217,78,225,79,226,80,227,81,228,82,229,83,230,84,231,85,232,86,233,87,234,88,235,89,236,109,-319,110,-319,106,-319,107,-319,104,-319,105,-319,114,-319,96,-319,116,-319,94,-319,95,-319,99,-319,100,-319,92,-319,93,-319,101,-319,102,-319,103,-319,111,-319,113,-319,112,-319,90,-319,91,-319,115,-319,124,-319,126,-319,118,-319,120,-319,122,-319,125,-319},new int[]{-140,238});
    states[192] = new State(new int[]{118,193,109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,209,6,210,108,213},new int[]{-63,194,-44,178,-139,27,-138,28,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,179,-114,182,-98,190,-10,191,-13,123,-12,102,-14,124,-6,199,-116,206,-102,211,-103,212,-126,220,-99,221});
    states[193] = new State(-308);
    states[194] = new State(new int[]{118,195,126,71});
    states[195] = new State(-309);
    states[196] = new State(new int[]{78,225,79,226,80,227,81,228,82,229,83,230,84,231,85,232,86,233,87,234,88,235,89,236,117,-37,127,-18,121,-37,109,-37,110,-37,106,-37,107,-37,104,-37,105,-37,114,-37,96,-37,116,-37,94,-37,95,-37,99,-37,100,-37,92,-37,93,-37,101,-37,102,-37,103,-37,111,-37,113,-37,112,-37,90,-37,91,-37,115,-37,124,-37,126,-37,118,-18,120,-37,122,-37,123,-18,125,-37,3,-18,12,-18,14,-18,158,-18,178,-18,33,-18,35,-18,51,-18,60,-18,38,-18,62,-18,63,-18,64,-18},new int[]{-140,197});
    states[197] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,209,6,210,108,213},new int[]{-44,198,-139,27,-138,28,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,179,-114,182,-98,190,-10,191,-13,123,-12,102,-14,124,-6,199,-116,206,-102,211,-103,212,-126,220,-99,221});
    states[198] = new State(-376);
    states[199] = new State(new int[]{127,200});
    states[200] = new State(new int[]{3,101,12,103,14,104,158,105,178,106,33,107,35,237,51,108,60,109,38,110,62,111,63,112,64,113},new int[]{-13,201,-12,102});
    states[201] = new State(new int[]{117,202});
    states[202] = new State(new int[]{118,203,109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,209,6,210,108,213},new int[]{-63,204,-44,178,-139,27,-138,28,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,179,-114,182,-98,190,-10,191,-13,123,-12,102,-14,124,-6,199,-116,206,-102,211,-103,212,-126,220,-99,221});
    states[203] = new State(-310);
    states[204] = new State(new int[]{118,205,126,71});
    states[205] = new State(-311);
    states[206] = new State(new int[]{78,225,79,226,80,227,81,228,82,229,83,230,84,231,85,232,86,233,87,234,88,235,89,236,121,-275,127,-275,109,-275,110,-275,106,-275,107,-275,104,-275,105,-275,114,-275,96,-275,116,-275,94,-275,95,-275,99,-275,100,-275,92,-275,93,-275,101,-275,102,-275,103,-275,111,-275,113,-275,112,-275,90,-275,91,-275,115,-275,124,-275,126,-275,118,-275,120,-275,122,-275,125,-275},new int[]{-140,207});
    states[207] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,209,6,210,108,213},new int[]{-44,208,-139,27,-138,28,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,179,-114,182,-98,190,-10,191,-13,123,-12,102,-14,124,-6,199,-116,206,-102,211,-103,212,-126,220,-99,221});
    states[208] = new State(-378);
    states[209] = new State(-276);
    states[210] = new State(-277);
    states[211] = new State(-320);
    states[212] = new State(-321);
    states[213] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,90,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,223,6,224,108,213},new int[]{-124,214,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,215,-114,182,-98,190,-10,216,-13,123,-12,102,-14,124,-6,199,-116,222,-102,211,-103,212,-126,220});
    states[214] = new State(-332);
    states[215] = new State(-273);
    states[216] = new State(new int[]{117,192,127,96,121,217,109,-319,110,-319,106,-319,107,-319,104,-319,105,-319,114,-319,96,-319,116,-319,94,-319,95,-319,99,-319,100,-319,92,-319,93,-319,101,-319,102,-319,103,-319,111,-319,113,-319,112,-319,90,-319,91,-319,115,-319,124,-319,126,-319,118,-319,120,-319,122,-319,79,-319,125,-319});
    states[217] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,209,6,210,108,213},new int[]{-44,218,-139,27,-138,28,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,179,-114,182,-98,190,-10,191,-13,123,-12,102,-14,124,-6,199,-116,206,-102,211,-103,212,-126,220,-99,221});
    states[218] = new State(new int[]{122,219});
    states[219] = new State(-316);
    states[220] = new State(-333);
    states[221] = new State(-374);
    states[222] = new State(-275);
    states[223] = new State(-276);
    states[224] = new State(-277);
    states[225] = new State(-379);
    states[226] = new State(-380);
    states[227] = new State(-381);
    states[228] = new State(-382);
    states[229] = new State(-383);
    states[230] = new State(-384);
    states[231] = new State(-385);
    states[232] = new State(-386);
    states[233] = new State(-387);
    states[234] = new State(-388);
    states[235] = new State(-389);
    states[236] = new State(-390);
    states[237] = new State(-37);
    states[238] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,209,6,210,108,213},new int[]{-44,239,-139,27,-138,28,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,179,-114,182,-98,190,-10,191,-13,123,-12,102,-14,124,-6,199,-116,206,-102,211,-103,212,-126,220,-99,221});
    states[239] = new State(-375);
    states[240] = new State(-300);
    states[241] = new State(-302);
    states[242] = new State(new int[]{120,243,109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,209,6,210,108,213},new int[]{-63,244,-117,246,-44,253,-139,27,-138,28,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,179,-114,182,-98,190,-10,191,-13,123,-12,102,-14,124,-6,199,-116,206,-102,211,-103,212,-126,220,-99,221,-118,254});
    states[243] = new State(-280);
    states[244] = new State(new int[]{120,245,126,71});
    states[245] = new State(-281);
    states[246] = new State(new int[]{120,247,126,248});
    states[247] = new State(-282);
    states[248] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,209,6,210,108,213},new int[]{-118,249,-44,250,-139,27,-138,28,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,179,-114,182,-98,190,-10,191,-13,123,-12,102,-14,124,-6,199,-116,206,-102,211,-103,212,-126,220,-99,221});
    states[249] = new State(-284);
    states[250] = new State(new int[]{79,251});
    states[251] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,209,6,210,108,213},new int[]{-44,252,-139,27,-138,28,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,179,-114,182,-98,190,-10,191,-13,123,-12,102,-14,124,-6,199,-116,206,-102,211,-103,212,-126,220,-99,221});
    states[252] = new State(-285);
    states[253] = new State(new int[]{79,251,120,-286,126,-286});
    states[254] = new State(-283);
    states[255] = new State(new int[]{123,259,121,260,127,-288,109,-288,110,-288,106,-288,107,-288,104,-288,105,-288,114,-288,96,-288,116,-288,94,-288,95,-288,99,-288,100,-288,92,-288,93,-288,101,-288,102,-288,103,-288,111,-288,113,-288,112,-288,90,-288,91,-288,115,-288,124,-288,126,-288,118,-288,120,-288,122,-288,79,-288,125,-288},new int[]{-120,256,-121,258});
    states[256] = new State(new int[]{123,257,127,-289,109,-289,110,-289,106,-289,107,-289,104,-289,105,-289,114,-289,96,-289,116,-289,94,-289,95,-289,99,-289,100,-289,92,-289,93,-289,101,-289,102,-289,103,-289,111,-289,113,-289,112,-289,90,-289,91,-289,115,-289,124,-289,126,-289,118,-289,120,-289,122,-289,79,-289,125,-289});
    states[257] = new State(-294);
    states[258] = new State(-291);
    states[259] = new State(-293);
    states[260] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,209,6,210,108,213},new int[]{-44,261,-139,27,-138,28,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,179,-114,182,-98,190,-10,191,-13,123,-12,102,-14,124,-6,199,-116,206,-102,211,-103,212,-126,220,-99,221});
    states[261] = new State(new int[]{122,262});
    states[262] = new State(-292);
    states[263] = new State(-290);
    states[264] = new State(new int[]{117,192,127,96,121,217,78,225,79,226,80,227,81,228,82,229,83,230,84,231,85,232,86,233,87,234,88,235,89,236,94,115,109,-319,110,-319,106,-319,107,-319,104,-319,105,-319,114,-319,96,-319,116,-319,95,-319,99,-319,100,-319,92,-319,93,-319,101,-319,102,-319,103,-319,111,-319,113,-319,112,-319,90,-319,91,-319,115,-319,118,-28,123,-28,3,-28,12,-28,14,-28,158,-28,178,-28,33,-28,35,-28,51,-28,60,-28,38,-28,62,-28,63,-28,64,-28},new int[]{-140,238,-8,114});
    states[265] = new State(new int[]{123,82});
    states[266] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,90,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,223,6,224,108,213},new int[]{-128,267,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,215,-114,182,-98,190,-10,216,-13,123,-12,102,-14,124,-6,199,-116,222,-102,211,-103,212,-126,220});
    states[267] = new State(new int[]{104,46,105,135,114,-347,96,-347,116,-347,94,-347,95,-347,99,-347,100,-347,92,-347,93,-347,101,-347,102,-347,103,-347,111,-347,113,-347,112,-347,90,-347,91,-347,115,-347,124,-347,126,-347,118,-347,120,-347,122,-347,79,-347,125,-347});
    states[268] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,90,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,223,6,224,108,213},new int[]{-130,269,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,215,-114,182,-98,190,-10,216,-13,123,-12,102,-14,124,-6,199,-116,222,-102,211,-103,212,-126,220});
    states[269] = new State(new int[]{116,80,94,127,95,128,99,129,100,130,92,-358,93,-358,101,-358,102,-358,103,-358,111,-358,113,-358,112,-358,90,-358,91,-358,115,-358,124,-358,126,-358,118,-358,120,-358,122,-358,79,-358,125,-358},new int[]{-131,42});
    states[270] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,90,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,223,6,224,108,213},new int[]{-130,271,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,215,-114,182,-98,190,-10,216,-13,123,-12,102,-14,124,-6,199,-116,222,-102,211,-103,212,-126,220});
    states[271] = new State(new int[]{116,80,94,127,95,128,99,129,100,130,92,-359,93,-359,101,-359,102,-359,103,-359,111,-359,113,-359,112,-359,90,-359,91,-359,115,-359,124,-359,126,-359,118,-359,120,-359,122,-359,79,-359,125,-359},new int[]{-131,42});
    states[272] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,90,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,223,6,224,108,213},new int[]{-130,273,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,215,-114,182,-98,190,-10,216,-13,123,-12,102,-14,124,-6,199,-116,222,-102,211,-103,212,-126,220});
    states[273] = new State(new int[]{116,80,94,127,95,128,99,129,100,130,92,-360,93,-360,101,-360,102,-360,103,-360,111,-360,113,-360,112,-360,90,-360,91,-360,115,-360,124,-360,126,-360,118,-360,120,-360,122,-360,79,-360,125,-360},new int[]{-131,42});
    states[274] = new State(-296);
    states[275] = new State(-297);
    states[276] = new State(-298);
    states[277] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,209,6,210,108,213},new int[]{-44,278,-139,27,-138,28,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,179,-114,182,-98,190,-10,191,-13,123,-12,102,-14,124,-6,199,-116,206,-102,211,-103,212,-126,220,-99,221});
    states[278] = new State(new int[]{125,279});
    states[279] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,90,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,223,6,224,108,213},new int[]{-138,280,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,215,-114,182,-98,190,-10,216,-13,123,-12,102,-14,124,-6,199,-116,222,-102,211,-103,212,-126,220});
    states[280] = new State(-372);
    states[281] = new State(-112);
    states[282] = new State(new int[]{120,283,109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,209,6,210,108,213,119,282},new int[]{-72,284,-43,288,-44,26,-139,27,-138,28,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,179,-114,182,-98,190,-10,191,-13,123,-12,102,-14,124,-6,199,-116,206,-102,211,-103,212,-126,220,-99,221,-45,281});
    states[283] = new State(-183);
    states[284] = new State(new int[]{120,285,126,286});
    states[285] = new State(-184);
    states[286] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,209,6,210,108,213,119,282},new int[]{-43,287,-44,26,-139,27,-138,28,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,179,-114,182,-98,190,-10,191,-13,123,-12,102,-14,124,-6,199,-116,206,-102,211,-103,212,-126,220,-99,221,-45,281});
    states[287] = new State(-186);
    states[288] = new State(-185);
    states[289] = new State(-110);
    states[290] = new State(-139);
    states[291] = new State(new int[]{119,292,117,499,78,-110,124,-110,126,-110});
    states[292] = new State(new int[]{33,491,48,328,47,329,46,330,11,331,52,332,34,333,45,334,65,335,56,336,69,337,70,338,59,339,30,340,67,341,51,297},new int[]{-50,293,-51,295,-23,493,-24,342,-52,496});
    states[293] = new State(new int[]{120,294});
    states[294] = new State(-124);
    states[295] = new State(new int[]{51,297,48,328,47,329,46,330,11,331,52,332,34,333,45,334,65,335,56,336,69,337,70,338,59,339,30,340,67,341,120,-126},new int[]{-52,296,-23,488,-24,342});
    states[296] = new State(-127);
    states[297] = new State(new int[]{119,300,124,487},new int[]{-53,298,-54,299});
    states[298] = new State(-132);
    states[299] = new State(-134);
    states[300] = new State(new int[]{120,301,15,84,16,85,21,86,22,87,23,88,26,89,35,196,40,91,41,92,53,93,3,101,12,103,14,104,158,105,178,106,33,107,51,108,60,109,38,312,62,315,63,318,64,321,48,328,47,329,46,330,11,331,52,332,34,333,45,334,65,335,56,336,69,337,70,338,59,339,30,340,67,341,119,300,124,347,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,352,43,172,54,183,5,223,6,224,109,51,110,54,1,361,25,364,17,373,20,376,49,379,58,384,61,388,24,405,42,408,36,412,68,422,32,428},new int[]{-62,302,-73,486,-74,305,-76,306,-5,308,-6,311,-7,94,-10,264,-13,123,-12,102,-14,124,-11,125,-23,324,-24,342,-75,343,-77,344,-54,345,-88,346,-89,348,-97,349,-99,351,-115,179,-112,64,-113,139,-4,147,-104,353,-114,182,-98,354,-116,206,-100,356,-101,357,-102,358,-123,359,-103,360,-90,363,-91,372,-92,375,-93,378,-94,383,-95,387,-96,404,-78,411,-79,420,-80,421,-81,427,-82,437});
    states[301] = new State(-187);
    states[302] = new State(new int[]{120,303,15,84,16,85,21,86,22,87,23,88,26,89,35,196,40,91,41,92,53,93,3,101,12,103,14,104,158,105,178,106,33,107,51,108,60,109,38,312,62,315,63,318,64,321,48,328,47,329,46,330,11,331,52,332,34,333,45,334,65,335,56,336,69,337,70,338,59,339,30,340,67,341,119,300,124,347,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,352,43,172,54,183,5,223,6,224,109,51,110,54,1,361,25,364,17,373,20,376,49,379,58,384,61,388,24,405,42,408,36,412,68,422,32,428},new int[]{-73,304,-74,305,-76,306,-5,308,-6,311,-7,94,-10,264,-13,123,-12,102,-14,124,-11,125,-23,324,-24,342,-75,343,-77,344,-54,345,-88,346,-89,348,-97,349,-99,351,-115,179,-112,64,-113,139,-4,147,-104,353,-114,182,-98,354,-116,206,-100,356,-101,357,-102,358,-123,359,-103,360,-90,363,-91,372,-92,375,-93,378,-94,383,-95,387,-96,404,-78,411,-79,420,-80,421,-81,427,-82,437});
    states[303] = new State(-188);
    states[304] = new State(-190);
    states[305] = new State(-191);
    states[306] = new State(new int[]{124,307});
    states[307] = new State(-193);
    states[308] = new State(new int[]{123,82,3,101,12,103,14,104,158,105,178,106,33,107,35,237,51,108,60,109,38,110,62,111,63,112,64,113},new int[]{-40,309,-41,310,-42,23,-13,289,-12,102});
    states[309] = new State(new int[]{126,21,124,-195});
    states[310] = new State(-106);
    states[311] = new State(new int[]{127,200,123,-10,3,-10,12,-10,14,-10,158,-10,178,-10,33,-10,35,-10,51,-10,60,-10,38,-10,62,-10,63,-10,64,-10});
    states[312] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,209,6,210,108,213,127,-40,121,-40,78,-40,79,-40,80,-40,81,-40,82,-40,83,-40,84,-40,85,-40,86,-40,87,-40,88,-40,89,-40,94,-40,123,-40},new int[]{-44,313,-139,27,-138,28,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,179,-114,182,-98,190,-10,191,-13,123,-12,102,-14,124,-6,199,-116,206,-102,211,-103,212,-126,220,-99,221});
    states[313] = new State(new int[]{124,314});
    states[314] = new State(-261);
    states[315] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,209,6,210,108,213,127,-41,121,-41,78,-41,79,-41,80,-41,81,-41,82,-41,83,-41,84,-41,85,-41,86,-41,87,-41,88,-41,89,-41,94,-41,123,-41},new int[]{-44,316,-139,27,-138,28,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,179,-114,182,-98,190,-10,191,-13,123,-12,102,-14,124,-6,199,-116,206,-102,211,-103,212,-126,220,-99,221});
    states[316] = new State(new int[]{124,317});
    states[317] = new State(-265);
    states[318] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,209,6,210,108,213,127,-42,121,-42,78,-42,79,-42,80,-42,81,-42,82,-42,83,-42,84,-42,85,-42,86,-42,87,-42,88,-42,89,-42,94,-42,123,-42},new int[]{-44,319,-139,27,-138,28,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,179,-114,182,-98,190,-10,191,-13,123,-12,102,-14,124,-6,199,-116,206,-102,211,-103,212,-126,220,-99,221});
    states[319] = new State(new int[]{124,320});
    states[320] = new State(-262);
    states[321] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,209,6,210,108,213,127,-43,121,-43,78,-43,79,-43,80,-43,81,-43,82,-43,83,-43,84,-43,85,-43,86,-43,87,-43,88,-43,89,-43,94,-43,123,-43},new int[]{-44,322,-139,27,-138,28,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,179,-114,182,-98,190,-10,191,-13,123,-12,102,-14,124,-6,199,-116,206,-102,211,-103,212,-126,220,-99,221});
    states[322] = new State(new int[]{124,323});
    states[323] = new State(-263);
    states[324] = new State(new int[]{15,84,16,85,21,86,22,87,23,88,26,89,35,90,40,91,41,92,53,93,3,101,12,103,14,104,158,105,178,106,33,107,51,108,60,109,38,110,62,111,63,112,64,113,48,328,47,329,46,330,11,331,52,332,34,333,45,334,65,335,56,336,69,337,70,338,59,339,30,340,67,341},new int[]{-76,325,-24,327,-5,308,-6,83,-7,94,-10,95,-13,123,-12,102,-14,124,-11,125});
    states[325] = new State(new int[]{124,326});
    states[326] = new State(-194);
    states[327] = new State(-61);
    states[328] = new State(-62);
    states[329] = new State(-63);
    states[330] = new State(-64);
    states[331] = new State(-65);
    states[332] = new State(-66);
    states[333] = new State(-67);
    states[334] = new State(-68);
    states[335] = new State(-69);
    states[336] = new State(-70);
    states[337] = new State(-71);
    states[338] = new State(-72);
    states[339] = new State(-73);
    states[340] = new State(-74);
    states[341] = new State(-75);
    states[342] = new State(-60);
    states[343] = new State(-192);
    states[344] = new State(-196);
    states[345] = new State(-207);
    states[346] = new State(-209);
    states[347] = new State(-218);
    states[348] = new State(-210);
    states[349] = new State(new int[]{124,350});
    states[350] = new State(-219);
    states[351] = new State(-223);
    states[352] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,209,6,210,108,213},new int[]{-44,157,-139,27,-138,28,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,179,-114,182,-98,190,-10,191,-13,123,-12,102,-14,124,-6,199,-116,206,-102,211,-103,212,-126,220,-99,221});
    states[353] = new State(new int[]{121,-272,127,-272,109,-272,110,-272,124,-229,126,-229,118,-229});
    states[354] = new State(new int[]{119,300,121,-274,127,-274,109,-274,110,-274,124,-228},new int[]{-54,355});
    states[355] = new State(-220);
    states[356] = new State(-224);
    states[357] = new State(-225);
    states[358] = new State(new int[]{124,-226,126,-226,118,-226,109,-320,110,-320});
    states[359] = new State(new int[]{109,62,110,63});
    states[360] = new State(new int[]{109,-321,110,-321,124,-227,126,-227,118,-227});
    states[361] = new State(new int[]{124,362,120,-222,15,-222,16,-222,21,-222,22,-222,23,-222,26,-222,35,-222,40,-222,41,-222,53,-222,3,-222,12,-222,14,-222,158,-222,178,-222,33,-222,51,-222,60,-222,38,-222,62,-222,63,-222,64,-222,48,-222,47,-222,46,-222,11,-222,52,-222,34,-222,45,-222,65,-222,56,-222,69,-222,70,-222,59,-222,30,-222,67,-222,119,-222,71,-222,72,-222,73,-222,74,-222,75,-222,76,-222,77,-222,57,-222,117,-222,43,-222,54,-222,5,-222,6,-222,109,-222,110,-222,1,-222,25,-222,17,-222,20,-222,49,-222,58,-222,61,-222,24,-222,42,-222,36,-222,68,-222,32,-222,27,-222});
    states[362] = new State(-221);
    states[363] = new State(-211);
    states[364] = new State(new int[]{119,300,15,84,16,85,21,86,22,87,23,88,26,89,35,196,40,91,41,92,53,93,3,101,12,103,14,104,158,105,178,106,33,107,51,108,60,109,38,312,62,315,63,318,64,321,48,328,47,329,46,330,11,331,52,332,34,333,45,334,65,335,56,336,69,337,70,338,59,339,30,340,67,341,124,347,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,352,43,172,54,183,5,223,6,224,109,51,110,54,1,361,25,364,17,373,20,376,49,379,58,384,61,388,24,405,42,408,36,412,68,422,32,428},new int[]{-75,365,-77,344,-54,345,-74,371,-76,306,-5,308,-6,311,-7,94,-10,264,-13,123,-12,102,-14,124,-11,125,-23,324,-24,342,-88,346,-89,348,-97,349,-99,351,-115,179,-112,64,-113,139,-4,147,-104,353,-114,182,-98,354,-116,206,-100,356,-101,357,-102,358,-123,359,-103,360,-90,363,-91,372,-92,375,-93,378,-94,383,-95,387,-96,404,-78,411,-79,420,-80,421,-81,427,-82,437});
    states[365] = new State(new int[]{68,366});
    states[366] = new State(new int[]{117,367});
    states[367] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,209,6,210,108,213},new int[]{-44,368,-139,27,-138,28,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,179,-114,182,-98,190,-10,191,-13,123,-12,102,-14,124,-6,199,-116,206,-102,211,-103,212,-126,220,-99,221});
    states[368] = new State(new int[]{118,369});
    states[369] = new State(new int[]{124,370});
    states[370] = new State(-235);
    states[371] = new State(-208);
    states[372] = new State(-212);
    states[373] = new State(new int[]{124,374});
    states[374] = new State(-249);
    states[375] = new State(-213);
    states[376] = new State(new int[]{124,377});
    states[377] = new State(-250);
    states[378] = new State(-214);
    states[379] = new State(new int[]{124,380,109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,209,6,210,108,213},new int[]{-44,381,-139,27,-138,28,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,179,-114,182,-98,190,-10,191,-13,123,-12,102,-14,124,-6,199,-116,206,-102,211,-103,212,-126,220,-99,221});
    states[380] = new State(-251);
    states[381] = new State(new int[]{124,382});
    states[382] = new State(-252);
    states[383] = new State(-215);
    states[384] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,209,6,210,108,213},new int[]{-44,385,-139,27,-138,28,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,179,-114,182,-98,190,-10,191,-13,123,-12,102,-14,124,-6,199,-116,206,-102,211,-103,212,-126,220,-99,221});
    states[385] = new State(new int[]{124,386});
    states[386] = new State(-253);
    states[387] = new State(-216);
    states[388] = new State(new int[]{119,300},new int[]{-54,389});
    states[389] = new State(new int[]{18,395,31,393},new int[]{-109,390,-110,402,-111,403});
    states[390] = new State(new int[]{31,393,18,395,120,-254,15,-254,16,-254,21,-254,22,-254,23,-254,26,-254,35,-254,40,-254,41,-254,53,-254,3,-254,12,-254,14,-254,158,-254,178,-254,33,-254,51,-254,60,-254,38,-254,62,-254,63,-254,64,-254,48,-254,47,-254,46,-254,11,-254,52,-254,34,-254,45,-254,65,-254,56,-254,69,-254,70,-254,59,-254,30,-254,67,-254,119,-254,124,-254,71,-254,72,-254,73,-254,74,-254,75,-254,76,-254,77,-254,57,-254,117,-254,43,-254,54,-254,5,-254,6,-254,109,-254,110,-254,1,-254,25,-254,17,-254,20,-254,49,-254,58,-254,61,-254,24,-254,42,-254,36,-254,68,-254,32,-254,27,-254},new int[]{-110,391,-111,392});
    states[391] = new State(-255);
    states[392] = new State(-258);
    states[393] = new State(new int[]{119,300},new int[]{-54,394});
    states[394] = new State(-260);
    states[395] = new State(new int[]{117,396});
    states[396] = new State(new int[]{15,84,16,85,21,86,22,87,23,88,26,89,35,90,40,91,41,92,53,93,3,101,12,103,14,104,158,105,178,106,33,107,51,108,60,109,38,110,62,111,63,112,64,113},new int[]{-58,397,-5,400,-6,83,-7,94,-10,95,-13,123,-12,102,-14,124,-11,125});
    states[397] = new State(new int[]{118,398});
    states[398] = new State(new int[]{119,300},new int[]{-54,399});
    states[399] = new State(-259);
    states[400] = new State(new int[]{123,82,3,101,12,103,14,104,158,105,178,106,33,107,35,237,51,108,60,109,38,110,62,111,63,112,64,113},new int[]{-42,401,-13,289,-12,102});
    states[401] = new State(-146);
    states[402] = new State(-256);
    states[403] = new State(-257);
    states[404] = new State(-217);
    states[405] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,209,6,210,108,213},new int[]{-44,406,-139,27,-138,28,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,179,-114,182,-98,190,-10,191,-13,123,-12,102,-14,124,-6,199,-116,206,-102,211,-103,212,-126,220,-99,221});
    states[406] = new State(new int[]{124,407});
    states[407] = new State(-264);
    states[408] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,209,6,210,108,213},new int[]{-44,409,-139,27,-138,28,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,179,-114,182,-98,190,-10,191,-13,123,-12,102,-14,124,-6,199,-116,206,-102,211,-103,212,-126,220,-99,221});
    states[409] = new State(new int[]{124,410});
    states[410] = new State(-266);
    states[411] = new State(-197);
    states[412] = new State(new int[]{117,413});
    states[413] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,209,6,210,108,213},new int[]{-44,414,-139,27,-138,28,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,179,-114,182,-98,190,-10,191,-13,123,-12,102,-14,124,-6,199,-116,206,-102,211,-103,212,-126,220,-99,221});
    states[414] = new State(new int[]{118,415});
    states[415] = new State(new int[]{119,300,15,84,16,85,21,86,22,87,23,88,26,89,35,196,40,91,41,92,53,93,3,101,12,103,14,104,158,105,178,106,33,107,51,108,60,109,38,312,62,315,63,318,64,321,48,328,47,329,46,330,11,331,52,332,34,333,45,334,65,335,56,336,69,337,70,338,59,339,30,340,67,341,124,347,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,352,43,172,54,183,5,223,6,224,109,51,110,54,1,361,25,364,17,373,20,376,49,379,58,384,61,388,24,405,42,408,36,453,68,460,32,465},new int[]{-75,416,-83,417,-77,452,-54,345,-74,371,-76,306,-5,308,-6,311,-7,94,-10,264,-13,123,-12,102,-14,124,-11,125,-23,324,-24,342,-88,346,-89,348,-97,349,-99,351,-115,179,-112,64,-113,139,-4,147,-104,353,-114,182,-98,354,-116,206,-100,356,-101,357,-102,358,-123,359,-103,360,-90,363,-91,372,-92,375,-93,378,-94,383,-95,387,-96,404,-78,411,-79,420,-80,421,-81,427,-82,437,-84,474,-85,475,-86,476,-87,477});
    states[416] = new State(-230);
    states[417] = new State(new int[]{27,418});
    states[418] = new State(new int[]{119,300,15,84,16,85,21,86,22,87,23,88,26,89,35,196,40,91,41,92,53,93,3,101,12,103,14,104,158,105,178,106,33,107,51,108,60,109,38,312,62,315,63,318,64,321,48,328,47,329,46,330,11,331,52,332,34,333,45,334,65,335,56,336,69,337,70,338,59,339,30,340,67,341,124,347,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,352,43,172,54,183,5,223,6,224,109,51,110,54,1,361,25,364,17,373,20,376,49,379,58,384,61,388,24,405,42,408,36,412,68,422,32,428},new int[]{-75,419,-77,344,-54,345,-74,371,-76,306,-5,308,-6,311,-7,94,-10,264,-13,123,-12,102,-14,124,-11,125,-23,324,-24,342,-88,346,-89,348,-97,349,-99,351,-115,179,-112,64,-113,139,-4,147,-104,353,-114,182,-98,354,-116,206,-100,356,-101,357,-102,358,-123,359,-103,360,-90,363,-91,372,-92,375,-93,378,-94,383,-95,387,-96,404,-78,411,-79,420,-80,421,-81,427,-82,437});
    states[419] = new State(-231);
    states[420] = new State(-198);
    states[421] = new State(-199);
    states[422] = new State(new int[]{117,423});
    states[423] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,209,6,210,108,213},new int[]{-44,424,-139,27,-138,28,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,179,-114,182,-98,190,-10,191,-13,123,-12,102,-14,124,-6,199,-116,206,-102,211,-103,212,-126,220,-99,221});
    states[424] = new State(new int[]{118,425});
    states[425] = new State(new int[]{119,300,15,84,16,85,21,86,22,87,23,88,26,89,35,196,40,91,41,92,53,93,3,101,12,103,14,104,158,105,178,106,33,107,51,108,60,109,38,312,62,315,63,318,64,321,48,328,47,329,46,330,11,331,52,332,34,333,45,334,65,335,56,336,69,337,70,338,59,339,30,340,67,341,124,347,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,352,43,172,54,183,5,223,6,224,109,51,110,54,1,361,25,364,17,373,20,376,49,379,58,384,61,388,24,405,42,408,36,412,68,422,32,428},new int[]{-75,426,-77,344,-54,345,-74,371,-76,306,-5,308,-6,311,-7,94,-10,264,-13,123,-12,102,-14,124,-11,125,-23,324,-24,342,-88,346,-89,348,-97,349,-99,351,-115,179,-112,64,-113,139,-4,147,-104,353,-114,182,-98,354,-116,206,-100,356,-101,357,-102,358,-123,359,-103,360,-90,363,-91,372,-92,375,-93,378,-94,383,-95,387,-96,404,-78,411,-79,420,-80,421,-81,427,-82,437});
    states[426] = new State(-233);
    states[427] = new State(-200);
    states[428] = new State(new int[]{117,429});
    states[429] = new State(new int[]{3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,352,43,172,54,183,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,223,6,224,109,51,110,54,124,-240},new int[]{-105,430,-5,444,-108,450,-97,442,-99,351,-10,264,-13,123,-12,102,-14,124,-115,179,-112,64,-113,139,-4,147,-104,353,-114,182,-98,441,-6,311,-116,206,-100,356,-101,357,-102,358,-123,359,-103,360,-76,451,-7,94,-11,125});
    states[430] = new State(new int[]{124,431});
    states[431] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,209,6,210,108,213,124,-243},new int[]{-106,432,-44,443,-139,27,-138,28,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,179,-114,182,-98,190,-10,191,-13,123,-12,102,-14,124,-6,199,-116,206,-102,211,-103,212,-126,220,-99,221});
    states[432] = new State(new int[]{124,433});
    states[433] = new State(new int[]{3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,352,43,172,54,183,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,223,6,224,109,51,110,54,118,-245},new int[]{-107,434,-108,438,-97,442,-99,351,-10,191,-13,123,-12,102,-14,124,-115,179,-112,64,-113,139,-4,147,-104,353,-114,182,-98,441,-6,199,-116,206,-100,356,-101,357,-102,358,-123,359,-103,360});
    states[434] = new State(new int[]{118,435});
    states[435] = new State(new int[]{119,300,15,84,16,85,21,86,22,87,23,88,26,89,35,196,40,91,41,92,53,93,3,101,12,103,14,104,158,105,178,106,33,107,51,108,60,109,38,312,62,315,63,318,64,321,48,328,47,329,46,330,11,331,52,332,34,333,45,334,65,335,56,336,69,337,70,338,59,339,30,340,67,341,124,347,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,352,43,172,54,183,5,223,6,224,109,51,110,54,1,361,25,364,17,373,20,376,49,379,58,384,61,388,24,405,42,408,36,412,68,422,32,428},new int[]{-75,436,-77,344,-54,345,-74,371,-76,306,-5,308,-6,311,-7,94,-10,264,-13,123,-12,102,-14,124,-11,125,-23,324,-24,342,-88,346,-89,348,-97,349,-99,351,-115,179,-112,64,-113,139,-4,147,-104,353,-114,182,-98,354,-116,206,-100,356,-101,357,-102,358,-123,359,-103,360,-90,363,-91,372,-92,375,-93,378,-94,383,-95,387,-96,404,-78,411,-79,420,-80,421,-81,427,-82,437});
    states[436] = new State(-238);
    states[437] = new State(-201);
    states[438] = new State(new int[]{126,439,118,-246});
    states[439] = new State(new int[]{3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,352,43,172,54,183,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,223,6,224,109,51,110,54},new int[]{-97,440,-99,351,-10,191,-13,123,-12,102,-14,124,-115,179,-112,64,-113,139,-4,147,-104,353,-114,182,-98,441,-6,199,-116,206,-100,356,-101,357,-102,358,-123,359,-103,360});
    states[440] = new State(-248);
    states[441] = new State(new int[]{121,-274,127,-274,109,-274,110,-274,126,-228,124,-228,118,-228});
    states[442] = new State(-247);
    states[443] = new State(-244);
    states[444] = new State(new int[]{123,82,3,101,12,103,14,104,158,105,178,106,33,107,35,237,51,108,60,109,38,110,62,111,63,112,64,113},new int[]{-13,445,-40,309,-12,102,-41,310,-42,23});
    states[445] = new State(new int[]{125,446,78,-110,126,-110,124,-110});
    states[446] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,209,6,210,108,213},new int[]{-44,447,-139,27,-138,28,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,179,-114,182,-98,190,-10,191,-13,123,-12,102,-14,124,-6,199,-116,206,-102,211,-103,212,-126,220,-99,221});
    states[447] = new State(new int[]{118,448});
    states[448] = new State(new int[]{119,300,15,84,16,85,21,86,22,87,23,88,26,89,35,196,40,91,41,92,53,93,3,101,12,103,14,104,158,105,178,106,33,107,51,108,60,109,38,312,62,315,63,318,64,321,48,328,47,329,46,330,11,331,52,332,34,333,45,334,65,335,56,336,69,337,70,338,59,339,30,340,67,341,124,347,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,352,43,172,54,183,5,223,6,224,109,51,110,54,1,361,25,364,17,373,20,376,49,379,58,384,61,388,24,405,42,408,36,412,68,422,32,428},new int[]{-75,449,-77,344,-54,345,-74,371,-76,306,-5,308,-6,311,-7,94,-10,264,-13,123,-12,102,-14,124,-11,125,-23,324,-24,342,-88,346,-89,348,-97,349,-99,351,-115,179,-112,64,-113,139,-4,147,-104,353,-114,182,-98,354,-116,206,-100,356,-101,357,-102,358,-123,359,-103,360,-90,363,-91,372,-92,375,-93,378,-94,383,-95,387,-96,404,-78,411,-79,420,-80,421,-81,427,-82,437});
    states[449] = new State(-236);
    states[450] = new State(new int[]{126,439,124,-241});
    states[451] = new State(-242);
    states[452] = new State(new int[]{120,-196,15,-196,16,-196,21,-196,22,-196,23,-196,26,-196,35,-196,40,-196,41,-196,53,-196,3,-196,12,-196,14,-196,158,-196,178,-196,33,-196,51,-196,60,-196,38,-196,62,-196,63,-196,64,-196,48,-196,47,-196,46,-196,11,-196,52,-196,34,-196,45,-196,65,-196,56,-196,69,-196,70,-196,59,-196,30,-196,67,-196,119,-196,124,-196,71,-196,72,-196,73,-196,74,-196,75,-196,76,-196,77,-196,57,-196,117,-196,43,-196,54,-196,5,-196,6,-196,109,-196,110,-196,1,-196,25,-196,17,-196,20,-196,49,-196,58,-196,61,-196,24,-196,42,-196,36,-196,68,-196,32,-196,27,-202});
    states[453] = new State(new int[]{117,454});
    states[454] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,209,6,210,108,213},new int[]{-44,455,-139,27,-138,28,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,179,-114,182,-98,190,-10,191,-13,123,-12,102,-14,124,-6,199,-116,206,-102,211,-103,212,-126,220,-99,221});
    states[455] = new State(new int[]{118,456});
    states[456] = new State(new int[]{119,300,15,84,16,85,21,86,22,87,23,88,26,89,35,196,40,91,41,92,53,93,3,101,12,103,14,104,158,105,178,106,33,107,51,108,60,109,38,312,62,315,63,318,64,321,48,328,47,329,46,330,11,331,52,332,34,333,45,334,65,335,56,336,69,337,70,338,59,339,30,340,67,341,124,347,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,352,43,172,54,183,5,223,6,224,109,51,110,54,1,361,25,364,17,373,20,376,49,379,58,384,61,388,24,405,42,408,36,453,68,460,32,465},new int[]{-75,416,-83,457,-77,452,-54,345,-74,371,-76,306,-5,308,-6,311,-7,94,-10,264,-13,123,-12,102,-14,124,-11,125,-23,324,-24,342,-88,346,-89,348,-97,349,-99,351,-115,179,-112,64,-113,139,-4,147,-104,353,-114,182,-98,354,-116,206,-100,356,-101,357,-102,358,-123,359,-103,360,-90,363,-91,372,-92,375,-93,378,-94,383,-95,387,-96,404,-78,411,-79,420,-80,421,-81,427,-82,437,-84,474,-85,475,-86,476,-87,477});
    states[457] = new State(new int[]{27,458});
    states[458] = new State(new int[]{119,300,15,84,16,85,21,86,22,87,23,88,26,89,35,196,40,91,41,92,53,93,3,101,12,103,14,104,158,105,178,106,33,107,51,108,60,109,38,312,62,315,63,318,64,321,48,328,47,329,46,330,11,331,52,332,34,333,45,334,65,335,56,336,69,337,70,338,59,339,30,340,67,341,124,347,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,352,43,172,54,183,5,223,6,224,109,51,110,54,1,361,25,364,17,373,20,376,49,379,58,384,61,388,24,405,42,408,36,453,68,460,32,465},new int[]{-75,419,-83,459,-77,452,-54,345,-74,371,-76,306,-5,308,-6,311,-7,94,-10,264,-13,123,-12,102,-14,124,-11,125,-23,324,-24,342,-88,346,-89,348,-97,349,-99,351,-115,179,-112,64,-113,139,-4,147,-104,353,-114,182,-98,354,-116,206,-100,356,-101,357,-102,358,-123,359,-103,360,-90,363,-91,372,-92,375,-93,378,-94,383,-95,387,-96,404,-78,411,-79,420,-80,421,-81,427,-82,437,-84,474,-85,475,-86,476,-87,477});
    states[459] = new State(-232);
    states[460] = new State(new int[]{117,461});
    states[461] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,209,6,210,108,213},new int[]{-44,462,-139,27,-138,28,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,179,-114,182,-98,190,-10,191,-13,123,-12,102,-14,124,-6,199,-116,206,-102,211,-103,212,-126,220,-99,221});
    states[462] = new State(new int[]{118,463});
    states[463] = new State(new int[]{119,300,15,84,16,85,21,86,22,87,23,88,26,89,35,196,40,91,41,92,53,93,3,101,12,103,14,104,158,105,178,106,33,107,51,108,60,109,38,312,62,315,63,318,64,321,48,328,47,329,46,330,11,331,52,332,34,333,45,334,65,335,56,336,69,337,70,338,59,339,30,340,67,341,124,347,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,352,43,172,54,183,5,223,6,224,109,51,110,54,1,361,25,364,17,373,20,376,49,379,58,384,61,388,24,405,42,408,36,453,68,460,32,465},new int[]{-75,426,-83,464,-77,452,-54,345,-74,371,-76,306,-5,308,-6,311,-7,94,-10,264,-13,123,-12,102,-14,124,-11,125,-23,324,-24,342,-88,346,-89,348,-97,349,-99,351,-115,179,-112,64,-113,139,-4,147,-104,353,-114,182,-98,354,-116,206,-100,356,-101,357,-102,358,-123,359,-103,360,-90,363,-91,372,-92,375,-93,378,-94,383,-95,387,-96,404,-78,411,-79,420,-80,421,-81,427,-82,437,-84,474,-85,475,-86,476,-87,477});
    states[464] = new State(-234);
    states[465] = new State(new int[]{117,466});
    states[466] = new State(new int[]{3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,352,43,172,54,183,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,223,6,224,109,51,110,54,124,-240},new int[]{-105,467,-5,478,-108,450,-97,442,-99,351,-10,264,-13,123,-12,102,-14,124,-115,179,-112,64,-113,139,-4,147,-104,353,-114,182,-98,441,-6,311,-116,206,-100,356,-101,357,-102,358,-123,359,-103,360,-76,451,-7,94,-11,125});
    states[467] = new State(new int[]{124,468});
    states[468] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,209,6,210,108,213,124,-243},new int[]{-106,469,-44,443,-139,27,-138,28,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,179,-114,182,-98,190,-10,191,-13,123,-12,102,-14,124,-6,199,-116,206,-102,211,-103,212,-126,220,-99,221});
    states[469] = new State(new int[]{124,470});
    states[470] = new State(new int[]{3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,352,43,172,54,183,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,223,6,224,109,51,110,54,118,-245},new int[]{-107,471,-108,438,-97,442,-99,351,-10,191,-13,123,-12,102,-14,124,-115,179,-112,64,-113,139,-4,147,-104,353,-114,182,-98,441,-6,199,-116,206,-100,356,-101,357,-102,358,-123,359,-103,360});
    states[471] = new State(new int[]{118,472});
    states[472] = new State(new int[]{119,300,15,84,16,85,21,86,22,87,23,88,26,89,35,196,40,91,41,92,53,93,3,101,12,103,14,104,158,105,178,106,33,107,51,108,60,109,38,312,62,315,63,318,64,321,48,328,47,329,46,330,11,331,52,332,34,333,45,334,65,335,56,336,69,337,70,338,59,339,30,340,67,341,124,347,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,352,43,172,54,183,5,223,6,224,109,51,110,54,1,361,25,364,17,373,20,376,49,379,58,384,61,388,24,405,42,408,36,453,68,460,32,465},new int[]{-75,436,-83,473,-77,452,-54,345,-74,371,-76,306,-5,308,-6,311,-7,94,-10,264,-13,123,-12,102,-14,124,-11,125,-23,324,-24,342,-88,346,-89,348,-97,349,-99,351,-115,179,-112,64,-113,139,-4,147,-104,353,-114,182,-98,354,-116,206,-100,356,-101,357,-102,358,-123,359,-103,360,-90,363,-91,372,-92,375,-93,378,-94,383,-95,387,-96,404,-78,411,-79,420,-80,421,-81,427,-82,437,-84,474,-85,475,-86,476,-87,477});
    states[473] = new State(-239);
    states[474] = new State(-203);
    states[475] = new State(-204);
    states[476] = new State(-205);
    states[477] = new State(-206);
    states[478] = new State(new int[]{123,82,3,101,12,103,14,104,158,105,178,106,33,107,35,237,51,108,60,109,38,110,62,111,63,112,64,113},new int[]{-13,479,-40,309,-12,102,-41,310,-42,23});
    states[479] = new State(new int[]{125,480,78,-110,126,-110,124,-110});
    states[480] = new State(new int[]{109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,209,6,210,108,213},new int[]{-44,481,-139,27,-138,28,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,179,-114,182,-98,190,-10,191,-13,123,-12,102,-14,124,-6,199,-116,206,-102,211,-103,212,-126,220,-99,221});
    states[481] = new State(new int[]{118,482});
    states[482] = new State(new int[]{119,300,15,84,16,85,21,86,22,87,23,88,26,89,35,196,40,91,41,92,53,93,3,101,12,103,14,104,158,105,178,106,33,107,51,108,60,109,38,312,62,315,63,318,64,321,48,328,47,329,46,330,11,331,52,332,34,333,45,334,65,335,56,336,69,337,70,338,59,339,30,340,67,341,124,347,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,352,43,172,54,183,5,223,6,224,109,51,110,54,1,361,25,364,17,373,20,376,49,379,58,384,61,388,24,405,42,408,36,412,68,422,32,484},new int[]{-75,449,-86,483,-77,344,-54,345,-74,371,-76,306,-5,308,-6,311,-7,94,-10,264,-13,123,-12,102,-14,124,-11,125,-23,324,-24,342,-88,346,-89,348,-97,349,-99,351,-115,179,-112,64,-113,139,-4,147,-104,353,-114,182,-98,354,-116,206,-100,356,-101,357,-102,358,-123,359,-103,360,-90,363,-91,372,-92,375,-93,378,-94,383,-95,387,-96,404,-78,411,-79,420,-80,421,-81,427,-82,437});
    states[483] = new State(-237);
    states[484] = new State(new int[]{117,485});
    states[485] = new State(new int[]{3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,352,43,172,54,183,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,223,6,224,109,51,110,54,124,-240},new int[]{-105,467,-5,444,-108,450,-97,442,-99,351,-10,264,-13,123,-12,102,-14,124,-115,179,-112,64,-113,139,-4,147,-104,353,-114,182,-98,441,-6,311,-116,206,-100,356,-101,357,-102,358,-123,359,-103,360,-76,451,-7,94,-11,125});
    states[486] = new State(-189);
    states[487] = new State(-135);
    states[488] = new State(new int[]{51,489,48,328,47,329,46,330,11,331,52,332,34,333,45,334,65,335,56,336,69,337,70,338,59,339,30,340,67,341},new int[]{-24,327});
    states[489] = new State(new int[]{119,300,124,487},new int[]{-53,490,-54,299});
    states[490] = new State(-133);
    states[491] = new State(new int[]{119,300,124,487},new int[]{-53,492,-54,299});
    states[492] = new State(-130);
    states[493] = new State(new int[]{33,494,51,489,48,328,47,329,46,330,11,331,52,332,34,333,45,334,65,335,56,336,69,337,70,338,59,339,30,340,67,341},new int[]{-24,327});
    states[494] = new State(new int[]{119,300,124,487},new int[]{-53,495,-54,299});
    states[495] = new State(-131);
    states[496] = new State(new int[]{33,491,48,328,47,329,46,330,11,331,52,332,34,333,45,334,65,335,56,336,69,337,70,338,59,339,30,340,67,341,120,-128},new int[]{-51,497,-23,498,-24,342});
    states[497] = new State(-129);
    states[498] = new State(new int[]{33,494,48,328,47,329,46,330,11,331,52,332,34,333,45,334,65,335,56,336,69,337,70,338,59,339,30,340,67,341},new int[]{-24,327});
    states[499] = new State(new int[]{118,500,15,84,16,85,21,86,22,87,23,88,26,89,35,90,40,91,41,92,53,93,3,101,12,103,14,104,158,105,178,106,33,107,51,108,60,109,38,110,62,111,63,112,64,113},new int[]{-57,501,-58,505,-5,400,-6,83,-7,94,-10,95,-13,123,-12,102,-14,124,-11,125});
    states[500] = new State(-142);
    states[501] = new State(new int[]{118,502,126,503});
    states[502] = new State(-143);
    states[503] = new State(new int[]{15,84,16,85,21,86,22,87,23,88,26,89,35,90,40,91,41,92,53,93,3,101,12,103,14,104,158,105,178,106,33,107,51,108,60,109,38,110,62,111,63,112,64,113},new int[]{-58,504,-5,400,-6,83,-7,94,-10,95,-13,123,-12,102,-14,124,-11,125});
    states[504] = new State(-145);
    states[505] = new State(-144);
    states[506] = new State(new int[]{127,96,117,507,94,115,123,-28,3,-28,12,-28,14,-28,158,-28,178,-28,33,-28,35,-28,51,-28,60,-28,38,-28,62,-28,63,-28,64,-28},new int[]{-8,114});
    states[507] = new State(new int[]{118,508,15,84,16,85,21,86,22,87,23,88,26,89,35,90,40,91,41,92,53,93,3,101,12,103,14,104,158,105,178,106,33,107,51,108,60,109,38,110,62,111,63,112,64,113},new int[]{-57,509,-58,505,-5,400,-6,83,-7,94,-10,95,-13,123,-12,102,-14,124,-11,125});
    states[508] = new State(-152);
    states[509] = new State(new int[]{118,510,126,503});
    states[510] = new State(-153);
    states[511] = new State(new int[]{66,520,19,523,39,539,28,562,15,84,16,85,21,86,22,87,23,88,26,89,35,90,40,91,41,92,53,93,3,101,12,103,14,104,158,105,178,106,33,107,51,108,60,109,38,110,62,111,63,112,64,113,48,328,47,329,46,330,11,331,52,332,34,333,45,334,65,335,56,336,69,337,70,338,59,339,30,340,67,341},new int[]{-5,512,-24,327,-59,573,-6,83,-7,94,-10,506,-13,123,-12,102,-14,124,-11,125});
    states[512] = new State(new int[]{123,82,3,101,12,103,14,104,158,105,178,106,33,107,35,237,51,108,60,109,38,110,62,111,63,112,64,113},new int[]{-40,513,-56,515,-13,516,-41,310,-42,23,-12,102});
    states[513] = new State(new int[]{124,514,126,21});
    states[514] = new State(-104);
    states[515] = new State(-138);
    states[516] = new State(new int[]{119,517,117,499,78,-110,124,-110,126,-110});
    states[517] = new State(new int[]{33,491,48,328,47,329,46,330,11,331,52,332,34,333,45,334,65,335,56,336,69,337,70,338,59,339,30,340,67,341,51,297},new int[]{-50,518,-51,295,-23,493,-24,342,-52,496});
    states[518] = new State(new int[]{120,519});
    states[519] = new State(-125);
    states[520] = new State(new int[]{3,101,12,103,14,104,158,105,178,106,33,107,35,237,51,108,60,109,38,110,62,111,63,112,64,113},new int[]{-56,521,-13,522,-12,102});
    states[521] = new State(-140);
    states[522] = new State(new int[]{117,499});
    states[523] = new State(new int[]{3,101,12,103,14,104,158,105,178,106,33,107,35,237,51,108,60,109,38,110,62,111,63,112,64,113},new int[]{-13,524,-12,102});
    states[524] = new State(new int[]{119,11,37,532,29,537},new int[]{-26,525,-27,526,-28,528});
    states[525] = new State(-81);
    states[526] = new State(new int[]{119,11},new int[]{-26,527});
    states[527] = new State(-82);
    states[528] = new State(new int[]{119,11,37,532},new int[]{-26,529,-27,530});
    states[529] = new State(-83);
    states[530] = new State(new int[]{119,11},new int[]{-26,531});
    states[531] = new State(-84);
    states[532] = new State(new int[]{3,101,12,103,14,104,158,105,178,106,33,107,35,90,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93},new int[]{-29,533,-7,536,-10,95,-13,123,-12,102,-14,124,-11,125,-5,265,-6,83});
    states[533] = new State(new int[]{126,534,119,-86});
    states[534] = new State(new int[]{3,101,12,103,14,104,158,105,178,106,33,107,35,90,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93},new int[]{-7,535,-10,95,-13,123,-12,102,-14,124,-11,125,-5,265,-6,83});
    states[535] = new State(new int[]{126,-88,119,-88,123,-11});
    states[536] = new State(new int[]{126,-87,119,-87,123,-11});
    states[537] = new State(new int[]{3,101,12,103,14,104,158,105,178,106,33,107,35,90,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93},new int[]{-7,538,-10,95,-13,123,-12,102,-14,124,-11,125,-5,265,-6,83});
    states[538] = new State(new int[]{119,-85,37,-85,123,-11});
    states[539] = new State(new int[]{3,101,12,103,14,104,158,105,178,106,33,107,35,237,51,108,60,109,38,110,62,111,63,112,64,113},new int[]{-13,540,-12,102});
    states[540] = new State(new int[]{119,546,29,560},new int[]{-64,541,-65,542});
    states[541] = new State(-165);
    states[542] = new State(new int[]{126,544,119,546},new int[]{-64,543});
    states[543] = new State(-166);
    states[544] = new State(new int[]{3,101,12,103,14,104,158,105,178,106,33,107,35,237,51,108,60,109,38,110,62,111,63,112,64,113},new int[]{-10,545,-13,123,-12,102,-14,124});
    states[545] = new State(new int[]{127,96,126,-168,119,-168});
    states[546] = new State(new int[]{120,547,48,328,47,329,46,330,11,331,52,332,34,333,45,334,65,335,56,336,69,337,70,338,59,339,30,340,67,341,15,84,16,85,21,86,22,87,23,88,26,89,35,90,40,91,41,92,53,93,3,101,12,103,14,104,158,105,178,106,33,107,51,108,60,109,38,110,62,111,63,112,64,113,66,557},new int[]{-66,548,-67,559,-68,551,-55,552,-23,554,-24,342,-5,556,-6,83,-7,94,-10,95,-13,123,-12,102,-14,124,-11,125});
    states[547] = new State(-169);
    states[548] = new State(new int[]{120,549,48,328,47,329,46,330,11,331,52,332,34,333,45,334,65,335,56,336,69,337,70,338,59,339,30,340,67,341,15,84,16,85,21,86,22,87,23,88,26,89,35,90,40,91,41,92,53,93,3,101,12,103,14,104,158,105,178,106,33,107,51,108,60,109,38,110,62,111,63,112,64,113,66,557},new int[]{-67,550,-68,551,-55,552,-23,554,-24,342,-5,556,-6,83,-7,94,-10,95,-13,123,-12,102,-14,124,-11,125});
    states[549] = new State(-170);
    states[550] = new State(-172);
    states[551] = new State(-173);
    states[552] = new State(new int[]{124,553});
    states[553] = new State(-174);
    states[554] = new State(new int[]{66,520,15,84,16,85,21,86,22,87,23,88,26,89,35,90,40,91,41,92,53,93,3,101,12,103,14,104,158,105,178,106,33,107,51,108,60,109,38,110,62,111,63,112,64,113,48,328,47,329,46,330,11,331,52,332,34,333,45,334,65,335,56,336,69,337,70,338,59,339,30,340,67,341},new int[]{-5,555,-24,327,-6,83,-7,94,-10,95,-13,123,-12,102,-14,124,-11,125});
    states[555] = new State(new int[]{123,82,3,101,12,103,14,104,158,105,178,106,33,107,35,237,51,108,60,109,38,110,62,111,63,112,64,113},new int[]{-56,515,-13,522,-12,102});
    states[556] = new State(new int[]{123,82,3,101,12,103,14,104,158,105,178,106,33,107,35,237,51,108,60,109,38,110,62,111,63,112,64,113},new int[]{-56,290,-13,522,-12,102});
    states[557] = new State(new int[]{3,101,12,103,14,104,158,105,178,106,33,107,35,237,51,108,60,109,38,110,62,111,63,112,64,113},new int[]{-56,558,-13,522,-12,102});
    states[558] = new State(-141);
    states[559] = new State(-171);
    states[560] = new State(new int[]{3,101,12,103,14,104,158,105,178,106,33,107,35,237,51,108,60,109,38,110,62,111,63,112,64,113},new int[]{-10,561,-13,123,-12,102,-14,124});
    states[561] = new State(new int[]{127,96,126,-167,119,-167});
    states[562] = new State(new int[]{3,101,12,103,14,104,158,105,178,106,33,107,35,237,51,108,60,109,38,110,62,111,63,112,64,113},new int[]{-13,563,-12,102});
    states[563] = new State(new int[]{119,565},new int[]{-69,564});
    states[564] = new State(-177);
    states[565] = new State(new int[]{120,566,3,101,12,103,14,104,158,105,178,106,33,107,35,237,51,108,60,109,38,110,62,111,63,112,64,113},new int[]{-70,567,-71,572,-13,571,-12,102});
    states[566] = new State(-178);
    states[567] = new State(new int[]{120,568,126,569});
    states[568] = new State(-179);
    states[569] = new State(new int[]{3,101,12,103,14,104,158,105,178,106,33,107,35,237,51,108,60,109,38,110,62,111,63,112,64,113},new int[]{-71,570,-13,571,-12,102});
    states[570] = new State(-181);
    states[571] = new State(-182);
    states[572] = new State(-180);
    states[573] = new State(new int[]{119,575},new int[]{-60,574});
    states[574] = new State(-151);
    states[575] = new State(new int[]{120,576,57,583,54,590,15,84,16,85,21,86,22,87,23,88,26,89,35,196,40,91,41,92,53,93,3,101,12,103,14,104,158,105,178,106,33,107,51,108,60,109,38,312,62,315,63,318,64,321,48,328,47,329,46,330,11,331,52,332,34,333,45,334,65,335,56,336,69,337,70,338,59,339,30,340,67,341,119,300,124,347,71,148,72,149,73,150,74,151,75,152,76,153,77,154,117,352,43,172,5,223,6,224,109,51,110,54,1,361,25,364,17,373,20,376,49,379,58,384,61,388,24,405,42,408,36,412,68,422,32,428},new int[]{-61,577,-62,581,-73,486,-74,305,-76,306,-5,308,-6,311,-7,94,-10,264,-13,123,-12,102,-14,124,-11,125,-23,324,-24,342,-75,343,-77,344,-54,345,-88,346,-89,348,-97,349,-99,351,-115,179,-112,64,-113,139,-4,147,-104,353,-114,182,-98,354,-116,206,-100,356,-101,357,-102,358,-123,359,-103,360,-90,363,-91,372,-92,375,-93,378,-94,383,-95,387,-96,404,-78,411,-79,420,-80,421,-81,427,-82,437});
    states[576] = new State(-154);
    states[577] = new State(new int[]{120,578,15,84,16,85,21,86,22,87,23,88,26,89,35,196,40,91,41,92,53,93,3,101,12,103,14,104,158,105,178,106,33,107,51,108,60,109,38,312,62,315,63,318,64,321,48,328,47,329,46,330,11,331,52,332,34,333,45,334,65,335,56,336,69,337,70,338,59,339,30,340,67,341,119,300,124,347,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,352,43,172,54,183,5,223,6,224,109,51,110,54,1,361,25,364,17,373,20,376,49,379,58,384,61,388,24,405,42,408,36,412,68,422,32,428},new int[]{-62,579,-73,486,-74,305,-76,306,-5,308,-6,311,-7,94,-10,264,-13,123,-12,102,-14,124,-11,125,-23,324,-24,342,-75,343,-77,344,-54,345,-88,346,-89,348,-97,349,-99,351,-115,179,-112,64,-113,139,-4,147,-104,353,-114,182,-98,354,-116,206,-100,356,-101,357,-102,358,-123,359,-103,360,-90,363,-91,372,-92,375,-93,378,-94,383,-95,387,-96,404,-78,411,-79,420,-80,421,-81,427,-82,437});
    states[578] = new State(-155);
    states[579] = new State(new int[]{120,580,15,84,16,85,21,86,22,87,23,88,26,89,35,196,40,91,41,92,53,93,3,101,12,103,14,104,158,105,178,106,33,107,51,108,60,109,38,312,62,315,63,318,64,321,48,328,47,329,46,330,11,331,52,332,34,333,45,334,65,335,56,336,69,337,70,338,59,339,30,340,67,341,119,300,124,347,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,352,43,172,54,183,5,223,6,224,109,51,110,54,1,361,25,364,17,373,20,376,49,379,58,384,61,388,24,405,42,408,36,412,68,422,32,428},new int[]{-73,304,-74,305,-76,306,-5,308,-6,311,-7,94,-10,264,-13,123,-12,102,-14,124,-11,125,-23,324,-24,342,-75,343,-77,344,-54,345,-88,346,-89,348,-97,349,-99,351,-115,179,-112,64,-113,139,-4,147,-104,353,-114,182,-98,354,-116,206,-100,356,-101,357,-102,358,-123,359,-103,360,-90,363,-91,372,-92,375,-93,378,-94,383,-95,387,-96,404,-78,411,-79,420,-80,421,-81,427,-82,437});
    states[580] = new State(-157);
    states[581] = new State(new int[]{120,582,15,84,16,85,21,86,22,87,23,88,26,89,35,196,40,91,41,92,53,93,3,101,12,103,14,104,158,105,178,106,33,107,51,108,60,109,38,312,62,315,63,318,64,321,48,328,47,329,46,330,11,331,52,332,34,333,45,334,65,335,56,336,69,337,70,338,59,339,30,340,67,341,119,300,124,347,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,352,43,172,54,183,5,223,6,224,109,51,110,54,1,361,25,364,17,373,20,376,49,379,58,384,61,388,24,405,42,408,36,412,68,422,32,428},new int[]{-73,304,-74,305,-76,306,-5,308,-6,311,-7,94,-10,264,-13,123,-12,102,-14,124,-11,125,-23,324,-24,342,-75,343,-77,344,-54,345,-88,346,-89,348,-97,349,-99,351,-115,179,-112,64,-113,139,-4,147,-104,353,-114,182,-98,354,-116,206,-100,356,-101,357,-102,358,-123,359,-103,360,-90,363,-91,372,-92,375,-93,378,-94,383,-95,387,-96,404,-78,411,-79,420,-80,421,-81,427,-82,437});
    states[582] = new State(-156);
    states[583] = new State(new int[]{117,584,121,-270,127,-270,109,-270,110,-270});
    states[584] = new State(new int[]{118,585,109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,209,6,210,108,213},new int[]{-63,587,-44,178,-139,27,-138,28,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,179,-114,182,-98,190,-10,191,-13,123,-12,102,-14,124,-6,199,-116,206,-102,211,-103,212,-126,220,-99,221});
    states[585] = new State(new int[]{124,586});
    states[586] = new State(-158);
    states[587] = new State(new int[]{118,588,126,71});
    states[588] = new State(new int[]{124,589});
    states[589] = new State(-159);
    states[590] = new State(new int[]{117,591,127,184});
    states[591] = new State(new int[]{118,592,109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,209,6,210,108,213},new int[]{-63,594,-44,178,-139,27,-138,28,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,179,-114,182,-98,190,-10,191,-13,123,-12,102,-14,124,-6,199,-116,206,-102,211,-103,212,-126,220,-99,221});
    states[592] = new State(new int[]{124,593});
    states[593] = new State(-160);
    states[594] = new State(new int[]{118,595,126,71});
    states[595] = new State(new int[]{124,596});
    states[596] = new State(-161);
    states[597] = new State(new int[]{119,300,66,-66,19,-66,39,-66,28,-66,15,-66,16,-66,21,-66,22,-66,23,-66,26,-66,35,-66,40,-66,41,-66,53,-66,3,-66,12,-66,14,-66,158,-66,178,-66,33,-66,51,-66,60,-66,38,-66,62,-66,63,-66,64,-66,48,-66,47,-66,46,-66,11,-66,52,-66,34,-66,45,-66,65,-66,56,-66,69,-66,70,-66,59,-66,30,-66,67,-66},new int[]{-54,598});
    states[598] = new State(-149);
    states[599] = new State(-105);
    states[600] = new State(-97);
    states[601] = new State(new int[]{15,84,16,85,21,86,22,87,23,88,26,89,35,90,40,91,41,92,53,93,3,101,12,103,14,104,158,105,178,106,33,107,51,108,60,109,38,110,62,111,63,112,64,113,48,328,47,329,46,330,11,331,52,332,34,333,45,334,65,335,56,336,69,337,70,338,59,339,30,340,67,341,1,599,13,612,66,557,19,6,39,622,28,627},new int[]{-35,602,-122,603,-37,604,-17,605,-19,606,-21,607,-5,608,-6,83,-7,94,-10,95,-13,123,-12,102,-14,124,-11,125,-23,610,-24,342,-55,618});
    states[602] = new State(-102);
    states[603] = new State(-304);
    states[604] = new State(-136);
    states[605] = new State(-76);
    states[606] = new State(-162);
    states[607] = new State(-175);
    states[608] = new State(new int[]{123,82,3,101,12,103,14,104,158,105,178,106,33,107,35,237,51,108,60,109,38,110,62,111,63,112,64,113},new int[]{-40,19,-56,290,-41,310,-42,23,-13,609,-12,102});
    states[609] = new State(new int[]{117,499,78,-110,124,-110,126,-110});
    states[610] = new State(new int[]{66,520,19,523,39,539,28,562,15,84,16,85,21,86,22,87,23,88,26,89,35,90,40,91,41,92,53,93,3,101,12,103,14,104,158,105,178,106,33,107,51,108,60,109,38,110,62,111,63,112,64,113,48,328,47,329,46,330,11,331,52,332,34,333,45,334,65,335,56,336,69,337,70,338,59,339,30,340,67,341},new int[]{-5,611,-24,327,-6,83,-7,94,-10,95,-13,123,-12,102,-14,124,-11,125});
    states[611] = new State(new int[]{123,82,3,101,12,103,14,104,158,105,178,106,33,107,35,237,51,108,60,109,38,110,62,111,63,112,64,113},new int[]{-40,513,-56,515,-41,310,-42,23,-13,609,-12,102});
    states[612] = new State(new int[]{3,101,12,103,14,104,158,105,178,106,33,107,35,237,51,108,60,109,38,110,62,111,63,112,64,113},new int[]{-13,613,-12,102});
    states[613] = new State(new int[]{117,614,19,-305,48,-305,47,-305,46,-305,11,-305,52,-305,34,-305,45,-305,65,-305,56,-305,69,-305,70,-305,59,-305,30,-305,67,-305,13,-305,39,-305,28,-305,15,-305,16,-305,21,-305,22,-305,23,-305,26,-305,35,-305,40,-305,41,-305,53,-305,3,-305,12,-305,14,-305,158,-305,178,-305,33,-305,51,-305,60,-305,38,-305,62,-305,63,-305,64,-305,1,-305,66,-305});
    states[614] = new State(new int[]{118,615,109,51,110,54,104,56,105,58,71,148,72,149,73,150,74,151,75,152,76,153,77,154,57,155,117,156,43,172,54,183,3,101,12,103,14,104,158,105,178,106,33,107,35,196,51,108,60,109,38,110,62,111,63,112,64,113,15,84,16,85,21,86,22,87,23,88,26,89,40,91,41,92,53,93,5,209,6,210,108,213,119,282},new int[]{-72,616,-43,288,-44,26,-139,27,-138,28,-137,29,-136,73,-135,74,-134,75,-133,76,-132,77,-130,143,-129,131,-128,144,-127,145,-124,146,-100,50,-101,53,-125,60,-123,61,-112,64,-113,139,-4,147,-104,171,-115,179,-114,182,-98,190,-10,191,-13,123,-12,102,-14,124,-6,199,-116,206,-102,211,-103,212,-126,220,-99,221,-45,281});
    states[615] = new State(-306);
    states[616] = new State(new int[]{118,617,126,286});
    states[617] = new State(-307);
    states[618] = new State(new int[]{119,300,124,621},new int[]{-47,619,-54,620});
    states[619] = new State(-137);
    states[620] = new State(-147);
    states[621] = new State(-148);
    states[622] = new State(new int[]{3,101,12,103,14,104,158,105,178,106,33,107,35,237,51,108,60,109,38,110,62,111,63,112,64,113},new int[]{-13,623,-12,102});
    states[623] = new State(new int[]{119,546,29,560},new int[]{-64,624,-65,625});
    states[624] = new State(-163);
    states[625] = new State(new int[]{126,544,119,546},new int[]{-64,626});
    states[626] = new State(-164);
    states[627] = new State(new int[]{3,101,12,103,14,104,158,105,178,106,33,107,35,237,51,108,60,109,38,110,62,111,63,112,64,113},new int[]{-13,628,-12,102});
    states[628] = new State(new int[]{119,565},new int[]{-69,629});
    states[629] = new State(-176);
    states[630] = new State(-303);
    states[631] = new State(-98);
    states[632] = new State(-99);
    states[633] = new State(-100);
    states[634] = new State(-101);
    states[635] = new State(-55);
    states[636] = new State(-56);
    states[637] = new State(-57);
    states[638] = new State(-58);
    states[639] = new State(-59);
    states[640] = new State(-94);
    states[641] = new State(-95);
    states[642] = new State(new int[]{119,575},new int[]{-60,643});
    states[643] = new State(-150);
    states[644] = new State(-91);
    states[645] = new State(new int[]{119,11,37,532},new int[]{-26,646,-27,647});
    states[646] = new State(-79);
    states[647] = new State(new int[]{119,11},new int[]{-26,648});
    states[648] = new State(-80);
    states[649] = new State(new int[]{19,523,39,539,28,562,48,328,47,329,46,330,11,331,52,332,34,333,45,334,65,335,56,336,69,337,70,338,59,339,30,340,67,341},new int[]{-24,327});
    states[650] = new State(new int[]{19,6,48,328,47,329,46,330,11,331,52,332,34,333,45,334,65,335,56,336,69,337,70,338,59,339,30,340,67,341,13,612,39,622,28,627},new int[]{-17,605,-122,603,-19,606,-21,607,-23,649,-24,342});
    states[651] = new State(-53);
    states[652] = new State(new int[]{119,300,124,621},new int[]{-47,653,-54,620});
    states[653] = new State(-113);
    states[654] = new State(new int[]{3,101,12,103,14,104,158,105,178,106,33,107,35,237,51,108,60,109,38,110,62,111,63,112,64,113},new int[]{-13,655,-12,102});
    states[655] = new State(new int[]{44,656});
    states[656] = new State(new int[]{3,101,12,103,14,104,158,105,178,106,33,107,35,237,51,108,60,109,38,110,62,111,63,112,64,113},new int[]{-13,657,-12,102});
    states[657] = new State(new int[]{117,658});
    states[658] = new State(new int[]{14,663,12,667},new int[]{-48,659,-49,672});
    states[659] = new State(new int[]{118,660,126,661});
    states[660] = new State(-114);
    states[661] = new State(new int[]{14,663,12,667},new int[]{-49,662});
    states[662] = new State(-116);
    states[663] = new State(new int[]{38,664,63,665,24,666});
    states[664] = new State(-117);
    states[665] = new State(-118);
    states[666] = new State(-119);
    states[667] = new State(new int[]{38,668,63,669,24,670,62,671});
    states[668] = new State(-120);
    states[669] = new State(-121);
    states[670] = new State(-122);
    states[671] = new State(-123);
    states[672] = new State(-115);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,2});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-4, new int[]{71});
    rules[4] = new Rule(-4, new int[]{72});
    rules[5] = new Rule(-4, new int[]{73});
    rules[6] = new Rule(-4, new int[]{74});
    rules[7] = new Rule(-4, new int[]{75});
    rules[8] = new Rule(-4, new int[]{76});
    rules[9] = new Rule(-4, new int[]{77});
    rules[10] = new Rule(-5, new int[]{-6});
    rules[11] = new Rule(-5, new int[]{-7});
    rules[12] = new Rule(-6, new int[]{15});
    rules[13] = new Rule(-6, new int[]{16});
    rules[14] = new Rule(-6, new int[]{21});
    rules[15] = new Rule(-6, new int[]{22});
    rules[16] = new Rule(-6, new int[]{23});
    rules[17] = new Rule(-6, new int[]{26});
    rules[18] = new Rule(-6, new int[]{35});
    rules[19] = new Rule(-6, new int[]{40});
    rules[20] = new Rule(-6, new int[]{41});
    rules[21] = new Rule(-6, new int[]{53});
    rules[22] = new Rule(-8, new int[]{94,-9,95});
    rules[23] = new Rule(-8, new int[]{94,-9,96});
    rules[24] = new Rule(-8, new int[]{94,-9,97});
    rules[25] = new Rule(-8, new int[]{94,-9,98});
    rules[26] = new Rule(-9, new int[]{-5});
    rules[27] = new Rule(-9, new int[]{-9,126,-5});
    rules[28] = new Rule(-7, new int[]{-10});
    rules[29] = new Rule(-7, new int[]{-10,-8});
    rules[30] = new Rule(-7, new int[]{-11});
    rules[31] = new Rule(-11, new int[]{-5,123});
    rules[32] = new Rule(-12, new int[]{12});
    rules[33] = new Rule(-12, new int[]{14});
    rules[34] = new Rule(-12, new int[]{158});
    rules[35] = new Rule(-12, new int[]{178});
    rules[36] = new Rule(-12, new int[]{33});
    rules[37] = new Rule(-12, new int[]{35});
    rules[38] = new Rule(-12, new int[]{51});
    rules[39] = new Rule(-12, new int[]{60});
    rules[40] = new Rule(-12, new int[]{38});
    rules[41] = new Rule(-12, new int[]{62});
    rules[42] = new Rule(-12, new int[]{63});
    rules[43] = new Rule(-12, new int[]{64});
    rules[44] = new Rule(-10, new int[]{-13});
    rules[45] = new Rule(-10, new int[]{-14});
    rules[46] = new Rule(-13, new int[]{3});
    rules[47] = new Rule(-13, new int[]{-12});
    rules[48] = new Rule(-14, new int[]{-10,127,-13});
    rules[49] = new Rule(-14, new int[]{-10,127,19});
    rules[50] = new Rule(-14, new int[]{-10,127,43});
    rules[51] = new Rule(-14, new int[]{-10,127,-6});
    rules[52] = new Rule(-3, new int[]{-15});
    rules[53] = new Rule(-3, new int[]{-16});
    rules[54] = new Rule(-15, new int[]{-17});
    rules[55] = new Rule(-15, new int[]{-18});
    rules[56] = new Rule(-15, new int[]{-19});
    rules[57] = new Rule(-15, new int[]{-20});
    rules[58] = new Rule(-15, new int[]{-21});
    rules[59] = new Rule(-15, new int[]{-22});
    rules[60] = new Rule(-23, new int[]{-24});
    rules[61] = new Rule(-23, new int[]{-23,-24});
    rules[62] = new Rule(-24, new int[]{48});
    rules[63] = new Rule(-24, new int[]{47});
    rules[64] = new Rule(-24, new int[]{46});
    rules[65] = new Rule(-24, new int[]{11});
    rules[66] = new Rule(-24, new int[]{52});
    rules[67] = new Rule(-24, new int[]{34});
    rules[68] = new Rule(-24, new int[]{45});
    rules[69] = new Rule(-24, new int[]{65});
    rules[70] = new Rule(-24, new int[]{56});
    rules[71] = new Rule(-24, new int[]{69});
    rules[72] = new Rule(-24, new int[]{70});
    rules[73] = new Rule(-24, new int[]{59});
    rules[74] = new Rule(-24, new int[]{30});
    rules[75] = new Rule(-24, new int[]{67});
    rules[76] = new Rule(-18, new int[]{-25,-17});
    rules[77] = new Rule(-17, new int[]{19,-13,-26});
    rules[78] = new Rule(-17, new int[]{19,-13,-27,-26});
    rules[79] = new Rule(-17, new int[]{19,-13,-28,-26});
    rules[80] = new Rule(-17, new int[]{19,-13,-28,-27,-26});
    rules[81] = new Rule(-17, new int[]{-23,19,-13,-26});
    rules[82] = new Rule(-17, new int[]{-23,19,-13,-27,-26});
    rules[83] = new Rule(-17, new int[]{-23,19,-13,-28,-26});
    rules[84] = new Rule(-17, new int[]{-23,19,-13,-28,-27,-26});
    rules[85] = new Rule(-28, new int[]{29,-7});
    rules[86] = new Rule(-27, new int[]{37,-29});
    rules[87] = new Rule(-29, new int[]{-7});
    rules[88] = new Rule(-29, new int[]{-29,126,-7});
    rules[89] = new Rule(-26, new int[]{119,120});
    rules[90] = new Rule(-26, new int[]{119,-30,120});
    rules[91] = new Rule(-30, new int[]{-31});
    rules[92] = new Rule(-30, new int[]{-30,-31});
    rules[93] = new Rule(-31, new int[]{-32});
    rules[94] = new Rule(-31, new int[]{-33});
    rules[95] = new Rule(-31, new int[]{-34});
    rules[96] = new Rule(-32, new int[]{-35});
    rules[97] = new Rule(-32, new int[]{-36});
    rules[98] = new Rule(-32, new int[]{-37});
    rules[99] = new Rule(-32, new int[]{-38});
    rules[100] = new Rule(-32, new int[]{-39});
    rules[101] = new Rule(-32, new int[]{-15});
    rules[102] = new Rule(-36, new int[]{-25,-35});
    rules[103] = new Rule(-35, new int[]{-5,-40,124});
    rules[104] = new Rule(-35, new int[]{-23,-5,-40,124});
    rules[105] = new Rule(-35, new int[]{1});
    rules[106] = new Rule(-40, new int[]{-41});
    rules[107] = new Rule(-40, new int[]{-40,126,-41});
    rules[108] = new Rule(-41, new int[]{-42});
    rules[109] = new Rule(-41, new int[]{-42,78,-43});
    rules[110] = new Rule(-42, new int[]{-13});
    rules[111] = new Rule(-43, new int[]{-44});
    rules[112] = new Rule(-43, new int[]{-45});
    rules[113] = new Rule(-16, new int[]{-46,-47});
    rules[114] = new Rule(-46, new int[]{60,-13,44,-13,117,-48,118});
    rules[115] = new Rule(-48, new int[]{-49});
    rules[116] = new Rule(-48, new int[]{-48,126,-49});
    rules[117] = new Rule(-49, new int[]{14,38});
    rules[118] = new Rule(-49, new int[]{14,63});
    rules[119] = new Rule(-49, new int[]{14,24});
    rules[120] = new Rule(-49, new int[]{12,38});
    rules[121] = new Rule(-49, new int[]{12,63});
    rules[122] = new Rule(-49, new int[]{12,24});
    rules[123] = new Rule(-49, new int[]{12,62});
    rules[124] = new Rule(-39, new int[]{-5,-13,119,-50,120});
    rules[125] = new Rule(-39, new int[]{-23,-5,-13,119,-50,120});
    rules[126] = new Rule(-50, new int[]{-51});
    rules[127] = new Rule(-50, new int[]{-51,-52});
    rules[128] = new Rule(-50, new int[]{-52});
    rules[129] = new Rule(-50, new int[]{-52,-51});
    rules[130] = new Rule(-51, new int[]{33,-53});
    rules[131] = new Rule(-51, new int[]{-23,33,-53});
    rules[132] = new Rule(-52, new int[]{51,-53});
    rules[133] = new Rule(-52, new int[]{-23,51,-53});
    rules[134] = new Rule(-53, new int[]{-54});
    rules[135] = new Rule(-53, new int[]{124});
    rules[136] = new Rule(-38, new int[]{-25,-37});
    rules[137] = new Rule(-37, new int[]{-55,-47});
    rules[138] = new Rule(-55, new int[]{-23,-5,-56});
    rules[139] = new Rule(-55, new int[]{-5,-56});
    rules[140] = new Rule(-55, new int[]{-23,66,-56});
    rules[141] = new Rule(-55, new int[]{66,-56});
    rules[142] = new Rule(-56, new int[]{-13,117,118});
    rules[143] = new Rule(-56, new int[]{-13,117,-57,118});
    rules[144] = new Rule(-57, new int[]{-58});
    rules[145] = new Rule(-57, new int[]{-57,126,-58});
    rules[146] = new Rule(-58, new int[]{-5,-42});
    rules[147] = new Rule(-47, new int[]{-54});
    rules[148] = new Rule(-47, new int[]{124});
    rules[149] = new Rule(-33, new int[]{52,-54});
    rules[150] = new Rule(-34, new int[]{-59,-60});
    rules[151] = new Rule(-34, new int[]{-23,-59,-60});
    rules[152] = new Rule(-59, new int[]{-10,117,118});
    rules[153] = new Rule(-59, new int[]{-10,117,-57,118});
    rules[154] = new Rule(-60, new int[]{119,120});
    rules[155] = new Rule(-60, new int[]{119,-61,120});
    rules[156] = new Rule(-60, new int[]{119,-62,120});
    rules[157] = new Rule(-60, new int[]{119,-61,-62,120});
    rules[158] = new Rule(-61, new int[]{57,117,118,124});
    rules[159] = new Rule(-61, new int[]{57,117,-63,118,124});
    rules[160] = new Rule(-61, new int[]{54,117,118,124});
    rules[161] = new Rule(-61, new int[]{54,117,-63,118,124});
    rules[162] = new Rule(-20, new int[]{-25,-19});
    rules[163] = new Rule(-19, new int[]{39,-13,-64});
    rules[164] = new Rule(-19, new int[]{39,-13,-65,-64});
    rules[165] = new Rule(-19, new int[]{-23,39,-13,-64});
    rules[166] = new Rule(-19, new int[]{-23,39,-13,-65,-64});
    rules[167] = new Rule(-65, new int[]{29,-10});
    rules[168] = new Rule(-65, new int[]{-65,126,-10});
    rules[169] = new Rule(-64, new int[]{119,120});
    rules[170] = new Rule(-64, new int[]{119,-66,120});
    rules[171] = new Rule(-66, new int[]{-67});
    rules[172] = new Rule(-66, new int[]{-66,-67});
    rules[173] = new Rule(-67, new int[]{-68});
    rules[174] = new Rule(-68, new int[]{-55,124});
    rules[175] = new Rule(-22, new int[]{-25,-21});
    rules[176] = new Rule(-21, new int[]{28,-13,-69});
    rules[177] = new Rule(-21, new int[]{-23,28,-13,-69});
    rules[178] = new Rule(-69, new int[]{119,120});
    rules[179] = new Rule(-69, new int[]{119,-70,120});
    rules[180] = new Rule(-70, new int[]{-71});
    rules[181] = new Rule(-70, new int[]{-70,126,-71});
    rules[182] = new Rule(-71, new int[]{-13});
    rules[183] = new Rule(-45, new int[]{119,120});
    rules[184] = new Rule(-45, new int[]{119,-72,120});
    rules[185] = new Rule(-72, new int[]{-43});
    rules[186] = new Rule(-72, new int[]{-72,126,-43});
    rules[187] = new Rule(-54, new int[]{119,120});
    rules[188] = new Rule(-54, new int[]{119,-62,120});
    rules[189] = new Rule(-62, new int[]{-73});
    rules[190] = new Rule(-62, new int[]{-62,-73});
    rules[191] = new Rule(-73, new int[]{-74});
    rules[192] = new Rule(-73, new int[]{-75});
    rules[193] = new Rule(-74, new int[]{-76,124});
    rules[194] = new Rule(-74, new int[]{-23,-76,124});
    rules[195] = new Rule(-76, new int[]{-5,-40});
    rules[196] = new Rule(-75, new int[]{-77});
    rules[197] = new Rule(-75, new int[]{-78});
    rules[198] = new Rule(-75, new int[]{-79});
    rules[199] = new Rule(-75, new int[]{-80});
    rules[200] = new Rule(-75, new int[]{-81});
    rules[201] = new Rule(-75, new int[]{-82});
    rules[202] = new Rule(-83, new int[]{-77});
    rules[203] = new Rule(-83, new int[]{-84});
    rules[204] = new Rule(-83, new int[]{-85});
    rules[205] = new Rule(-83, new int[]{-86});
    rules[206] = new Rule(-83, new int[]{-87});
    rules[207] = new Rule(-77, new int[]{-54});
    rules[208] = new Rule(-77, new int[]{-74});
    rules[209] = new Rule(-77, new int[]{-88});
    rules[210] = new Rule(-77, new int[]{-89});
    rules[211] = new Rule(-77, new int[]{-90});
    rules[212] = new Rule(-77, new int[]{-91});
    rules[213] = new Rule(-77, new int[]{-92});
    rules[214] = new Rule(-77, new int[]{-93});
    rules[215] = new Rule(-77, new int[]{-94});
    rules[216] = new Rule(-77, new int[]{-95});
    rules[217] = new Rule(-77, new int[]{-96});
    rules[218] = new Rule(-88, new int[]{124});
    rules[219] = new Rule(-89, new int[]{-97,124});
    rules[220] = new Rule(-89, new int[]{-98,-54});
    rules[221] = new Rule(-89, new int[]{1,124});
    rules[222] = new Rule(-89, new int[]{1});
    rules[223] = new Rule(-97, new int[]{-99});
    rules[224] = new Rule(-97, new int[]{-100});
    rules[225] = new Rule(-97, new int[]{-101});
    rules[226] = new Rule(-97, new int[]{-102});
    rules[227] = new Rule(-97, new int[]{-103});
    rules[228] = new Rule(-97, new int[]{-98});
    rules[229] = new Rule(-97, new int[]{-104});
    rules[230] = new Rule(-78, new int[]{36,117,-44,118,-75});
    rules[231] = new Rule(-79, new int[]{36,117,-44,118,-83,27,-75});
    rules[232] = new Rule(-84, new int[]{36,117,-44,118,-83,27,-83});
    rules[233] = new Rule(-80, new int[]{68,117,-44,118,-75});
    rules[234] = new Rule(-85, new int[]{68,117,-44,118,-83});
    rules[235] = new Rule(-90, new int[]{25,-75,68,117,-44,118,124});
    rules[236] = new Rule(-82, new int[]{32,117,-5,-13,125,-44,118,-75});
    rules[237] = new Rule(-87, new int[]{32,117,-5,-13,125,-44,118,-86});
    rules[238] = new Rule(-81, new int[]{32,117,-105,124,-106,124,-107,118,-75});
    rules[239] = new Rule(-86, new int[]{32,117,-105,124,-106,124,-107,118,-83});
    rules[240] = new Rule(-105, new int[]{});
    rules[241] = new Rule(-105, new int[]{-108});
    rules[242] = new Rule(-105, new int[]{-76});
    rules[243] = new Rule(-106, new int[]{});
    rules[244] = new Rule(-106, new int[]{-44});
    rules[245] = new Rule(-107, new int[]{});
    rules[246] = new Rule(-107, new int[]{-108});
    rules[247] = new Rule(-108, new int[]{-97});
    rules[248] = new Rule(-108, new int[]{-108,126,-97});
    rules[249] = new Rule(-91, new int[]{17,124});
    rules[250] = new Rule(-92, new int[]{20,124});
    rules[251] = new Rule(-93, new int[]{49,124});
    rules[252] = new Rule(-93, new int[]{49,-44,124});
    rules[253] = new Rule(-94, new int[]{58,-44,124});
    rules[254] = new Rule(-95, new int[]{61,-54,-109});
    rules[255] = new Rule(-95, new int[]{61,-54,-109,-110});
    rules[256] = new Rule(-95, new int[]{61,-54,-110});
    rules[257] = new Rule(-109, new int[]{-111});
    rules[258] = new Rule(-109, new int[]{-109,-111});
    rules[259] = new Rule(-111, new int[]{18,117,-58,118,-54});
    rules[260] = new Rule(-110, new int[]{31,-54});
    rules[261] = new Rule(-96, new int[]{38,-44,124});
    rules[262] = new Rule(-96, new int[]{63,-44,124});
    rules[263] = new Rule(-96, new int[]{64,-44,124});
    rules[264] = new Rule(-96, new int[]{24,-44,124});
    rules[265] = new Rule(-96, new int[]{62,-44,124});
    rules[266] = new Rule(-96, new int[]{42,-44,124});
    rules[267] = new Rule(-112, new int[]{-113});
    rules[268] = new Rule(-112, new int[]{-114});
    rules[269] = new Rule(-113, new int[]{-4});
    rules[270] = new Rule(-113, new int[]{57});
    rules[271] = new Rule(-113, new int[]{117,-44,118});
    rules[272] = new Rule(-113, new int[]{-104});
    rules[273] = new Rule(-113, new int[]{-115});
    rules[274] = new Rule(-113, new int[]{-98});
    rules[275] = new Rule(-113, new int[]{-116});
    rules[276] = new Rule(-113, new int[]{5});
    rules[277] = new Rule(-113, new int[]{6});
    rules[278] = new Rule(-104, new int[]{43,-5,117,118});
    rules[279] = new Rule(-104, new int[]{43,-5,117,-63,118});
    rules[280] = new Rule(-104, new int[]{43,-5,119,120});
    rules[281] = new Rule(-104, new int[]{43,-5,119,-63,120});
    rules[282] = new Rule(-104, new int[]{43,-5,119,-117,120});
    rules[283] = new Rule(-117, new int[]{-118});
    rules[284] = new Rule(-117, new int[]{-117,126,-118});
    rules[285] = new Rule(-118, new int[]{-44,79,-44});
    rules[286] = new Rule(-63, new int[]{-44});
    rules[287] = new Rule(-63, new int[]{-63,126,-44});
    rules[288] = new Rule(-114, new int[]{43,-5,-119});
    rules[289] = new Rule(-114, new int[]{43,-5,-119,-120});
    rules[290] = new Rule(-119, new int[]{-121});
    rules[291] = new Rule(-119, new int[]{-119,-121});
    rules[292] = new Rule(-121, new int[]{121,-44,122});
    rules[293] = new Rule(-120, new int[]{123});
    rules[294] = new Rule(-120, new int[]{-120,123});
    rules[295] = new Rule(-115, new int[]{-112,127,-13});
    rules[296] = new Rule(-115, new int[]{-112,127,19});
    rules[297] = new Rule(-115, new int[]{-112,127,43});
    rules[298] = new Rule(-115, new int[]{-112,127,-6});
    rules[299] = new Rule(-115, new int[]{54,127,-13});
    rules[300] = new Rule(-115, new int[]{54,127,19});
    rules[301] = new Rule(-115, new int[]{-112,127,43});
    rules[302] = new Rule(-115, new int[]{54,127,-6});
    rules[303] = new Rule(-25, new int[]{-122});
    rules[304] = new Rule(-25, new int[]{-25,-122});
    rules[305] = new Rule(-122, new int[]{13,-13});
    rules[306] = new Rule(-122, new int[]{13,-13,117,118});
    rules[307] = new Rule(-122, new int[]{13,-13,117,-72,118});
    rules[308] = new Rule(-98, new int[]{-10,117,118});
    rules[309] = new Rule(-98, new int[]{-10,117,-63,118});
    rules[310] = new Rule(-98, new int[]{-6,127,-13,117,118});
    rules[311] = new Rule(-98, new int[]{-6,127,-13,117,-63,118});
    rules[312] = new Rule(-98, new int[]{-112,127,-13,117,118});
    rules[313] = new Rule(-98, new int[]{-112,127,-13,117,-63,118});
    rules[314] = new Rule(-98, new int[]{54,127,-13,117,118});
    rules[315] = new Rule(-98, new int[]{54,127,-13,117,-63,118});
    rules[316] = new Rule(-116, new int[]{-10,121,-44,122});
    rules[317] = new Rule(-116, new int[]{-113,121,-44,122});
    rules[318] = new Rule(-123, new int[]{-112});
    rules[319] = new Rule(-123, new int[]{-10});
    rules[320] = new Rule(-123, new int[]{-102});
    rules[321] = new Rule(-123, new int[]{-103});
    rules[322] = new Rule(-102, new int[]{-123,109});
    rules[323] = new Rule(-103, new int[]{-123,110});
    rules[324] = new Rule(-124, new int[]{-100});
    rules[325] = new Rule(-124, new int[]{-101});
    rules[326] = new Rule(-124, new int[]{104,-124});
    rules[327] = new Rule(-124, new int[]{105,-124});
    rules[328] = new Rule(-124, new int[]{-125});
    rules[329] = new Rule(-100, new int[]{109,-124});
    rules[330] = new Rule(-101, new int[]{110,-124});
    rules[331] = new Rule(-125, new int[]{-123});
    rules[332] = new Rule(-125, new int[]{108,-124});
    rules[333] = new Rule(-125, new int[]{-126});
    rules[334] = new Rule(-126, new int[]{117,-6,118,-124});
    rules[335] = new Rule(-126, new int[]{117,-7,118,-125});
    rules[336] = new Rule(-126, new int[]{117,-6,118,117,3,118});
    rules[337] = new Rule(-126, new int[]{117,-7,118,117,3,118});
    rules[338] = new Rule(-127, new int[]{-124});
    rules[339] = new Rule(-127, new int[]{-127,106,-124});
    rules[340] = new Rule(-127, new int[]{-127,107,-124});
    rules[341] = new Rule(-128, new int[]{-127});
    rules[342] = new Rule(-128, new int[]{-128,104,-127});
    rules[343] = new Rule(-128, new int[]{-128,105,-127});
    rules[344] = new Rule(-129, new int[]{-128});
    rules[345] = new Rule(-129, new int[]{-129,114,-128});
    rules[346] = new Rule(-129, new int[]{-129,96,97,-128});
    rules[347] = new Rule(-129, new int[]{-129,96,97,98,-128});
    rules[348] = new Rule(-130, new int[]{-129});
    rules[349] = new Rule(-130, new int[]{-130,-131,-129});
    rules[350] = new Rule(-130, new int[]{-130,116,-5});
    rules[351] = new Rule(-131, new int[]{94});
    rules[352] = new Rule(-131, new int[]{95});
    rules[353] = new Rule(-131, new int[]{99});
    rules[354] = new Rule(-131, new int[]{100});
    rules[355] = new Rule(-132, new int[]{-130});
    rules[356] = new Rule(-132, new int[]{-132,92,-130});
    rules[357] = new Rule(-132, new int[]{-132,93,-130});
    rules[358] = new Rule(-132, new int[]{-132,101,-130});
    rules[359] = new Rule(-132, new int[]{-132,102,-130});
    rules[360] = new Rule(-132, new int[]{-132,103,-130});
    rules[361] = new Rule(-133, new int[]{-132});
    rules[362] = new Rule(-133, new int[]{-133,111,-132});
    rules[363] = new Rule(-134, new int[]{-133});
    rules[364] = new Rule(-134, new int[]{-134,113,-133});
    rules[365] = new Rule(-135, new int[]{-134});
    rules[366] = new Rule(-135, new int[]{-135,112,-134});
    rules[367] = new Rule(-136, new int[]{-135});
    rules[368] = new Rule(-136, new int[]{-136,90,-135});
    rules[369] = new Rule(-137, new int[]{-136});
    rules[370] = new Rule(-137, new int[]{-137,91,-136});
    rules[371] = new Rule(-138, new int[]{-137});
    rules[372] = new Rule(-138, new int[]{-137,115,-44,125,-138});
    rules[373] = new Rule(-139, new int[]{-138});
    rules[374] = new Rule(-139, new int[]{-99});
    rules[375] = new Rule(-99, new int[]{-10,-140,-44});
    rules[376] = new Rule(-99, new int[]{35,-140,-44});
    rules[377] = new Rule(-99, new int[]{-115,-140,-44});
    rules[378] = new Rule(-99, new int[]{-116,-140,-44});
    rules[379] = new Rule(-140, new int[]{78});
    rules[380] = new Rule(-140, new int[]{79});
    rules[381] = new Rule(-140, new int[]{80});
    rules[382] = new Rule(-140, new int[]{81});
    rules[383] = new Rule(-140, new int[]{82});
    rules[384] = new Rule(-140, new int[]{83});
    rules[385] = new Rule(-140, new int[]{84});
    rules[386] = new Rule(-140, new int[]{85});
    rules[387] = new Rule(-140, new int[]{86});
    rules[388] = new Rule(-140, new int[]{87});
    rules[389] = new Rule(-140, new int[]{88});
    rules[390] = new Rule(-140, new int[]{89});
    rules[391] = new Rule(-44, new int[]{-139});
    rules[392] = new Rule(-44, new int[]{5});
    rules[393] = new Rule(-44, new int[]{6});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // Goal -> CompilationUnit
#line 368 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ GoalNode = Node(Tokens.ProductionGoal, ValueStack[ValueStack.Depth-1]); CurrentSemanticValue = GoalNode; }
        break;
      case 3: // Literal -> LITERAL_TRUE
#line 373 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionLiteral, ValueStack[ValueStack.Depth-1]); }
        break;
      case 4: // Literal -> LITERAL_FALSE
#line 374 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionLiteral, ValueStack[ValueStack.Depth-1]); }
        break;
      case 5: // Literal -> LITERAL_DOUBLE
#line 375 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionLiteral, ValueStack[ValueStack.Depth-1]); }
        break;
      case 6: // Literal -> LITERAL_INTEGER
#line 376 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionLiteral, ValueStack[ValueStack.Depth-1]); }
        break;
      case 7: // Literal -> LITERAL_LONG
#line 377 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionLiteral, ValueStack[ValueStack.Depth-1]); }
        break;
      case 8: // Literal -> LITERAL_NULL
#line 378 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionLiteral, ValueStack[ValueStack.Depth-1]); }
        break;
      case 9: // Literal -> LITERAL_STRING
#line 379 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionLiteral, ValueStack[ValueStack.Depth-1]); }
        break;
      case 10: // Type -> PrimitiveType
#line 384 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionType, ValueStack[ValueStack.Depth-1]); }
        break;
      case 11: // Type -> ReferenceType
#line 385 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionType, ValueStack[ValueStack.Depth-1]); }
        break;
      case 12: // PrimitiveType -> KEYWORD_BLOB
#line 388 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionPrimitiveType, ValueStack[ValueStack.Depth-1]); }
        break;
      case 13: // PrimitiveType -> KEYWORD_BOOLEAN
#line 389 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionPrimitiveType, ValueStack[ValueStack.Depth-1]); }
        break;
      case 14: // PrimitiveType -> KEYWORD_DATE
#line 390 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionPrimitiveType, ValueStack[ValueStack.Depth-1]); }
        break;
      case 15: // PrimitiveType -> KEYWORD_DATETIME
#line 391 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionPrimitiveType, ValueStack[ValueStack.Depth-1]); }
        break;
      case 16: // PrimitiveType -> KEYWORD_DECIMAL
#line 392 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionPrimitiveType, ValueStack[ValueStack.Depth-1]); }
        break;
      case 17: // PrimitiveType -> KEYWORD_DOUBLE
#line 393 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionPrimitiveType, ValueStack[ValueStack.Depth-1]); }
        break;
      case 18: // PrimitiveType -> KEYWORD_ID
#line 394 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionPrimitiveType, ValueStack[ValueStack.Depth-1]); }
        break;
      case 19: // PrimitiveType -> KEYWORD_INTEGER
#line 395 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionPrimitiveType, ValueStack[ValueStack.Depth-1]); }
        break;
      case 20: // PrimitiveType -> KEYWORD_LONG
#line 396 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionPrimitiveType, ValueStack[ValueStack.Depth-1]); }
        break;
      case 21: // PrimitiveType -> KEYWORD_STRING
#line 397 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionPrimitiveType, ValueStack[ValueStack.Depth-1]); }
        break;
      case 22: // TemplateParameterList -> OPERATOR_LESS_THAN, TemplateParameters, 
               //                          OPERATOR_GREATER_THAN
#line 400 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionTemplateParameterList, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 23: // TemplateParameterList -> OPERATOR_LESS_THAN, TemplateParameters, 
               //                          OPERATOR_GREATER_THAN_A
#line 401 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionTemplateParameterList, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 24: // TemplateParameterList -> OPERATOR_LESS_THAN, TemplateParameters, 
               //                          OPERATOR_GREATER_THAN_B
#line 402 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionTemplateParameterList, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 25: // TemplateParameterList -> OPERATOR_LESS_THAN, TemplateParameters, 
               //                          OPERATOR_GREATER_THAN_C
#line 403 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionTemplateParameterList, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 26: // TemplateParameters -> Type
#line 406 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionTemplateParameters, ValueStack[ValueStack.Depth-1]); }
        break;
      case 27: // TemplateParameters -> TemplateParameters, SEPARATOR_COMMA, Type
#line 407 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionTemplateParameters, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 28: // ReferenceType -> Name
#line 410 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionReferenceType, ValueStack[ValueStack.Depth-1]); }
        break;
      case 29: // ReferenceType -> Name, TemplateParameterList
#line 411 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionReferenceType, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 30: // ReferenceType -> ArrayType
#line 412 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionReferenceType, ValueStack[ValueStack.Depth-1]); }
        break;
      case 31: // ArrayType -> Type, SEPARATOR_BRACKET_EMPTY
#line 415 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionArrayType, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 32: // NonReservedIdentifier -> KEYWORD_AFTER
#line 420 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionNonReservedIdentifier, ValueStack[ValueStack.Depth-1]); }
        break;
      case 33: // NonReservedIdentifier -> KEYWORD_BEFORE
#line 421 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionNonReservedIdentifier, ValueStack[ValueStack.Depth-1]); }
        break;
      case 34: // NonReservedIdentifier -> RESERVED_JOIN
#line 422 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionNonReservedIdentifier, ValueStack[ValueStack.Depth-1]); }
        break;
      case 35: // NonReservedIdentifier -> RESERVED_SORT
#line 423 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionNonReservedIdentifier, ValueStack[ValueStack.Depth-1]); }
        break;
      case 36: // NonReservedIdentifier -> KEYWORD_GET
#line 424 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionNonReservedIdentifier, ValueStack[ValueStack.Depth-1]); }
        break;
      case 37: // NonReservedIdentifier -> KEYWORD_ID
#line 425 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionNonReservedIdentifier, ValueStack[ValueStack.Depth-1]); }
        break;
      case 38: // NonReservedIdentifier -> KEYWORD_SET
#line 426 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionNonReservedIdentifier, ValueStack[ValueStack.Depth-1]); }
        break;
      case 39: // NonReservedIdentifier -> KEYWORD_TRIGGER
#line 427 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionNonReservedIdentifier, ValueStack[ValueStack.Depth-1]); }
        break;
      case 40: // NonReservedIdentifier -> KEYWORD_INSERT
#line 428 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionNonReservedIdentifier, ValueStack[ValueStack.Depth-1]); }
        break;
      case 41: // NonReservedIdentifier -> KEYWORD_UNDELETE
#line 429 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionNonReservedIdentifier, ValueStack[ValueStack.Depth-1]); }
        break;
      case 42: // NonReservedIdentifier -> KEYWORD_UPDATE
#line 430 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionNonReservedIdentifier, ValueStack[ValueStack.Depth-1]); }
        break;
      case 43: // NonReservedIdentifier -> KEYWORD_UPSERT
#line 431 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionNonReservedIdentifier, ValueStack[ValueStack.Depth-1]); }
        break;
      case 44: // Name -> SimpleName
#line 434 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionName, ValueStack[ValueStack.Depth-1]); }
        break;
      case 45: // Name -> QualifiedName
#line 435 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionName, ValueStack[ValueStack.Depth-1]); }
        break;
      case 46: // SimpleName -> IDENTIFIER
#line 438 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionSimpleName, ValueStack[ValueStack.Depth-1]); }
        break;
      case 47: // SimpleName -> NonReservedIdentifier
#line 439 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionSimpleName, ValueStack[ValueStack.Depth-1]); }
        break;
      case 48: // QualifiedName -> Name, SEPARATOR_DOT, SimpleName
#line 442 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionQualifiedName, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 49: // QualifiedName -> Name, SEPARATOR_DOT, KEYWORD_CLASS
#line 443 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionQualifiedName, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 50: // QualifiedName -> Name, SEPARATOR_DOT, KEYWORD_NEW
#line 444 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionQualifiedName, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 51: // QualifiedName -> Name, SEPARATOR_DOT, PrimitiveType
#line 445 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionQualifiedName, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 52: // CompilationUnit -> TypeDeclaration
#line 450 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionCompilationUnit, ValueStack[ValueStack.Depth-1]); }
        break;
      case 53: // CompilationUnit -> TriggerDeclaration
#line 451 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionCompilationUnit, ValueStack[ValueStack.Depth-1]); }
        break;
      case 54: // TypeDeclaration -> ClassDeclaration
#line 454 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionTypeDeclaration, ValueStack[ValueStack.Depth-1]); }
        break;
      case 55: // TypeDeclaration -> AnnotatedClassDeclaration
#line 455 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionTypeDeclaration, ValueStack[ValueStack.Depth-1]); }
        break;
      case 56: // TypeDeclaration -> InterfaceDeclaration
#line 456 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionTypeDeclaration, ValueStack[ValueStack.Depth-1]); }
        break;
      case 57: // TypeDeclaration -> AnnotatedInterfaceDeclaration
#line 457 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionTypeDeclaration, ValueStack[ValueStack.Depth-1]); }
        break;
      case 58: // TypeDeclaration -> EnumDeclaration
#line 458 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionTypeDeclaration, ValueStack[ValueStack.Depth-1]); }
        break;
      case 59: // TypeDeclaration -> AnnotatedEnumDeclaration
#line 459 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionTypeDeclaration, ValueStack[ValueStack.Depth-1]); }
        break;
      case 60: // Modifiers -> Modifier
#line 462 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionModifiers, ValueStack[ValueStack.Depth-1]); }
        break;
      case 61: // Modifiers -> Modifiers, Modifier
#line 463 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionModifiers, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 62: // Modifier -> KEYWORD_PUBLIC
#line 466 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionModifier, ValueStack[ValueStack.Depth-1]); }
        break;
      case 63: // Modifier -> KEYWORD_PROTECTED
#line 467 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionModifier, ValueStack[ValueStack.Depth-1]); }
        break;
      case 64: // Modifier -> KEYWORD_PRIVATE
#line 468 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionModifier, ValueStack[ValueStack.Depth-1]); }
        break;
      case 65: // Modifier -> KEYWORD_ABSTRACT
#line 469 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionModifier, ValueStack[ValueStack.Depth-1]); }
        break;
      case 66: // Modifier -> KEYWORD_STATIC
#line 470 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionModifier, ValueStack[ValueStack.Depth-1]); }
        break;
      case 67: // Modifier -> KEYWORD_GLOBAL
#line 471 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionModifier, ValueStack[ValueStack.Depth-1]); }
        break;
      case 68: // Modifier -> KEYWORD_OVERRIDE
#line 472 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionModifier, ValueStack[ValueStack.Depth-1]); }
        break;
      case 69: // Modifier -> KEYWORD_VIRTUAL
#line 473 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionModifier, ValueStack[ValueStack.Depth-1]); }
        break;
      case 70: // Modifier -> KEYWORD_TESTMETHOD
#line 474 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionModifier, ValueStack[ValueStack.Depth-1]); }
        break;
      case 71: // Modifier -> KEYWORD_WITHSHARING
#line 475 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionModifier, ValueStack[ValueStack.Depth-1]); }
        break;
      case 72: // Modifier -> KEYWORD_WITHOUTSHARING
#line 476 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionModifier, ValueStack[ValueStack.Depth-1]); }
        break;
      case 73: // Modifier -> KEYWORD_TRANSIENT
#line 477 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionModifier, ValueStack[ValueStack.Depth-1]); }
        break;
      case 74: // Modifier -> KEYWORD_FINAL
#line 478 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionModifier, ValueStack[ValueStack.Depth-1]); }
        break;
      case 75: // Modifier -> KEYWORD_WEBSERVICE
#line 479 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionModifier, ValueStack[ValueStack.Depth-1]); }
        break;
      case 76: // AnnotatedClassDeclaration -> Annotations, ClassDeclaration
#line 484 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionAnnotatedClassDeclaration, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 77: // ClassDeclaration -> KEYWORD_CLASS, SimpleName, ClassBody
#line 487 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionClassDeclaration, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 78: // ClassDeclaration -> KEYWORD_CLASS, SimpleName, Interfaces, ClassBody
#line 488 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionClassDeclaration, ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 79: // ClassDeclaration -> KEYWORD_CLASS, SimpleName, Super, ClassBody
#line 489 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionClassDeclaration, ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 80: // ClassDeclaration -> KEYWORD_CLASS, SimpleName, Super, Interfaces, ClassBody
#line 490 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionClassDeclaration, ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 81: // ClassDeclaration -> Modifiers, KEYWORD_CLASS, SimpleName, ClassBody
#line 491 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionClassDeclaration, ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 82: // ClassDeclaration -> Modifiers, KEYWORD_CLASS, SimpleName, Interfaces, ClassBody
#line 492 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionClassDeclaration, ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 83: // ClassDeclaration -> Modifiers, KEYWORD_CLASS, SimpleName, Super, ClassBody
#line 493 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionClassDeclaration, ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 84: // ClassDeclaration -> Modifiers, KEYWORD_CLASS, SimpleName, Super, Interfaces, 
               //                     ClassBody
#line 494 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionClassDeclaration, ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 85: // Super -> KEYWORD_EXTENDS, ReferenceType
#line 497 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionSuper, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 86: // Interfaces -> KEYWORD_IMPLEMENTS, InterfaceTypeList
#line 500 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionInterfaces, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 87: // InterfaceTypeList -> ReferenceType
#line 503 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionInterfaceTypeList, ValueStack[ValueStack.Depth-1]); }
        break;
      case 88: // InterfaceTypeList -> InterfaceTypeList, SEPARATOR_COMMA, ReferenceType
#line 504 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionInterfaceTypeList, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 89: // ClassBody -> SEPARATOR_BRACE_LEFT, SEPARATOR_BRACE_RIGHT
#line 507 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionClassBody, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 90: // ClassBody -> SEPARATOR_BRACE_LEFT, ClassBodyDeclarations, SEPARATOR_BRACE_RIGHT
#line 508 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionClassBody, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 91: // ClassBodyDeclarations -> ClassBodyDeclaration
#line 511 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionClassBodyDeclarations, ValueStack[ValueStack.Depth-1]); }
        break;
      case 92: // ClassBodyDeclarations -> ClassBodyDeclarations, ClassBodyDeclaration
#line 512 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionClassBodyDeclarations, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 93: // ClassBodyDeclaration -> ClassMemberDeclaration
#line 515 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionClassBodyDeclaration, ValueStack[ValueStack.Depth-1]); }
        break;
      case 94: // ClassBodyDeclaration -> StaticInitializer
#line 516 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionClassBodyDeclaration, ValueStack[ValueStack.Depth-1]); }
        break;
      case 95: // ClassBodyDeclaration -> ConstructorDeclaration
#line 517 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionClassBodyDeclaration, ValueStack[ValueStack.Depth-1]); }
        break;
      case 96: // ClassMemberDeclaration -> FieldDeclaration
#line 520 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionClassMemberDeclaration, ValueStack[ValueStack.Depth-1]); }
        break;
      case 97: // ClassMemberDeclaration -> AnnotatedFieldDeclaration
#line 521 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionClassMemberDeclaration, ValueStack[ValueStack.Depth-1]); }
        break;
      case 98: // ClassMemberDeclaration -> MethodDeclaration
#line 522 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionClassMemberDeclaration, ValueStack[ValueStack.Depth-1]); }
        break;
      case 99: // ClassMemberDeclaration -> AnnotatedMethodDeclaration
#line 523 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionClassMemberDeclaration, ValueStack[ValueStack.Depth-1]); }
        break;
      case 100: // ClassMemberDeclaration -> PropertyDeclaration
#line 524 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionClassMemberDeclaration, ValueStack[ValueStack.Depth-1]); }
        break;
      case 101: // ClassMemberDeclaration -> TypeDeclaration
#line 525 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionClassMemberDeclaration, ValueStack[ValueStack.Depth-1]); }
        break;
      case 102: // AnnotatedFieldDeclaration -> Annotations, FieldDeclaration
#line 531 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionAnnotatedFieldDeclaration, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 103: // FieldDeclaration -> Type, VariableDeclarators, SEPARATOR_SEMICOLON
#line 534 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionFieldDeclaration, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 104: // FieldDeclaration -> Modifiers, Type, VariableDeclarators, SEPARATOR_SEMICOLON
#line 535 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionFieldDeclaration, ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 105: // FieldDeclaration -> error
#line 536 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ Error(Tokens.ProductionFieldDeclaration, "Invalid field declaration."); }
        break;
      case 106: // VariableDeclarators -> VariableDeclarator
#line 539 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionVariableDeclarators, ValueStack[ValueStack.Depth-1]); }
        break;
      case 107: // VariableDeclarators -> VariableDeclarators, SEPARATOR_COMMA, VariableDeclarator
#line 540 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionVariableDeclarators, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 108: // VariableDeclarator -> VariableDeclaratorId
#line 543 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionVariableDeclarator, ValueStack[ValueStack.Depth-1]); }
        break;
      case 109: // VariableDeclarator -> VariableDeclaratorId, OPERATOR_ASSIGNMENT, 
                //                       VariableInitializer
#line 544 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionVariableDeclarator, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 110: // VariableDeclaratorId -> SimpleName
#line 547 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionVariableDeclaratorId, ValueStack[ValueStack.Depth-1]); }
        break;
      case 111: // VariableInitializer -> Expression
#line 550 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionVariableInitializer, ValueStack[ValueStack.Depth-1]); }
        break;
      case 112: // VariableInitializer -> ArrayInitializer
#line 551 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionVariableInitializer, ValueStack[ValueStack.Depth-1]); }
        break;
      case 113: // TriggerDeclaration -> TriggerHeader, MethodBody
#line 556 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionTriggerDeclaration, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 114: // TriggerHeader -> KEYWORD_TRIGGER, SimpleName, KEYWORD_ON, SimpleName, 
                //                  SEPARATOR_PARENTHESES_LEFT, TriggerEvents, 
                //                  SEPARATOR_PARENTHESES_RIGHT
#line 559 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionTriggerHeader, ValueStack[ValueStack.Depth-7], ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 115: // TriggerEvents -> TriggerEvent
#line 562 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionTriggerEvents, ValueStack[ValueStack.Depth-1]); }
        break;
      case 116: // TriggerEvents -> TriggerEvents, SEPARATOR_COMMA, TriggerEvent
#line 563 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionTriggerEvents, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 117: // TriggerEvent -> KEYWORD_BEFORE, KEYWORD_INSERT
#line 566 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionTriggerEvent, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 118: // TriggerEvent -> KEYWORD_BEFORE, KEYWORD_UPDATE
#line 567 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionTriggerEvent, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 119: // TriggerEvent -> KEYWORD_BEFORE, KEYWORD_DELETE
#line 568 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionTriggerEvent, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 120: // TriggerEvent -> KEYWORD_AFTER, KEYWORD_INSERT
#line 569 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionTriggerEvent, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 121: // TriggerEvent -> KEYWORD_AFTER, KEYWORD_UPDATE
#line 570 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionTriggerEvent, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 122: // TriggerEvent -> KEYWORD_AFTER, KEYWORD_DELETE
#line 571 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionTriggerEvent, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 123: // TriggerEvent -> KEYWORD_AFTER, KEYWORD_UNDELETE
#line 572 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionTriggerEvent, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 124: // PropertyDeclaration -> Type, SimpleName, SEPARATOR_BRACE_LEFT, 
                //                        AccessorDeclarations, SEPARATOR_BRACE_RIGHT
#line 577 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionPropertyDeclaration, ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 125: // PropertyDeclaration -> Modifiers, Type, SimpleName, SEPARATOR_BRACE_LEFT, 
                //                        AccessorDeclarations, SEPARATOR_BRACE_RIGHT
#line 578 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionPropertyDeclaration, ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 126: // AccessorDeclarations -> GetAccessorDeclaration
#line 581 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionAccessorDeclarations, ValueStack[ValueStack.Depth-1]); }
        break;
      case 127: // AccessorDeclarations -> GetAccessorDeclaration, SetAccessorDeclaration
#line 582 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionAccessorDeclarations, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 128: // AccessorDeclarations -> SetAccessorDeclaration
#line 583 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionAccessorDeclarations, ValueStack[ValueStack.Depth-1]); }
        break;
      case 129: // AccessorDeclarations -> SetAccessorDeclaration, GetAccessorDeclaration
#line 584 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionAccessorDeclarations, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 130: // GetAccessorDeclaration -> KEYWORD_GET, AccessorBody
#line 587 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionGetAccessorDeclaration, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 131: // GetAccessorDeclaration -> Modifiers, KEYWORD_GET, AccessorBody
#line 588 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionGetAccessorDeclaration, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 132: // SetAccessorDeclaration -> KEYWORD_SET, AccessorBody
#line 591 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionSetAccessorDeclaration, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 133: // SetAccessorDeclaration -> Modifiers, KEYWORD_SET, AccessorBody
#line 592 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionSetAccessorDeclaration, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 134: // AccessorBody -> Block
#line 595 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionAccessorBody, ValueStack[ValueStack.Depth-1]); }
        break;
      case 135: // AccessorBody -> SEPARATOR_SEMICOLON
#line 596 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionAccessorBody, ValueStack[ValueStack.Depth-1]); }
        break;
      case 136: // AnnotatedMethodDeclaration -> Annotations, MethodDeclaration
#line 601 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionAnnotatedMethodDeclaration, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 137: // MethodDeclaration -> MethodHeader, MethodBody
#line 604 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionMethodDeclaration, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 138: // MethodHeader -> Modifiers, Type, MethodDeclarator
#line 607 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionMethodHeader, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 139: // MethodHeader -> Type, MethodDeclarator
#line 608 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionMethodHeader, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 140: // MethodHeader -> Modifiers, KEYWORD_VOID, MethodDeclarator
#line 609 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionMethodHeader, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 141: // MethodHeader -> KEYWORD_VOID, MethodDeclarator
#line 610 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionMethodHeader, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 142: // MethodDeclarator -> SimpleName, SEPARATOR_PARENTHESES_LEFT, 
                //                     SEPARATOR_PARENTHESES_RIGHT
#line 613 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionMethodDeclarator, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 143: // MethodDeclarator -> SimpleName, SEPARATOR_PARENTHESES_LEFT, FormalParameterList, 
                //                     SEPARATOR_PARENTHESES_RIGHT
#line 614 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionMethodDeclarator, ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 144: // FormalParameterList -> FormalParameter
#line 617 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionFormalParameterList, ValueStack[ValueStack.Depth-1]); }
        break;
      case 145: // FormalParameterList -> FormalParameterList, SEPARATOR_COMMA, FormalParameter
#line 618 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionFormalParameterList, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 146: // FormalParameter -> Type, VariableDeclaratorId
#line 621 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionFormalParameter, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 147: // MethodBody -> Block
#line 624 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionMethodBody, ValueStack[ValueStack.Depth-1]); }
        break;
      case 148: // MethodBody -> SEPARATOR_SEMICOLON
#line 625 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionMethodBody, ValueStack[ValueStack.Depth-1]); }
        break;
      case 149: // StaticInitializer -> KEYWORD_STATIC, Block
#line 630 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionStaticInitializer, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 150: // ConstructorDeclaration -> ConstructorDeclarator, ConstructorBody
#line 635 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionConstructorDeclaration, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 151: // ConstructorDeclaration -> Modifiers, ConstructorDeclarator, ConstructorBody
#line 636 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionConstructorDeclaration, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 152: // ConstructorDeclarator -> Name, SEPARATOR_PARENTHESES_LEFT, 
                //                          SEPARATOR_PARENTHESES_RIGHT
#line 639 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionConstructorDeclarator, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 153: // ConstructorDeclarator -> Name, SEPARATOR_PARENTHESES_LEFT, FormalParameterList, 
                //                          SEPARATOR_PARENTHESES_RIGHT
#line 640 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionConstructorDeclarator, ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 154: // ConstructorBody -> SEPARATOR_BRACE_LEFT, SEPARATOR_BRACE_RIGHT
#line 643 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionConstructorBody, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 155: // ConstructorBody -> SEPARATOR_BRACE_LEFT, ExplicitConstructorInvocation, 
                //                    SEPARATOR_BRACE_RIGHT
#line 644 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionConstructorBody, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 156: // ConstructorBody -> SEPARATOR_BRACE_LEFT, BlockStatements, SEPARATOR_BRACE_RIGHT
#line 645 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionConstructorBody, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 157: // ConstructorBody -> SEPARATOR_BRACE_LEFT, ExplicitConstructorInvocation, 
                //                    BlockStatements, SEPARATOR_BRACE_RIGHT
#line 646 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionConstructorBody, ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 158: // ExplicitConstructorInvocation -> KEYWORD_THIS, SEPARATOR_PARENTHESES_LEFT, 
                //                                  SEPARATOR_PARENTHESES_RIGHT, 
                //                                  SEPARATOR_SEMICOLON
#line 649 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionExplicitConstructorInvocation, ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 159: // ExplicitConstructorInvocation -> KEYWORD_THIS, SEPARATOR_PARENTHESES_LEFT, 
                //                                  ArgumentList, SEPARATOR_PARENTHESES_RIGHT, 
                //                                  SEPARATOR_SEMICOLON
#line 650 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionExplicitConstructorInvocation, ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 160: // ExplicitConstructorInvocation -> KEYWORD_SUPER, SEPARATOR_PARENTHESES_LEFT, 
                //                                  SEPARATOR_PARENTHESES_RIGHT, 
                //                                  SEPARATOR_SEMICOLON
#line 651 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionExplicitConstructorInvocation, ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 161: // ExplicitConstructorInvocation -> KEYWORD_SUPER, SEPARATOR_PARENTHESES_LEFT, 
                //                                  ArgumentList, SEPARATOR_PARENTHESES_RIGHT, 
                //                                  SEPARATOR_SEMICOLON
#line 652 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionExplicitConstructorInvocation, ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 162: // AnnotatedInterfaceDeclaration -> Annotations, InterfaceDeclaration
#line 657 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionAnnotatedInterfaceDeclaration, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 163: // InterfaceDeclaration -> KEYWORD_INTERFACE, SimpleName, InterfaceBody
#line 660 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionInterfaceDeclaration, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 164: // InterfaceDeclaration -> KEYWORD_INTERFACE, SimpleName, ExtendsInterfaces, 
                //                         InterfaceBody
#line 661 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionInterfaceDeclaration, ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 165: // InterfaceDeclaration -> Modifiers, KEYWORD_INTERFACE, SimpleName, InterfaceBody
#line 662 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionInterfaceDeclaration, ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 166: // InterfaceDeclaration -> Modifiers, KEYWORD_INTERFACE, SimpleName, 
                //                         ExtendsInterfaces, InterfaceBody
#line 663 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionInterfaceDeclaration, ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 167: // ExtendsInterfaces -> KEYWORD_EXTENDS, Name
#line 666 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionExtendsInterfaces, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 168: // ExtendsInterfaces -> ExtendsInterfaces, SEPARATOR_COMMA, Name
#line 667 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionExtendsInterfaces, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 169: // InterfaceBody -> SEPARATOR_BRACE_LEFT, SEPARATOR_BRACE_RIGHT
#line 670 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionInterfaceBody, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 170: // InterfaceBody -> SEPARATOR_BRACE_LEFT, InterfaceMemberDeclarations, 
                //                  SEPARATOR_BRACE_RIGHT
#line 671 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionInterfaceBody, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 171: // InterfaceMemberDeclarations -> InterfaceMemberDeclaration
#line 674 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionInterfaceMemberDeclarations, ValueStack[ValueStack.Depth-1]); }
        break;
      case 172: // InterfaceMemberDeclarations -> InterfaceMemberDeclarations, 
                //                                InterfaceMemberDeclaration
#line 675 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionInterfaceMemberDeclarations, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 173: // InterfaceMemberDeclaration -> AbstractMethodDeclaration
#line 678 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionInterfaceMemberDeclaration, ValueStack[ValueStack.Depth-1]); }
        break;
      case 174: // AbstractMethodDeclaration -> MethodHeader, SEPARATOR_SEMICOLON
#line 681 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionAbstractMethodDeclaration, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 175: // AnnotatedEnumDeclaration -> Annotations, EnumDeclaration
#line 686 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionAnnotatedEnumDeclaration, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 176: // EnumDeclaration -> KEYWORD_ENUM, SimpleName, EnumBody
#line 689 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionEnumDeclaration, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 177: // EnumDeclaration -> Modifiers, KEYWORD_ENUM, SimpleName, EnumBody
#line 690 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionEnumDeclaration, ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 178: // EnumBody -> SEPARATOR_BRACE_LEFT, SEPARATOR_BRACE_RIGHT
#line 693 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionEnumBody, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 179: // EnumBody -> SEPARATOR_BRACE_LEFT, EnumMemberDeclarations, SEPARATOR_BRACE_RIGHT
#line 694 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionEnumBody, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 180: // EnumMemberDeclarations -> EnumMemberDeclaration
#line 697 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionEnumMemberDeclarations, ValueStack[ValueStack.Depth-1]); }
        break;
      case 181: // EnumMemberDeclarations -> EnumMemberDeclarations, SEPARATOR_COMMA, 
                //                           EnumMemberDeclaration
#line 698 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionEnumMemberDeclarations, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 182: // EnumMemberDeclaration -> SimpleName
#line 701 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionEnumMemberDeclaration, ValueStack[ValueStack.Depth-1]); }
        break;
      case 183: // ArrayInitializer -> SEPARATOR_BRACE_LEFT, SEPARATOR_BRACE_RIGHT
#line 706 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionArrayInitializer, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 184: // ArrayInitializer -> SEPARATOR_BRACE_LEFT, VariableInitializers, 
                //                     SEPARATOR_BRACE_RIGHT
#line 707 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionArrayInitializer, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 185: // VariableInitializers -> VariableInitializer
#line 710 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionVariableInitializers, ValueStack[ValueStack.Depth-1]); }
        break;
      case 186: // VariableInitializers -> VariableInitializers, SEPARATOR_COMMA, 
                //                         VariableInitializer
#line 711 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionVariableInitializers, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 187: // Block -> SEPARATOR_BRACE_LEFT, SEPARATOR_BRACE_RIGHT
#line 716 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionBlock, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 188: // Block -> SEPARATOR_BRACE_LEFT, BlockStatements, SEPARATOR_BRACE_RIGHT
#line 717 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionBlock, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 189: // BlockStatements -> BlockStatement
#line 720 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionBlockStatements, ValueStack[ValueStack.Depth-1]); }
        break;
      case 190: // BlockStatements -> BlockStatements, BlockStatement
#line 721 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionBlockStatements, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 191: // BlockStatement -> LocalVariableDeclarationStatement
#line 724 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionBlockStatement, ValueStack[ValueStack.Depth-1]); }
        break;
      case 192: // BlockStatement -> Statement
#line 725 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionBlockStatement, ValueStack[ValueStack.Depth-1]); }
        break;
      case 193: // LocalVariableDeclarationStatement -> LocalVariableDeclaration, 
                //                                      SEPARATOR_SEMICOLON
#line 728 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionLocalVariableDeclarationStatement, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 194: // LocalVariableDeclarationStatement -> Modifiers, LocalVariableDeclaration, 
                //                                      SEPARATOR_SEMICOLON
#line 729 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionLocalVariableDeclarationStatement, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 195: // LocalVariableDeclaration -> Type, VariableDeclarators
#line 732 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionLocalVariableDeclaration, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 196: // Statement -> StatementWithoutTrailingSubstatement
#line 735 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionStatement, ValueStack[ValueStack.Depth-1]); }
        break;
      case 197: // Statement -> IfThenStatement
#line 736 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionStatement, ValueStack[ValueStack.Depth-1]); }
        break;
      case 198: // Statement -> IfThenElseStatement
#line 737 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionStatement, ValueStack[ValueStack.Depth-1]); }
        break;
      case 199: // Statement -> WhileStatement
#line 738 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionStatement, ValueStack[ValueStack.Depth-1]); }
        break;
      case 200: // Statement -> ForStatement
#line 739 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionStatement, ValueStack[ValueStack.Depth-1]); }
        break;
      case 201: // Statement -> ForEachStatement
#line 740 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionStatement, ValueStack[ValueStack.Depth-1]); }
        break;
      case 202: // StatementNoShortIf -> StatementWithoutTrailingSubstatement
#line 743 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionStatementNoShortIf, ValueStack[ValueStack.Depth-1]); }
        break;
      case 203: // StatementNoShortIf -> IfThenElseStatementNoShortIf
#line 744 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionStatementNoShortIf, ValueStack[ValueStack.Depth-1]); }
        break;
      case 204: // StatementNoShortIf -> WhileStatementNoShortIf
#line 745 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionStatementNoShortIf, ValueStack[ValueStack.Depth-1]); }
        break;
      case 205: // StatementNoShortIf -> ForStatementNoShortIf
#line 746 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionStatementNoShortIf, ValueStack[ValueStack.Depth-1]); }
        break;
      case 206: // StatementNoShortIf -> ForEachStatementNoShortIf
#line 747 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionStatementNoShortIf, ValueStack[ValueStack.Depth-1]); }
        break;
      case 207: // StatementWithoutTrailingSubstatement -> Block
#line 750 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionStatementWithoutTrailingSubstatement, ValueStack[ValueStack.Depth-1]); }
        break;
      case 208: // StatementWithoutTrailingSubstatement -> LocalVariableDeclarationStatement
#line 751 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionStatementWithoutTrailingSubstatement, ValueStack[ValueStack.Depth-1]); }
        break;
      case 209: // StatementWithoutTrailingSubstatement -> EmptyStatement
#line 752 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionStatementWithoutTrailingSubstatement, ValueStack[ValueStack.Depth-1]); }
        break;
      case 210: // StatementWithoutTrailingSubstatement -> ExpressionStatement
#line 753 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionStatementWithoutTrailingSubstatement, ValueStack[ValueStack.Depth-1]); }
        break;
      case 211: // StatementWithoutTrailingSubstatement -> DoStatement
#line 754 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionStatementWithoutTrailingSubstatement, ValueStack[ValueStack.Depth-1]); }
        break;
      case 212: // StatementWithoutTrailingSubstatement -> BreakStatement
#line 755 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionStatementWithoutTrailingSubstatement, ValueStack[ValueStack.Depth-1]); }
        break;
      case 213: // StatementWithoutTrailingSubstatement -> ContinueStatement
#line 756 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionStatementWithoutTrailingSubstatement, ValueStack[ValueStack.Depth-1]); }
        break;
      case 214: // StatementWithoutTrailingSubstatement -> ReturnStatement
#line 757 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionStatementWithoutTrailingSubstatement, ValueStack[ValueStack.Depth-1]); }
        break;
      case 215: // StatementWithoutTrailingSubstatement -> ThrowStatement
#line 758 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionStatementWithoutTrailingSubstatement, ValueStack[ValueStack.Depth-1]); }
        break;
      case 216: // StatementWithoutTrailingSubstatement -> TryStatement
#line 759 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionStatementWithoutTrailingSubstatement, ValueStack[ValueStack.Depth-1]); }
        break;
      case 217: // StatementWithoutTrailingSubstatement -> DMLStatement
#line 760 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionStatementWithoutTrailingSubstatement, ValueStack[ValueStack.Depth-1]); }
        break;
      case 218: // EmptyStatement -> SEPARATOR_SEMICOLON
#line 763 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionEmptyStatement, ValueStack[ValueStack.Depth-1]); }
        break;
      case 219: // ExpressionStatement -> StatementExpression, SEPARATOR_SEMICOLON
#line 766 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionExpressionStatement, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 220: // ExpressionStatement -> MethodInvocation, Block
#line 767 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionExpressionStatement, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 221: // ExpressionStatement -> error, SEPARATOR_SEMICOLON
#line 768 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ Error(Tokens.ProductionExpressionStatement, "Invalid expression."); }
        break;
      case 222: // ExpressionStatement -> error
#line 769 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ Error(Tokens.ProductionExpressionStatement, "';' expected."); }
        break;
      case 223: // StatementExpression -> Assignment
#line 772 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionStatementExpression, ValueStack[ValueStack.Depth-1]); }
        break;
      case 224: // StatementExpression -> PreIncrementExpression
#line 773 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionStatementExpression, ValueStack[ValueStack.Depth-1]); }
        break;
      case 225: // StatementExpression -> PreDecrementExpression
#line 774 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionStatementExpression, ValueStack[ValueStack.Depth-1]); }
        break;
      case 226: // StatementExpression -> PostIncrementExpression
#line 775 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionStatementExpression, ValueStack[ValueStack.Depth-1]); }
        break;
      case 227: // StatementExpression -> PostDecrementExpression
#line 776 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionStatementExpression, ValueStack[ValueStack.Depth-1]); }
        break;
      case 228: // StatementExpression -> MethodInvocation
#line 777 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionStatementExpression, ValueStack[ValueStack.Depth-1]); }
        break;
      case 229: // StatementExpression -> ClassInstanceCreationExpression
#line 778 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionStatementExpression, ValueStack[ValueStack.Depth-1]); }
        break;
      case 230: // IfThenStatement -> KEYWORD_IF, SEPARATOR_PARENTHESES_LEFT, Expression, 
                //                    SEPARATOR_PARENTHESES_RIGHT, Statement
#line 781 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionIfThenStatement, ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 231: // IfThenElseStatement -> KEYWORD_IF, SEPARATOR_PARENTHESES_LEFT, Expression, 
                //                        SEPARATOR_PARENTHESES_RIGHT, StatementNoShortIf, 
                //                        KEYWORD_ELSE, Statement
#line 784 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionIfThenElseStatement, ValueStack[ValueStack.Depth-7], ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2]); }
        break;
      case 232: // IfThenElseStatementNoShortIf -> KEYWORD_IF, SEPARATOR_PARENTHESES_LEFT, 
                //                                 Expression, SEPARATOR_PARENTHESES_RIGHT, 
                //                                 StatementNoShortIf, KEYWORD_ELSE, 
                //                                 StatementNoShortIf
#line 787 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionIfThenElseStatementNoShortIf, ValueStack[ValueStack.Depth-7], ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 233: // WhileStatement -> KEYWORD_WHILE, SEPARATOR_PARENTHESES_LEFT, Expression, 
                //                   SEPARATOR_PARENTHESES_RIGHT, Statement
#line 790 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionWhileStatement, ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 234: // WhileStatementNoShortIf -> KEYWORD_WHILE, SEPARATOR_PARENTHESES_LEFT, 
                //                            Expression, SEPARATOR_PARENTHESES_RIGHT, 
                //                            StatementNoShortIf
#line 793 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionWhileStatementNoShortIf, ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 235: // DoStatement -> KEYWORD_DO, Statement, KEYWORD_WHILE, SEPARATOR_PARENTHESES_LEFT, 
                //                Expression, SEPARATOR_PARENTHESES_RIGHT, SEPARATOR_SEMICOLON
#line 796 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionDoStatement, ValueStack[ValueStack.Depth-7], ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 236: // ForEachStatement -> KEYWORD_FOR, SEPARATOR_PARENTHESES_LEFT, Type, SimpleName, 
                //                     SEPARATOR_COLON, Expression, SEPARATOR_PARENTHESES_RIGHT, 
                //                     Statement
#line 799 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionForEachStatement, ValueStack[ValueStack.Depth-8], ValueStack[ValueStack.Depth-7], ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 237: // ForEachStatementNoShortIf -> KEYWORD_FOR, SEPARATOR_PARENTHESES_LEFT, Type, 
                //                              SimpleName, SEPARATOR_COLON, Expression, 
                //                              SEPARATOR_PARENTHESES_RIGHT, 
                //                              ForStatementNoShortIf
#line 802 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionForEachStatementNoShortIf, ValueStack[ValueStack.Depth-8], ValueStack[ValueStack.Depth-7], ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 238: // ForStatement -> KEYWORD_FOR, SEPARATOR_PARENTHESES_LEFT, ForInit, 
                //                 SEPARATOR_SEMICOLON, ForExpression, SEPARATOR_SEMICOLON, 
                //                 ForUpdate, SEPARATOR_PARENTHESES_RIGHT, Statement
#line 805 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionForStatement, ValueStack[ValueStack.Depth-9], ValueStack[ValueStack.Depth-8], ValueStack[ValueStack.Depth-7], ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 239: // ForStatementNoShortIf -> KEYWORD_FOR, SEPARATOR_PARENTHESES_LEFT, ForInit, 
                //                          SEPARATOR_SEMICOLON, ForExpression, 
                //                          SEPARATOR_SEMICOLON, ForUpdate, 
                //                          SEPARATOR_PARENTHESES_RIGHT, StatementNoShortIf
#line 808 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionForStatementNoShortIf, ValueStack[ValueStack.Depth-9], ValueStack[ValueStack.Depth-8], ValueStack[ValueStack.Depth-7], ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 240: // ForInit -> /* empty */
#line 811 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionForInit); }
        break;
      case 241: // ForInit -> StatementExpressionList
#line 812 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionForInit, ValueStack[ValueStack.Depth-1]); }
        break;
      case 242: // ForInit -> LocalVariableDeclaration
#line 813 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionForInit, ValueStack[ValueStack.Depth-1]); }
        break;
      case 243: // ForExpression -> /* empty */
#line 816 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionForExpression); }
        break;
      case 244: // ForExpression -> Expression
#line 817 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionForExpression, ValueStack[ValueStack.Depth-1]); }
        break;
      case 245: // ForUpdate -> /* empty */
#line 820 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionForUpdate); }
        break;
      case 246: // ForUpdate -> StatementExpressionList
#line 821 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionForUpdate, ValueStack[ValueStack.Depth-1]); }
        break;
      case 247: // StatementExpressionList -> StatementExpression
#line 824 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionStatementExpressionList, ValueStack[ValueStack.Depth-1]); }
        break;
      case 248: // StatementExpressionList -> StatementExpressionList, SEPARATOR_COMMA, 
                //                            StatementExpression
#line 825 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionStatementExpressionList, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 249: // BreakStatement -> KEYWORD_BREAK, SEPARATOR_SEMICOLON
#line 828 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionBreakStatement, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 250: // ContinueStatement -> KEYWORD_CONTINUE, SEPARATOR_SEMICOLON
#line 831 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionContinueStatement, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 251: // ReturnStatement -> KEYWORD_RETURN, SEPARATOR_SEMICOLON
#line 834 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionReturnStatement, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 252: // ReturnStatement -> KEYWORD_RETURN, Expression, SEPARATOR_SEMICOLON
#line 835 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionReturnStatement, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 253: // ThrowStatement -> KEYWORD_THROW, Expression, SEPARATOR_SEMICOLON
#line 838 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionThrowStatement, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 254: // TryStatement -> KEYWORD_TRY, Block, Catches
#line 841 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionTryStatement, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 255: // TryStatement -> KEYWORD_TRY, Block, Catches, Finally
#line 842 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionTryStatement, ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 256: // TryStatement -> KEYWORD_TRY, Block, Finally
#line 843 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionTryStatement, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 257: // Catches -> CatchClause
#line 846 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionCatches, ValueStack[ValueStack.Depth-1]); }
        break;
      case 258: // Catches -> Catches, CatchClause
#line 847 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionCatches, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 259: // CatchClause -> KEYWORD_CATCH, SEPARATOR_PARENTHESES_LEFT, FormalParameter, 
                //                SEPARATOR_PARENTHESES_RIGHT, Block
#line 850 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionCatchClause, ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 260: // Finally -> KEYWORD_FINALLY, Block
#line 853 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionFinally, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 261: // DMLStatement -> KEYWORD_INSERT, Expression, SEPARATOR_SEMICOLON
#line 856 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionDMLStatement, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 262: // DMLStatement -> KEYWORD_UPDATE, Expression, SEPARATOR_SEMICOLON
#line 857 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionDMLStatement, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 263: // DMLStatement -> KEYWORD_UPSERT, Expression, SEPARATOR_SEMICOLON
#line 858 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionDMLStatement, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 264: // DMLStatement -> KEYWORD_DELETE, Expression, SEPARATOR_SEMICOLON
#line 859 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionDMLStatement, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 265: // DMLStatement -> KEYWORD_UNDELETE, Expression, SEPARATOR_SEMICOLON
#line 860 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionDMLStatement, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 266: // DMLStatement -> KEYWORD_MERGE, Expression, SEPARATOR_SEMICOLON
#line 861 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionDMLStatement, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 267: // Primary -> PrimaryNoNewArray
#line 866 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionPrimary, ValueStack[ValueStack.Depth-1]); }
        break;
      case 268: // Primary -> ArrayCreationExpression
#line 867 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionPrimary, ValueStack[ValueStack.Depth-1]); }
        break;
      case 269: // PrimaryNoNewArray -> Literal
#line 870 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionPrimaryNoNewArray, ValueStack[ValueStack.Depth-1]); }
        break;
      case 270: // PrimaryNoNewArray -> KEYWORD_THIS
#line 871 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionPrimaryNoNewArray, ValueStack[ValueStack.Depth-1]); }
        break;
      case 271: // PrimaryNoNewArray -> SEPARATOR_PARENTHESES_LEFT, Expression, 
                //                      SEPARATOR_PARENTHESES_RIGHT
#line 872 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionPrimaryNoNewArray, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 272: // PrimaryNoNewArray -> ClassInstanceCreationExpression
#line 873 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionPrimaryNoNewArray, ValueStack[ValueStack.Depth-1]); }
        break;
      case 273: // PrimaryNoNewArray -> FieldAccess
#line 874 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionPrimaryNoNewArray, ValueStack[ValueStack.Depth-1]); }
        break;
      case 274: // PrimaryNoNewArray -> MethodInvocation
#line 875 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionPrimaryNoNewArray, ValueStack[ValueStack.Depth-1]); }
        break;
      case 275: // PrimaryNoNewArray -> ArrayAccess
#line 876 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionPrimaryNoNewArray, ValueStack[ValueStack.Depth-1]); }
        break;
      case 276: // PrimaryNoNewArray -> SOQL
#line 877 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionPrimaryNoNewArray, ValueStack[ValueStack.Depth-1]); }
        break;
      case 277: // PrimaryNoNewArray -> SOSL
#line 878 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionPrimaryNoNewArray, ValueStack[ValueStack.Depth-1]); }
        break;
      case 278: // ClassInstanceCreationExpression -> KEYWORD_NEW, Type, 
                //                                    SEPARATOR_PARENTHESES_LEFT, 
                //                                    SEPARATOR_PARENTHESES_RIGHT
#line 881 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionClassInstanceCreationExpression, ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 279: // ClassInstanceCreationExpression -> KEYWORD_NEW, Type, 
                //                                    SEPARATOR_PARENTHESES_LEFT, ArgumentList, 
                //                                    SEPARATOR_PARENTHESES_RIGHT
#line 882 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionClassInstanceCreationExpression, ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 280: // ClassInstanceCreationExpression -> KEYWORD_NEW, Type, SEPARATOR_BRACE_LEFT, 
                //                                    SEPARATOR_BRACE_RIGHT
#line 883 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionClassInstanceCreationExpression, ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 281: // ClassInstanceCreationExpression -> KEYWORD_NEW, Type, SEPARATOR_BRACE_LEFT, 
                //                                    ArgumentList, SEPARATOR_BRACE_RIGHT
#line 884 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionClassInstanceCreationExpression, ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 282: // ClassInstanceCreationExpression -> KEYWORD_NEW, Type, SEPARATOR_BRACE_LEFT, 
                //                                    MapArgumentAssignmentList, 
                //                                    SEPARATOR_BRACE_RIGHT
#line 885 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionClassInstanceCreationExpression, ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 283: // MapArgumentAssignmentList -> MapArgumentAssignment
#line 888 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionMapArgumentAssignmentList, ValueStack[ValueStack.Depth-1]); }
        break;
      case 284: // MapArgumentAssignmentList -> MapArgumentAssignmentList, SEPARATOR_COMMA, 
                //                              MapArgumentAssignment
#line 889 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionMapArgumentAssignmentList, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 285: // MapArgumentAssignment -> Expression, OPERATOR_ASSIGNMENT_MAP, Expression
#line 892 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionMapArgumentAssignment, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 286: // ArgumentList -> Expression
#line 895 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionArgumentList, ValueStack[ValueStack.Depth-1]); }
        break;
      case 287: // ArgumentList -> ArgumentList, SEPARATOR_COMMA, Expression
#line 896 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionArgumentList, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 288: // ArrayCreationExpression -> KEYWORD_NEW, Type, DimExprs
#line 899 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionArrayCreationExpression, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 289: // ArrayCreationExpression -> KEYWORD_NEW, Type, DimExprs, Dims
#line 900 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionArrayCreationExpression, ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 290: // DimExprs -> DimExpr
#line 903 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionDimExprs, ValueStack[ValueStack.Depth-1]); }
        break;
      case 291: // DimExprs -> DimExprs, DimExpr
#line 904 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionDimExprs, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 292: // DimExpr -> SEPARATOR_BRACKET_LEFT, Expression, SEPARATOR_BRACKET_RIGHT
#line 907 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionDimExpr, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 293: // Dims -> SEPARATOR_BRACKET_EMPTY
#line 910 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionDims, ValueStack[ValueStack.Depth-1]); }
        break;
      case 294: // Dims -> Dims, SEPARATOR_BRACKET_EMPTY
#line 911 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionDims, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 295: // FieldAccess -> Primary, SEPARATOR_DOT, SimpleName
#line 914 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionFieldAccess, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 296: // FieldAccess -> Primary, SEPARATOR_DOT, KEYWORD_CLASS
#line 915 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionFieldAccess, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 297: // FieldAccess -> Primary, SEPARATOR_DOT, KEYWORD_NEW
#line 916 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionFieldAccess, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 298: // FieldAccess -> Primary, SEPARATOR_DOT, PrimitiveType
#line 917 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionFieldAccess, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 299: // FieldAccess -> KEYWORD_SUPER, SEPARATOR_DOT, SimpleName
#line 918 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionFieldAccess, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 300: // FieldAccess -> KEYWORD_SUPER, SEPARATOR_DOT, KEYWORD_CLASS
#line 919 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionFieldAccess, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 301: // FieldAccess -> Primary, SEPARATOR_DOT, KEYWORD_NEW
#line 920 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionFieldAccess, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 302: // FieldAccess -> KEYWORD_SUPER, SEPARATOR_DOT, PrimitiveType
#line 921 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionFieldAccess, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 303: // Annotations -> Annotation
#line 924 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionAnnotations, ValueStack[ValueStack.Depth-1]); }
        break;
      case 304: // Annotations -> Annotations, Annotation
#line 925 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionAnnotations, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 305: // Annotation -> KEYWORD_ANNOTATE, SimpleName
#line 928 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionAnnotation, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 306: // Annotation -> KEYWORD_ANNOTATE, SimpleName, SEPARATOR_PARENTHESES_LEFT, 
                //               SEPARATOR_PARENTHESES_RIGHT
#line 929 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionAnnotation, ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 307: // Annotation -> KEYWORD_ANNOTATE, SimpleName, SEPARATOR_PARENTHESES_LEFT, 
                //               VariableInitializers, SEPARATOR_PARENTHESES_RIGHT
#line 930 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionAnnotation, ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 308: // MethodInvocation -> Name, SEPARATOR_PARENTHESES_LEFT, 
                //                     SEPARATOR_PARENTHESES_RIGHT
#line 933 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionMethodInvocation, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 309: // MethodInvocation -> Name, SEPARATOR_PARENTHESES_LEFT, ArgumentList, 
                //                     SEPARATOR_PARENTHESES_RIGHT
#line 934 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionMethodInvocation, ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 310: // MethodInvocation -> PrimitiveType, SEPARATOR_DOT, SimpleName, 
                //                     SEPARATOR_PARENTHESES_LEFT, SEPARATOR_PARENTHESES_RIGHT
#line 935 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionMethodInvocation, ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 311: // MethodInvocation -> PrimitiveType, SEPARATOR_DOT, SimpleName, 
                //                     SEPARATOR_PARENTHESES_LEFT, ArgumentList, 
                //                     SEPARATOR_PARENTHESES_RIGHT
#line 936 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionMethodInvocation, ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 312: // MethodInvocation -> Primary, SEPARATOR_DOT, SimpleName, 
                //                     SEPARATOR_PARENTHESES_LEFT, SEPARATOR_PARENTHESES_RIGHT
#line 937 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionMethodInvocation, ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 313: // MethodInvocation -> Primary, SEPARATOR_DOT, SimpleName, 
                //                     SEPARATOR_PARENTHESES_LEFT, ArgumentList, 
                //                     SEPARATOR_PARENTHESES_RIGHT
#line 938 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionMethodInvocation, ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 314: // MethodInvocation -> KEYWORD_SUPER, SEPARATOR_DOT, SimpleName, 
                //                     SEPARATOR_PARENTHESES_LEFT, SEPARATOR_PARENTHESES_RIGHT
#line 939 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionMethodInvocation, ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 315: // MethodInvocation -> KEYWORD_SUPER, SEPARATOR_DOT, SimpleName, 
                //                     SEPARATOR_PARENTHESES_LEFT, ArgumentList, 
                //                     SEPARATOR_PARENTHESES_RIGHT
#line 940 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionMethodInvocation, ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 316: // ArrayAccess -> Name, SEPARATOR_BRACKET_LEFT, Expression, 
                //                SEPARATOR_BRACKET_RIGHT
#line 943 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionArrayAccess, ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 317: // ArrayAccess -> PrimaryNoNewArray, SEPARATOR_BRACKET_LEFT, Expression, 
                //                SEPARATOR_BRACKET_RIGHT
#line 944 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionArrayAccess, ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 318: // PostfixExpression -> Primary
#line 947 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionPostfixExpression, ValueStack[ValueStack.Depth-1]); }
        break;
      case 319: // PostfixExpression -> Name
#line 948 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionPostfixExpression, ValueStack[ValueStack.Depth-1]); }
        break;
      case 320: // PostfixExpression -> PostIncrementExpression
#line 949 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionPostfixExpression, ValueStack[ValueStack.Depth-1]); }
        break;
      case 321: // PostfixExpression -> PostDecrementExpression
#line 950 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionPostfixExpression, ValueStack[ValueStack.Depth-1]); }
        break;
      case 322: // PostIncrementExpression -> PostfixExpression, OPERATOR_INCREMENT
#line 953 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionPostIncrementExpression, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 323: // PostDecrementExpression -> PostfixExpression, OPERATOR_DECREMENT
#line 956 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionPostDecrementExpression, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 324: // UnaryExpression -> PreIncrementExpression
#line 959 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionUnaryExpression, ValueStack[ValueStack.Depth-1]); }
        break;
      case 325: // UnaryExpression -> PreDecrementExpression
#line 960 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionUnaryExpression, ValueStack[ValueStack.Depth-1]); }
        break;
      case 326: // UnaryExpression -> OPERATOR_ADDITION, UnaryExpression
#line 961 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionUnaryExpression, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 327: // UnaryExpression -> OPERATOR_SUBTRACTION, UnaryExpression
#line 962 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionUnaryExpression, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 328: // UnaryExpression -> UnaryExpressionNotPlusMinus
#line 963 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionUnaryExpression, ValueStack[ValueStack.Depth-1]); }
        break;
      case 329: // PreIncrementExpression -> OPERATOR_INCREMENT, UnaryExpression
#line 966 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionPreIncrementExpression, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 330: // PreDecrementExpression -> OPERATOR_DECREMENT, UnaryExpression
#line 969 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionPreDecrementExpression, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 331: // UnaryExpressionNotPlusMinus -> PostfixExpression
#line 972 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionUnaryExpressionNotPlusMinus, ValueStack[ValueStack.Depth-1]); }
        break;
      case 332: // UnaryExpressionNotPlusMinus -> OPERATOR_LOGICAL_COMPLEMENT, UnaryExpression
#line 973 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionUnaryExpressionNotPlusMinus, ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 333: // UnaryExpressionNotPlusMinus -> CastExpression
#line 974 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionUnaryExpressionNotPlusMinus, ValueStack[ValueStack.Depth-1]); }
        break;
      case 334: // CastExpression -> SEPARATOR_PARENTHESES_LEFT, PrimitiveType, 
                //                   SEPARATOR_PARENTHESES_RIGHT, UnaryExpression
#line 977 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionCastExpression, ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 335: // CastExpression -> SEPARATOR_PARENTHESES_LEFT, ReferenceType, 
                //                   SEPARATOR_PARENTHESES_RIGHT, UnaryExpressionNotPlusMinus
#line 978 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionCastExpression, ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 336: // CastExpression -> SEPARATOR_PARENTHESES_LEFT, PrimitiveType, 
                //                   SEPARATOR_PARENTHESES_RIGHT, SEPARATOR_PARENTHESES_LEFT, 
                //                   IDENTIFIER, SEPARATOR_PARENTHESES_RIGHT
#line 979 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionCastExpression, ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 337: // CastExpression -> SEPARATOR_PARENTHESES_LEFT, ReferenceType, 
                //                   SEPARATOR_PARENTHESES_RIGHT, SEPARATOR_PARENTHESES_LEFT, 
                //                   IDENTIFIER, SEPARATOR_PARENTHESES_RIGHT
#line 980 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionCastExpression, ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 338: // MultiplicativeExpression -> UnaryExpression
#line 983 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionMultiplicativeExpression, ValueStack[ValueStack.Depth-1]); }
        break;
      case 339: // MultiplicativeExpression -> MultiplicativeExpression, OPERATOR_MULTIPLICATION, 
                //                             UnaryExpression
#line 984 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionMultiplicativeExpression, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 340: // MultiplicativeExpression -> MultiplicativeExpression, OPERATOR_DIVISION, 
                //                             UnaryExpression
#line 985 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionMultiplicativeExpression, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 341: // AdditiveExpression -> MultiplicativeExpression
#line 988 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionAdditiveExpression, ValueStack[ValueStack.Depth-1]); }
        break;
      case 342: // AdditiveExpression -> AdditiveExpression, OPERATOR_ADDITION, 
                //                       MultiplicativeExpression
#line 989 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionAdditiveExpression, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 343: // AdditiveExpression -> AdditiveExpression, OPERATOR_SUBTRACTION, 
                //                       MultiplicativeExpression
#line 990 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionAdditiveExpression, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 344: // ShiftExpression -> AdditiveExpression
#line 993 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionRelationalExpression, ValueStack[ValueStack.Depth-1]); }
        break;
      case 345: // ShiftExpression -> ShiftExpression, OPERATOR_BITWISE_SHIFT_LEFT, 
                //                    AdditiveExpression
#line 994 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionShiftExpression, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 346: // ShiftExpression -> ShiftExpression, OPERATOR_GREATER_THAN_A, 
                //                    OPERATOR_GREATER_THAN_B, AdditiveExpression
#line 995 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionShiftExpression, ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 347: // ShiftExpression -> ShiftExpression, OPERATOR_GREATER_THAN_A, 
                //                    OPERATOR_GREATER_THAN_B, OPERATOR_GREATER_THAN_C, 
                //                    AdditiveExpression
#line 996 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionShiftExpression, ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 348: // RelationalExpression -> ShiftExpression
#line 999 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionRelationalExpression, ValueStack[ValueStack.Depth-1]); }
        break;
      case 349: // RelationalExpression -> RelationalExpression, RelationalOperator, 
                //                         ShiftExpression
#line 1000 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionRelationalExpression, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 350: // RelationalExpression -> RelationalExpression, OPERATOR_INSTANCEOF, Type
#line 1001 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionRelationalExpression, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 351: // RelationalOperator -> OPERATOR_LESS_THAN
#line 1004 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionRelationalOperator, ValueStack[ValueStack.Depth-1]); }
        break;
      case 352: // RelationalOperator -> OPERATOR_GREATER_THAN
#line 1005 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionRelationalOperator, ValueStack[ValueStack.Depth-1]); }
        break;
      case 353: // RelationalOperator -> OPERATOR_LESS_THAN_OR_EQUAL
#line 1006 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionRelationalOperator, ValueStack[ValueStack.Depth-1]); }
        break;
      case 354: // RelationalOperator -> OPERATOR_GREATER_THAN_OR_EQUAL
#line 1007 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionRelationalOperator, ValueStack[ValueStack.Depth-1]); }
        break;
      case 355: // EqualityExpression -> RelationalExpression
#line 1010 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionRelationalExpression, ValueStack[ValueStack.Depth-1]); }
        break;
      case 356: // EqualityExpression -> EqualityExpression, OPERATOR_EQUALITY, 
                //                       RelationalExpression
#line 1011 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionEqualityExpression, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 357: // EqualityExpression -> EqualityExpression, OPERATOR_EQUALITY_EXACT, 
                //                       RelationalExpression
#line 1012 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionEqualityExpression, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 358: // EqualityExpression -> EqualityExpression, OPERATOR_INEQUALITY, 
                //                       RelationalExpression
#line 1013 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionEqualityExpression, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 359: // EqualityExpression -> EqualityExpression, OPERATOR_INEQUALITY_ALT, 
                //                       RelationalExpression
#line 1014 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionEqualityExpression, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 360: // EqualityExpression -> EqualityExpression, OPERATOR_INEQUALITY_EXACT, 
                //                       RelationalExpression
#line 1015 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionEqualityExpression, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 361: // AndExpression -> EqualityExpression
#line 1018 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionAndExpression, ValueStack[ValueStack.Depth-1]); }
        break;
      case 362: // AndExpression -> AndExpression, OPERATOR_BITWISE_AND, EqualityExpression
#line 1019 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionAndExpression, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 363: // ExclusiveOrExpression -> AndExpression
#line 1022 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionExclusiveOrExpression, ValueStack[ValueStack.Depth-1]); }
        break;
      case 364: // ExclusiveOrExpression -> ExclusiveOrExpression, OPERATOR_BITWISE_EXCLUSIVE_OR, 
                //                          AndExpression
#line 1023 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionExclusiveOrExpression, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 365: // InclusiveOrExpression -> ExclusiveOrExpression
#line 1026 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionInclusiveOrExpression, ValueStack[ValueStack.Depth-1]); }
        break;
      case 366: // InclusiveOrExpression -> InclusiveOrExpression, OPERATOR_BITWISE_OR, 
                //                          ExclusiveOrExpression
#line 1027 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionInclusiveOrExpression, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 367: // ConditionalAndExpression -> InclusiveOrExpression
#line 1030 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionConditionalAndExpression, ValueStack[ValueStack.Depth-1]); }
        break;
      case 368: // ConditionalAndExpression -> ConditionalAndExpression, OPERATOR_AND, 
                //                             InclusiveOrExpression
#line 1031 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionConditionalAndExpression, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 369: // ConditionalOrExpression -> ConditionalAndExpression
#line 1034 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionConditionalOrExpression, ValueStack[ValueStack.Depth-1]); }
        break;
      case 370: // ConditionalOrExpression -> ConditionalOrExpression, OPERATOR_OR, 
                //                            ConditionalAndExpression
#line 1035 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionConditionalOrExpression, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 371: // ConditionalExpression -> ConditionalOrExpression
#line 1038 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionConditionalExpression, ValueStack[ValueStack.Depth-1]); }
        break;
      case 372: // ConditionalExpression -> ConditionalOrExpression, OPERATOR_QUESTION_MARK, 
                //                          Expression, SEPARATOR_COLON, ConditionalExpression
#line 1039 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionConditionalExpression, ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 373: // AssignmentExpression -> ConditionalExpression
#line 1042 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionAssignmentExpression, ValueStack[ValueStack.Depth-1]); }
        break;
      case 374: // AssignmentExpression -> Assignment
#line 1043 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionAssignmentExpression, ValueStack[ValueStack.Depth-1]); }
        break;
      case 375: // Assignment -> Name, AssignmentOperator, Expression
#line 1046 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionAssignment, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 376: // Assignment -> KEYWORD_ID, AssignmentOperator, Expression
#line 1047 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionAssignment, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 377: // Assignment -> FieldAccess, AssignmentOperator, Expression
#line 1048 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionAssignment, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 378: // Assignment -> ArrayAccess, AssignmentOperator, Expression
#line 1049 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionAssignment, ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 379: // AssignmentOperator -> OPERATOR_ASSIGNMENT
#line 1052 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionAssignmentOperator, ValueStack[ValueStack.Depth-1]); }
        break;
      case 380: // AssignmentOperator -> OPERATOR_ASSIGNMENT_MAP
#line 1053 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionAssignmentOperator, ValueStack[ValueStack.Depth-1]); }
        break;
      case 381: // AssignmentOperator -> OPERATOR_ASSIGNMENT_ADDITION
#line 1054 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionAssignmentOperator, ValueStack[ValueStack.Depth-1]); }
        break;
      case 382: // AssignmentOperator -> OPERATOR_ASSIGNMENT_MULTIPLICATION
#line 1055 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionAssignmentOperator, ValueStack[ValueStack.Depth-1]); }
        break;
      case 383: // AssignmentOperator -> OPERATOR_ASSIGNMENT_SUBTRACTION
#line 1056 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionAssignmentOperator, ValueStack[ValueStack.Depth-1]); }
        break;
      case 384: // AssignmentOperator -> OPERATOR_ASSIGNMENT_DIVISION
#line 1057 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionAssignmentOperator, ValueStack[ValueStack.Depth-1]); }
        break;
      case 385: // AssignmentOperator -> OPERATOR_ASSIGNMENT_OR
#line 1058 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionAssignmentOperator, ValueStack[ValueStack.Depth-1]); }
        break;
      case 386: // AssignmentOperator -> OPERATOR_ASSIGNMENT_AND
#line 1059 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionAssignmentOperator, ValueStack[ValueStack.Depth-1]); }
        break;
      case 387: // AssignmentOperator -> OPERATOR_ASSIGNMENT_EXCLUSIVE_OR
#line 1060 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionAssignmentOperator, ValueStack[ValueStack.Depth-1]); }
        break;
      case 388: // AssignmentOperator -> OPERATOR_ASSIGNMENT_BITWISE_SHIFT_LEFT
#line 1061 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionAssignmentOperator, ValueStack[ValueStack.Depth-1]); }
        break;
      case 389: // AssignmentOperator -> OPERATOR_ASSIGNMENT_BITWISE_SHIFT_RIGHT
#line 1062 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionAssignmentOperator, ValueStack[ValueStack.Depth-1]); }
        break;
      case 390: // AssignmentOperator -> OPERATOR_ASSIGNMENT_BITWISE_SHIFT_RIGHT_UNSIGNED
#line 1063 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionAssignmentOperator, ValueStack[ValueStack.Depth-1]); }
        break;
      case 391: // Expression -> AssignmentExpression
#line 1066 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionExpression, ValueStack[ValueStack.Depth-1]); }
        break;
      case 392: // Expression -> SOQL
#line 1067 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionExpression, ValueStack[ValueStack.Depth-1]); }
        break;
      case 393: // Expression -> SOSL
#line 1068 "C:\Users\Nate\Source\Repos\walli\Wallace.IDE\SalesForceLanguage\\Apex\Apex.y"
{ CurrentSemanticValue = Node(Tokens.ProductionExpression, ValueStack[ValueStack.Depth-1]); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
